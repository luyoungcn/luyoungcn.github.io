<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Coding on LuyangのBlog</title><link>/categories/coding/</link><description>Recent content in Coding on LuyangのBlog</description><generator>Hugo</generator><language>zh-CN</language><lastBuildDate>Mon, 01 Jan 2024 20:19:08 +0800</lastBuildDate><atom:link href="/categories/coding/rss.xml" rel="self" type="application/rss+xml"/><item><title>perror</title><link>/post/perror_func/</link><pubDate>Mon, 01 Jan 2024 20:19:08 +0800</pubDate><guid>/post/perror_func/</guid><description>&lt;p>重点学习 errnum 转 str 的实现方法&lt;/p>
&lt;ul>
&lt;li>妙
&lt;ul>
&lt;li>妙
&lt;ul>
&lt;li>妙&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;h1 id="perror">perror&lt;/h1>
&lt;p>&lt;code>stdio-common/perror.c&lt;/code>&lt;/p>
&lt;ul>
&lt;li>&lt;code>perror (const char *s)&lt;/code>
&lt;ul>
&lt;li>&lt;code>static void perror_internal (FILE *fp, const char *s, int errnum)&lt;/code>&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;h1 id="__strerror_r">__strerror_r&lt;/h1>
&lt;p>&lt;code>string/_strerror.c&lt;/code>&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:2;-o-tab-size:2;tab-size:2;">&lt;code class="language-c" data-lang="c">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">/* Return a string describing the errno code in ERRNUM. */&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">char&lt;/span> &lt;span style="color:#f92672">*&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a6e22e">__strerror_r&lt;/span> (&lt;span style="color:#66d9ef">int&lt;/span> errnum, &lt;span style="color:#66d9ef">char&lt;/span> &lt;span style="color:#f92672">*&lt;/span>buf, &lt;span style="color:#66d9ef">size_t&lt;/span> buflen)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>{
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">char&lt;/span> &lt;span style="color:#f92672">*&lt;/span>err &lt;span style="color:#f92672">=&lt;/span> (&lt;span style="color:#66d9ef">char&lt;/span> &lt;span style="color:#f92672">*&lt;/span>) &lt;span style="color:#a6e22e">__get_errlist&lt;/span> (errnum);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">if&lt;/span> (&lt;span style="color:#a6e22e">__glibc_unlikely&lt;/span> (err &lt;span style="color:#f92672">==&lt;/span> NULL))
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">__snprintf&lt;/span> (buf, buflen, &lt;span style="color:#e6db74">&amp;#34;%s%d&amp;#34;&lt;/span>, &lt;span style="color:#a6e22e">_&lt;/span>(&lt;span style="color:#e6db74">&amp;#34;Unknown error &amp;#34;&lt;/span>), errnum);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">return&lt;/span> buf;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">return&lt;/span> &lt;span style="color:#a6e22e">_&lt;/span>(err);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;/code>&lt;/pr</description></item><item><title>如何在 Linux 用户空间中进行类似 GPIO 中断的处理</title><link>/post/how_to_handle_gpio_interrupt_like_handling_in_linux_userspace/</link><pubDate>Thu, 01 Jan 1970 00:00:00 +0800</pubDate><guid>/post/how_to_handle_gpio_interrupt_like_handling_in_linux_userspace/</guid><description>&lt;h1 id="how-to-handle-gpio-interrupt-like-handling-in-linux-userspace">How to handle GPIO interrupt-like handling in Linux userspace&lt;/h1>
&lt;h2 id="文件节点">文件节点&lt;/h2>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:2;-o-tab-size:2;tab-size:2;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>/sys/class/gpio/gpio666# ls
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>active_low device direction edge subsystem uevent value
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>只用对应 GPIO 有 irq 功能时才会有 edge 文件。&lt;/p></description></item></channel></rss>