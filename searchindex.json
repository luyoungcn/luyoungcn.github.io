[{"content":"This post will guide you in setting up your very own Hugo site with this theme. It covers the essential parts: installation, basic usage and recommended next steps. After setting up the basics, feel free to also take a look at other posts!\nInstallation This guide is a shorter version of Hugo\u0026rsquo;s quick start (you may even say it\u0026rsquo;s a quicker start). If you face any problems or want more comprehensive content, make sure to check it out!\nRequirements A basic understanding of Hugo (aka. read the docs) Hugo CLI installed git installed Setup Locally Create a new Hugo site hugo new site my-blog Change the working dir to the newly created one cd my-blog Install the theme from by cloning the GIT repository git clone https://github.com/math-queiroz/rusty-typewriter themes/rusty-typewriter Create some pages with the desired content hugo new content content/posts/first-post.md Test your site locally hugo server -D Congrats! You just got your site up and running locally. Now get to configure and customize it! Going Public Since after build you get just plain static site files (HTML, CSS and JS), there are plenty of pipelines to deploy, places to host and ways to publish your site. If you\u0026rsquo;re interested in the most common ones for Hugo, you can find them listed and documented in here.\nBasic Usage Now that you have a site, the standard workflow for managing content is simply given by:\nCreate the content page with hugo new content content/posts/post-name.md Edit the created file with the intended content Update the repository and publish the alterations Also, make sure to give the content management docs a read.\nNext Steps At last, if you need directions as to where to go next:\nTweak the hugo.toml config file based on the boilerplate one; Get ricing styling your themed site from with CSS; Make sure to leave a star at the theme repo and support my work if you enjoy it! ","date":"24 March, 2025","id":0,"permalink":"/posts/getting-started/","summary":"This post will guide you in setting up your very own Hugo site with this theme. It covers the essential parts: installation, basic usage and recommended next steps. After setting up the basics, feel free to also take a look at other posts!","tags":"starter guide","title":"Getting Started"},{"content":"This page outlines the configuration options for the theme. There are plenty of settings for tweaking your site\u0026rsquo;s layout and content presentation. Key features include options for controlling the side pane visibility, adjusting the number of items displayed on each list page, and managing elements such as featured posts, recent posts, taxonomies, and related content.\nGlobal Config The following configuration options can be added to your site\u0026rsquo;s Hugo config file.\n[rusty_typewriter] [params.rtwt] sidePane = true countPageItems = 7 [params.rtwt.home] showBio = true showAuthorImg = true sidePaneTags = true showFeatured = true showRecent = true hideRecentWhenFeatured = true countRecent = 5 [params.rtwt.side.home] sidePaneSticky = false taxonomies = [\u0026#39;tags\u0026#39;] countTaxonomy = 5 [params.rtwt.side.list] sidePaneSticky = false [params.rtwt.side.single] sidePaneSticky = true showDetails = true showTableOfContents = true showAttachments = true showRelated = true countRelated = 5 Page Config Some configurations are defined in the page frontmatter, they\u0026rsquo;re as following.\n+++ [rtwt] sidePane = false sidePaneSticky = false +++ ... ","date":"24 March, 2025","id":1,"permalink":"/posts/configuration/","summary":"This page outlines the configuration options for the theme. There are plenty of settings for tweaking your site\u0026rsquo;s layout and content presentation. Key features include options for controlling the side pane visibility, adjusting the number of items displayed on each list page, and managing elements such as featured posts, recent posts, taxonomies, and related content.","tags":"guide","title":"Configuration"},{"content":"📌深入 C++ 单例模式：原理、实现方式对比与 shared_ptr 架构设计 1️⃣ 什么是单例？基本语义与使用场景 单例（[[Singleton]]）是对象创建模式中最常见的一种，其目标是确保类在系统中只有一个实例，并提供全局访问入口。\n✅ 常见使用场景： 配置中心（ConfigManager） 日志系统（Logger） 资源池（如内存池、线程池） 调度器、会话管理器 框架注册表、插件系统 2️⃣ 单例的五种常见实现方式 推荐使用方式：\n懒汉式 + 线程安全（C++11 标准）局部静态变量（Meyers Singleton）\u0026mdash; 【推荐使用】 shared_ptr 单例（更灵活） 🍃1. 饿汉式单例（Early Instantiation） class Singleton { public: static Singleton\u0026amp; instance() { return inst; } private: Singleton() {} static Singleton inst; }; Singleton Singleton::inst; ✅ 简单易懂，线程安全（由 C++ 静态对象初始化保障） ❌ 资源可能浪费，程序启动就构造实例 🍃2. 懒汉式（Lazy Initialization）+ 非线程安全 class Singleton { public: static Singleton* getInstance() { if (!instance_) instance_ = new Singleton; return instance_; } private: Singleton() {} static Singleton* instance_; }; Singleton* Singleton::instance_ = nullptr; ✅ 仅在需要时创建实例 ❌ 非线程安全，多个线程可能同时构造多个实例 🍃3. 懒汉式 + 线程安全（C++11 标准）局部静态变量（Meyers Singleton）\u0026mdash; 【推荐使用】 class Singleton { public: static Singleton\u0026amp; instance() { static Singleton inst; // C++11 保证线程安全 return inst; } private: Singleton() = default; Singleton(const Singleton\u0026amp;) = delete; Singleton\u0026amp; operator=(const Singleton\u0026amp;) = delete; }; ✅ 推荐使用：线程安全、懒加载、无锁开销 ✅ 析构自动管理，依赖 C++ 静态局部变量特性 ❗ 禁止拷贝构造、赋值运算，防止实例复制 ✅ 最简洁、安全、高效的方式（默认推荐） 后面会有这种方式的语法语义与底层源码解析\n🍃4. 懒汉式 + 双重检查锁（DCLP Double-Checked Locking） class Singleton { public: static Singleton* instance() { if (!inst) { std::lock_guard\u0026lt;std::mutex\u0026gt; lock(mtx); if (!inst) inst = new Singleton; } return inst; } private: static Singleton* inst; static std::mutex mtx; }; ✅ 懒加载，适用于需要动态构造析构控制的场景 ❌ 实现复杂，容易出错 ⚠️ 在 C++11 前实现容易出错（缺乏内存屏障） 🍃5. 智能指针 + 延迟构造 class Singleton { public: static std::shared_ptr\u0026lt;Singleton\u0026gt; instance() { static std::shared_ptr\u0026lt;Singleton\u0026gt; inst(new Singleton); return inst; } }; 支持自定义析构、更适合资源生命周期管理\n🍃6. 模板化 shared_ptr 单例（进阶）\u0026mdash; 现代 C++ 的正确打开方式 template \u0026lt;typename T\u0026gt; class SharedSingleton { public: using Ptr = std::shared_ptr\u0026lt;T\u0026gt;; static void setDeleter(std::function\u0026lt;void(T*)\u0026gt; deleter) { getDeleter() = std::move(deleter); } template\u0026lt;typename... Args\u0026gt; static Ptr instance(Args\u0026amp;\u0026amp;... args) { std::call_once(getOnceFlag(), [\u0026amp;] { instance_() = Ptr(new T(std::forward\u0026lt;Args\u0026gt;(args)...), getDeleter()); }); return instance_(); } static void reset() { std::lock_guard\u0026lt;std::mutex\u0026gt; lock(getMutex()); instance_().reset(); getOnceFlag() = std::once_flag(); } private: static Ptr\u0026amp; instance_() { static Ptr inst; return inst; } static std::once_flag\u0026amp; getOnceFlag() { static std::once_flag flag; return flag; } static std::mutex\u0026amp; getMutex() { static std::mutex mtx; return mtx; } static std::function\u0026lt;void(T*)\u0026gt;\u0026amp; getDeleter() { static std::function\u0026lt;void(T*)\u0026gt; deleter = [](T* p) { delete p; }; return deleter; } }; 3️⃣ 实现方式对比分析 实现方式 构造控制 析构控制 支持传参 线程安全 生命周期可控 工程推荐度 饿汉式 ❌ ❌ ❌ ✅ ❌ 🟡 懒汉式+DCLP ✅ ❌ ❌ ⚠️ ❌ ❌（风险大） Meyers Singleton ✅ ❌ ❌ ✅（C++11） ❌ ✅ shared_ptr静态 ✅ ✅ ❌ ✅ 部分 ✅ shared_ptr模板封装 ✅ ✅ ✅ ✅ ✅ ✅✅✅ 4️⃣ 懒汉式 + 线程安全（C++11 标准）局部静态变量（Meyers Singleton）\u0026mdash; 语法语义与底层源码解析 🍃局部静态变量的线程安全（C++11） static Singleton\u0026amp; getInstance() { static Singleton instance; return instance; } C++11 标准 [stmt.dcl/4]：[[局部静态变量的初始化]]是[[线程安全]]的。\n[[编译器]]在初始化前加锁，保证只有一个线程可以构造它。\n编译器生成等价伪代码（示意）：\nSingleton\u0026amp; getInstance() { static bool initialized = false; static char storage[sizeof(Singleton)]; static std::once_flag flag; std::call_once(flag, [\u0026amp;] { new (\u0026amp;storage) Singleton(); initialized = true; }); return *reinterpret_cast\u0026lt;Singleton*\u0026gt;(\u0026amp;storage); } 🍃析构顺序与静态对象生命周期问题 局部 static 实例会在 main() 退出后被自动[[析构]] 如果你希望手动控制生命周期（如 exit() 后仍然存在），需配合 new 与 atexit 或 shared_ptr 实现。 🍃源码级剖析（glibc + clang libc++） [[glibc]] 层面：pthread_once 实现\n[[glibc]] 中 std::call_once 依赖 pthread_once：\nint pthread_once(pthread_once_t *once_control, void (*init_routine)(void)); pthread_once 使用锁 + 状态标志 + [[memory barrier]] 保证只初始化一次 是 [[C++11]] std::call_once 的基础\n[[libc++]] 实现（\u0026lt;mutex\u0026gt;）\nnamespace std { template\u0026lt;class Callable\u0026gt; void call_once(once_flag\u0026amp; flag, Callable\u0026amp;\u0026amp; f); } 内部采用了双状态原子标记（__called, __complete）\nGCC 实现中使用 __atomic_load_n + __sync_bool_compare_and_swap 保证[[原子性]]\n5️⃣ 底层原理解析：语义 + ABI 行为 + 构造顺序 🧵 std::call_once + std::once_flag static std::once_flag f; std::call_once(f, [] { singleton = new Singleton(); }); 🔥 内存模型分析 局部 static：存储于静态区 shared_ptr：堆区资源，引用计数释放 6️⃣ ResourcePool / ThreadPool 工程实践 auto pool = SharedSingleton\u0026lt;BufferPool\u0026gt;::instance(32, 8*1024); auto buf = pool-\u0026gt;acquire(); auto pool = SharedSingleton\u0026lt;ThreadPool\u0026gt;::instance(8); pool-\u0026gt;enqueue([] { do_work(); }); ✅ 总结与设计哲学 能力点 Meyers Singleton shared_ptr 封装 安全性 ✅ ✅ 灵活性 ❌ ✅✅ 生命周期控制 ❌ ✅✅✅ 测试友好性 ❌ ✅✅ 工程适配度 🟡 ✅✅✅ ","date":"6 June, 2025","id":2,"permalink":"/posts/%E6%B7%B1%E5%85%A5-c++-%E5%8D%95%E4%BE%8B%E6%A8%A1%E5%BC%8F%E5%8E%9F%E7%90%86%E5%AE%9E%E7%8E%B0%E6%96%B9%E5%BC%8F%E5%AF%B9%E6%AF%94%E4%B8%8E-shared_ptr-%E6%9E%B6%E6%9E%84%E8%AE%BE%E8%AE%A1/","summary":"单例（[[Singleton]]）是对象创建模式中最常见的一种，其目标是确保类在系统中只有一个实例，并提供全局访问入口。","tags":"cpp 单例模式 singleton","title":"📌深入 C++ 单例模式：原理、实现方式对比与 shared_ptr 架构设计"},{"content":"📌 C++类成员函数：static 与 const 的声明与定义规则解析 为什么头文件声明要写 static/const，而实现时 static 要省略、const 必须保留？\n🔍 核心规则对比表 关键字 头文件（.h）声明 源文件（.cpp）定义 底层原因 static 必须显式声明：static void func(); 禁止重复：直接写 void Class::func() static 标识函数归属类而非对象；定义时 ClassName:: 已隐含作用域，再写 static 会被解释为文件作用域函数，破坏封装性。 const 必须显式声明：int get() const; 必须保留：int Class::get() const const 是函数签名的一部分，声明与定义必须严格一致，否则编译器视为不同函数，导致链接错误。 ⚙️ 一、static 关键字的声明与定义分离 1. 声明时需 static 在头文件中，static 明确标识该函数是类级别共享的，不依赖对象实例（无 this 指针）：\n// MyClass.h class MyClass { public: static void sharedFunc(); // ✅ 声明为静态 }; 2. 定义时禁止 static 在源文件中，ClassName:: 已指明函数归属类作用域。若添加 static：\n会被编译器解释为文件作用域的静态函数（仅当前 .cpp 可见）； 导致无法通过 MyClass::sharedFunc() 全局访问，破坏封装性。 ✅ 正确写法：\n// MyClass.cpp void MyClass::sharedFunc() { /* 实现 */ } // 无 static ❌ 错误写法：\nstatic void MyClass::sharedFunc() { ... } // ❌ 语义冲突！ 底层原理：static 成员函数无 this 指针，属于类而非对象。定义时通过 ClassName:: 解析作用域，冗余的 static 会覆盖类作用域。\n⚙️ 二、const 关键字的声明与定义一致性 1. 声明时需 const 表明该函数是常量成员函数，承诺不修改对象状态（隐含 const this* 指针），允许 const 对象调用：\nclass MyClass { public: int getValue() const; // ✅ 承诺不修改对象 }; 2. 定义时必须保留 const const 是函数签名的一部分，省略会导致：\n函数签名不匹配（声明为 const，定义非 const）； const 对象无法调用该函数，引发编译错误。 ✅ 正确写法：\nint MyClass::getValue() const { // ✅ 保留 const return value; } ❌ 错误写法：\nint MyClass::getValue() { // ❌ 丢失 const return value; } 底层原理：const 成员函数的本质是修饰隐含的 this 指针（const MyClass* const this），定义时缺失 const 会导致 this 指针类型不匹配。\n⚡ 三、关键设计原则与常见陷阱 1. static 和 const 的互斥性 静态成员函数不能为 const： static 函数无 this 指针，而 const 依赖 const this*，两者语义冲突。\n尝试组合会直接编译失败：\nclass Example { public: static void func() const; // ❌ 编译错误 }; 2. 常见错误示例 // MyClass.h class MyClass { public: static void staticFunc(); // ✅ int getValue() const; // ✅ }; // MyClass.cpp static void MyClass::staticFunc() { ... } // ❌ static 重复 int MyClass::getValue() { ... } // ❌ const 丢失 3. 单一定义规则（ODR） 声明与定义的符号必须完全匹配，否则引发未定义行为。\n✅ 四、最佳实践总结 声明规范： static 成员函数：头文件中显式标记 static。 const 成员函数：头文件中显式标记 const。 定义规范： static 成员函数：省略 static，仅用 ClassName:: 限定作用域。 const 成员函数：保留 const，确保签名一致。 组合使用： 用 static const 定义类级别常量（如 static const int SIZE = 100;），避免跨文件共享可变状态。 💎 结语：理解底层，避免陷阱 static 和 const 在类成员函数中的差异源于 C++ 的作用域解析机制和常量正确性约束：\nstatic 的分离设计（声明写，定义省）确保类作用域与文件作用域不冲突； const 的严格一致性保障对象状态安全。 掌握这些规则，能显著提升代码的健壮性和可维护性。建议在代码审查中重点关注 const 签名一致性，并用 static 优化无状态工具函数！\n扩展思考：C++23 中 constexpr 成员函数的新特性如何与 static/const 协同？欢迎在评论区探讨！\n","date":"4 June, 2025","id":3,"permalink":"/posts/-c++-%E7%B1%BB%E6%88%90%E5%91%98%E5%87%BD%E6%95%B0-static-%E4%B8%8E-const-%E7%9A%84%E5%A3%B0%E6%98%8E%E4%B8%8E%E5%AE%9A%E4%B9%89%E8%A7%84%E5%88%99%E8%A7%A3%E6%9E%90/","summary":"为什么头文件声明要写 static/const，而实现时 static 要省略、const 必须保留？","tags":"cpp","title":"📌 C++类成员函数 static 与 const 的声明与定义规则解析"},{"content":"[[c++]] [[delete]] [[构造函数]] [[析构函数]]\n深入分析：= delete 与私有化构造和析构函数的本质区别 ​直接结论​：\n绝对不能将构造函数和析构函数写为 = delete 这会直接破坏单例模式的核心功能。以下是详细技术分析：\n一、语法层面的根本差异 方案 可访问性 编译器行为 对单例模式的影响 ​私有构造函数​ 仅类内部可访问 允许类内部代码构造对象 实现单例的核心手段 Singleton() = delete 函数被彻底删除 任何构造尝试直接报错 完全无法创建对象 方案 可访问性 编译器行为 对单例模式的影响 ​私有析构函数​ 仅类内部可访问 允许类内部析构对象 防止外部delete操作 ~Singleton() = delete 函数被彻底删除 对象销毁时直接报错 对象无法被正确释放 二、关键错误场景演示 class Singleton { public: static Singleton\u0026amp; getInstance() { static Singleton instance; // 这里会编译失败！ return instance; } Singleton() = delete; // 构造函数被删除 ~Singleton() = delete; // 析构函数被删除 }; 编译器报错信息 error: use of deleted function \u0026#39;Singleton::Singleton()\u0026#39; static Singleton instance; ^ note: declared here Singleton() = delete; ^~~~~~~~~~~ error: use of deleted function \u0026#39;Singleton::~Singleton()\u0026#39; static Singleton instance; ^ note: declared here ~Singleton() = delete; ^ 三、技术原理深度解析 构造函数删除的致命问题 ​静态局部变量初始化​ static Singleton instance本质需要调用构造函数，但构造函数已被删除 → 编译失败 ​单例模式基础破坏​ 删除构造函数意味着该类无法被实例化，完全失去单例存在的意义 析构函数删除的连锁反应 ​静态变量销毁问题​ 程序退出时，静态变量instance需要调用析构函数 → 因析构函数被删除导致链接错误 ​内存泄漏伪装者​ 即使通过特殊手段构造对象，也无法正常释放资源 → 违反RAII原则 四、正确方案对比验证 正确实现（私有构造/析构） class Singleton { public: static Singleton\u0026amp; getInstance() { static Singleton instance; // 正确：调用私有构造函数 return instance; } // 禁用拷贝操作 Singleton(const Singleton\u0026amp;) = delete; Singleton\u0026amp; operator=(const Singleton\u0026amp;) = delete; private: Singleton() = default; // 正确：私有默认构造 ~Singleton() = default; // 正确：私有析构 }; 关键优势 ​构造可控性​ 通过私有构造函数限制对象创建途径，确保唯一实例 ​析构安全性​ 私有析构函数阻止外部delete操作，依赖系统自动释放 ​资源管理合规​ 静态局部变量在程序结束时自动调用析构函数，符合RAII规范 五、特殊场景扩展讨论 Q：如果确实需要完全禁止某个类的实例化？ class UtilityClass { // 工具类，仅包含静态方法 public: UtilityClass() = delete; ~UtilityClass() = delete; static void helper1(); static int helper2(); }; ​适用场景​：\n纯静态工具类（无需实例） 仅作为模板元编程工具 ​与单例模式的核心区别​：\n单例需要唯一实例 工具类完全不需要实例 六、总结表格：设计决策指南 需求场景 构造函数方案 析构函数方案 典型应用 单例模式 私有默认构造 私有析构 系统全局管理器 不可实例化的工具类 = delete = delete 数学计算工具集 抽象接口基类 protected默认构造 public virtual析构 多态基类 仅堆分配对象 私有构造+静态工厂方法 public非虚析构 对象池管理 ​最终结论​：在单例模式中必须使用私有构造函数/析构函数，而非= delete。= delete语法应仅用于完全禁止类实例化的场景（如纯静态工具类）。\n","date":"4 June, 2025","id":4,"permalink":"/posts/%E6%B7%B1%E5%85%A5%E5%88%86%E6%9E%90-delete-%E4%B8%8E%E7%A7%81%E6%9C%89%E5%8C%96%E6%9E%84%E9%80%A0%E5%92%8C%E6%9E%90%E6%9E%84%E5%87%BD%E6%95%B0%E7%9A%84%E6%9C%AC%E8%B4%A8%E5%8C%BA%E5%88%AB/","summary":"[[c++]] [[delete]] [[构造函数]] [[析构函数]]","tags":"cpp","title":"📌深入分析 =delete 与私有化构造和析构函数的本质区别"},{"content":"深入理解 C++ 中的 std ref 和 cref 的引用封装机制 在现代 C++ 编程中，按值传参是常态，但有时候我们确实需要传引用。尤其是在使用 std::bind、std::thread、标准算法等场景下，如果不加注意，原本希望传引用的变量却被复制，导致逻辑失效甚至程序崩溃。\n本文将带你深入理解 std::ref 和 std::cref 的设计原理、使用场景以及易踩的坑。\n为什么需要引用封装器 先来看一个例子：\nvoid increment(int\u0026amp; x) { x++; } int main() { int a = 5; std::thread t(increment, a); // ❌ 编译失败 t.join(); } 你可能以为把 a 传进去就是引用了，但事实并非如此。std::thread 默认按值复制参数。它尝试将 a 拷贝一份传递给 increment，而 increment 期望的是 int\u0026amp;，于是编译器报错。\n这个时候，std::ref(a) 就派上了用场：\nstd::thread t(increment, std::ref(a)); // ✅ 传引用成功 std ref 和 cref 是什么 std::ref(obj)：返回一个 可修改引用 的包装器。\nstd::cref(obj)：返回一个 const 引用 的包装器。\n这两个函数本质上返回的是一个 std::reference_wrapper\u0026lt;T\u0026gt; 类型，它可以模拟“按引用传参”的行为，但仍然以“按值”方式传递给调用者。\n典型使用场景 1. std::thread void print(int\u0026amp; x) { std::cout \u0026lt;\u0026lt; x \u0026lt;\u0026lt; std::endl; } int main() { int a = 42; std::thread t(print, std::ref(a)); // ✅ 按引用传入 t.join(); } 如果不使用 std::ref，代码会因为引用绑定失败而无法通过编译。\n2. std::bind #include \u0026lt;functional\u0026gt; void set_to_100(int\u0026amp; x) { x = 100; } int main() { int a = 0; auto f = std::bind(set_to_100, std::ref(a)); f(); // ✅ 成功修改 a } 若不使用 std::ref，a 会被拷贝，set_to_100 内部修改的是拷贝，而不是原变量。\n3. 标准算法 #include \u0026lt;algorithm\u0026gt; #include \u0026lt;iostream\u0026gt; #include \u0026lt;vector\u0026gt; #include \u0026lt;functional\u0026gt; void print(int x) { std::cout \u0026lt;\u0026lt; x \u0026lt;\u0026lt; \u0026#34; \u0026#34;; } int main() { std::vector\u0026lt;int\u0026gt; data{1, 2, 3}; std::for_each(data.begin(), data.end(), std::ref(print)); // ✅ 引用函数 } cref 的使用场景 当你希望以只读引用方式传参时，使用 std::cref：\nvoid show(const int\u0026amp; x) { std::cout \u0026lt;\u0026lt; x \u0026lt;\u0026lt; std::endl; } int main() { int val = 10; auto f = std::bind(show, std::cref(val)); f(); // 输出 10 } 实现原理简析 标准库中的 reference_wrapper 本质上就是用一个指针模拟引用：\ntemplate\u0026lt;typename T\u0026gt; class reference_wrapper { public: explicit reference_wrapper(T\u0026amp; ref) noexcept : ptr(std::addressof(ref)) {} T\u0026amp; get() const noexcept { return *ptr; } operator T\u0026amp;() const noexcept { return *ptr; } private: T* ptr; }; 这也意味着：\nreference_wrapper 不会延长原对象的生命周期\nref 和 cref 都只能绑定左值\n使用注意事项 1. 不可绑定右值 std::ref(42); // ❌ 错误：不能对临时对象创建可修改引用 std::cref(42); // ✅ 正确：const 引用可以绑定右值 2. 生命周期问题 不要对临时变量使用 std::ref：\nauto f = std::bind(print, std::ref(temp())); // ❌ 悬垂引用 应用总结 场景 默认传值？ 是否推荐使用 ref/cref std::thread ✅ ✅ std::bind ✅ ✅ std::function ✅（捕获拷贝） ✅ for_each / 算法 ✅ ✅ Lambda 捕获 可选（值/引用） ❌ 推荐 [\u0026amp;] 捕获 结语 std::ref 和 std::cref 是现代 C++ 中非常实用的小工具，它们让你能够安全、显式地在值语义上下文中传递引用，避免拷贝、保持语义清晰。\n在多线程、函数绑定、算法调用等场景下，它们能够显著提高代码的正确性与表达力。\n下次遇到按值调用的问题，不妨试着想一想：这里是不是该用 std::ref 或 std::cref？\n📚 推荐阅读：\ncppreference：std::ref 《Effective Modern C++》第 22 条：避免意外按值传参 ","date":"4 June, 2025","id":5,"permalink":"/posts/%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3-c++-%E4%B8%AD%E7%9A%84-std-ref-%E5%92%8C-cref-%E7%9A%84%E5%BC%95%E7%94%A8%E5%B0%81%E8%A3%85%E6%9C%BA%E5%88%B6/","summary":"先来看一个例子：","tags":"cpp","title":"📌深入理解 C++ 中的 std ref 和 cref 的引用封装机制"},{"content":"常用编译指令 cmake -S . -B build cmake --build build -DCMAKE_BUILD_TYPE=Debug -DCMAKE_MAKE_PROGRAM=ninja -DCMAKE_BUILD_TYPE=Debug -G Ninja -S . -B build --build 参考资料 Lastest Release Cmake Reference Documentation https://cmake.org/documentation/ Modern CMake 简体中文版 cmake 实践 [CMake-Summary-of-documentation-chinese-@fenneishi](https://github.com/fenneishi/CMake-Summary-of-documentation-chinese-) ","date":"4 June, 2025","id":6,"permalink":"/posts/cmake/","summary":"","tags":"cmake","title":"cmake"},{"content":"CMake：include_directories 与 target_include_directories 使用指南 概述 在CMake中，include_directories()和target_include_directories()都用于指定头文件搜索路径，但它们在作用范围和使用方法上有显著区别。现代CMake项目建议优先使用target_include_directories()。\n命令详解 1. include_directories() (全局作用域) ​作用范围​：影响当前目录及之后定义的所有目标\n​工作方式​：为所有目标添加公共包含路径\n​使用场景​：简单项目或旧版CMake兼容\n​语法​：\ninclude_directories([AFTER|BEFORE] [SYSTEM] dir1 [dir2 ...]) 使用示例： include_directories(include third_party/lib) add_executable(app1 src/app1.cpp) add_executable(app2 src/app2.cpp) # app1和app2都会自动包含include/和third_party/lib/路径 2. target_include_directories() (目标特定作用域) ​作用范围​：仅影响指定目标\n​工作方式​：为目标添加私有或公开包含路径\n​使用场景​：现代CMake项目推荐方式（CMake 3.0+）\n​语法​：\ntarget_include_directories(\u0026lt;target\u0026gt; [SYSTEM] [BEFORE] \u0026lt;INTERFACE|PUBLIC|PRIVATE\u0026gt; [item1...] [\u0026lt;INTERFACE|PUBLIC|PRIVATE\u0026gt; [item2...] ...]) 关键字说明： 关键字 描述 PRIVATE 仅当前目标使用（不向依赖者传递） INTERFACE 仅依赖此目标的其他目标使用（当前目标不使用） PUBLIC 当前目标和依赖者都使用（= PRIVATE + INTERFACE） 使用示例： # 共享库定义 add_library(math_lib STATIC src/math.cpp) target_include_directories(math_lib PRIVATE src # 仅编译库时使用 INTERFACE include # 库使用者的包含路径 ) # 可执行文件定义 add_executable(calculator src/main.cpp) target_include_directories(calculator PRIVATE app_include # 仅本目标使用的路径 ) target_link_libraries(calculator PRIVATE math_lib) # calculator将自动获得math_lib的include/路径 核心区别对比 ​特性​ include_directories() target_include_directories() ​作用范围​ 全局（所有目标） 目标特定 ​依赖传播​ ❌ 不支持 ✅ 通过PUBLIC/INTERFACE支持 ​现代CMake推荐度​ ❌ 不推荐 ✅ 强烈推荐 ​代码隔离性​ ❌ 差（路径污染风险） ✅ 优秀（路径隔离） ​典型用法时机​ 在目标定义前调用 在目标定义后调用 ​使用依赖关系​ 无关联 与target_link_libraries()协同使用 最佳实践指南 ​优先使用目标特定作用域​\n# 推荐 ✔ add_library(my_lib ...) target_include_directories(my_lib ...) # 避免 ✖ include_directories(...) add_library(my_lib ...) ​正确使用可见性关键字​\nPRIVATE：仅内部实现需要的头文件 INTERFACE：库的公共API头文件 PUBLIC：实现需要且使用者也需要访问的头文件 ​**结合使用target_link_libraries()**​\n# 消费者自动获得依赖项的公开头文件路径 target_link_libraries(consumer PRIVATE provider) ​处理系统头文件​\ntarget_include_directories(my_target SYSTEM PRIVATE /usr/local/custom_include) ​路径处理注意事项​\n优先使用绝对路径或生成器表达式：\ntarget_include_directories(my_lib PRIVATE \u0026#34;$\u0026lt;BUILD_INTERFACE:${CMAKE_CURRENT_SOURCE_DIR}/include\u0026gt;\u0026#34; \u0026#34;$\u0026lt;INSTALL_INTERFACE:include\u0026gt;\u0026#34; ) 迁移策略（旧项目升级） 逐步替换全局包含\n# 旧方式 include_directories(common_include) # 新方式：为每个目标单独添加 target_include_directories(target1 PRIVATE common_include) target_include_directories(target2 PRIVATE common_include) 处理子目录包含\n# 旧方式 add_subdirectory(lib) include_directories(${lib_include_dir}) # 新方式：通过目标链接传播 target_link_libraries(my_app PRIVATE lib_target) 使用接口目标统一管理\nadd_library(global_includes INTERFACE) target_include_directories(global_includes INTERFACE common_include third_party/include ) target_link_libraries(my_app PRIVATE global_includes) 总结建议 ​场景​ ​推荐方法​ 现代新项目 全部使用target_include_directories() 旧项目维护 逐步替换为目标特定方式 跨目标共享路径 创建INTERFACE库统一管理 第三方库包含 配合find_package()使用导入目标 目录范围简单包含（小型项目） 审慎使用include_directories() ​黄金法则​：在定义目标(add_executable/add_library)之后，总是优先使用target_include_directories()进行包含路径的设置，并通过适当的可见性关键字确保路径的正确传播。\n","date":"3 June, 2025","id":7,"permalink":"/posts/cmakeinclude_directories-%E4%B8%8E-target_include_directories-%E4%BD%BF%E7%94%A8%E6%8C%87%E5%8D%97/","summary":"在CMake中，include_directories()和target_include_directories()都用于指定头文件搜索路径，但它们在作用范围和使用方法上有显著区别。现代CMake项目建议优先使用target_include_directories()。","tags":"cmake","title":"CMake：include_directories 与 target_include_directories 使用指南"},{"content":"摘要\n条件编译（Conditional Compilation）是 CMake 构建系统实现跨平台、多配置、多功能模块化构建的重要机制。本文以学术论文的严谨风格，系统剖析 CMake 条件编译的原理，结合实际工程案例探讨其在大型项目中的应用，并深入分析变量作用域对条件逻辑的影响。文中还专门介绍 option(USE_FOO \u0026quot;Enable FOO support\u0026quot; OFF) 语句的行为及其在条件判断中的应用与区别。通过对官方文档与经典社区资料的引用，力求为 CMake 工程师提供全面、可复用的指导与最佳实践。\n关键词 CMake；条件编译；if；生成器表达式；变量作用域；缓存变量；目录作用域；函数作用域；option()\n1. 引言 近年来，随着跨平台 C/C++ 项目规模的不断扩张，开发者需要针对操作系统、编译器版本、构建类型（如 Debug/Release）等多种维度，灵活地控制构建过程。CMake 作为一种流行的元构建（meta-build）工具，内置了强大的条件编译能力，使得同一套 CMake 脚本能够自动适配多种环境与需求。本文旨在系统阐述 CMake 条件编译的核心原理，包括 if() 语句与生成器表达式（Generator Expressions）的区别与协同；并结合工程实践介绍常见模式。此外，针对 CMake 的动态作用域模型，深入讨论目录作用域（Directory Scope）、函数作用域（Function Scope）与缓存作用域（Cache Scope）对条件逻辑的影响，帮助读者避免常见错误、提升脚本可维护性。最后，以 option(USE_FOO \u0026quot;Enable FOO support\u0026quot; OFF) 为例，演示变量在条件判断中的常见误区与正确用法。\n2. CMake 条件编译原理 2.1 if() 条件判断语法与行为 CMake 提供了 if()、elseif()、else()、endif() 等控制结构，用来根据条件选择性地执行脚本代码。其基本语法为：\nif(\u0026lt;condition\u0026gt;) \u0026lt;commands\u0026gt; elseif(\u0026lt;condition\u0026gt;) \u0026lt;commands\u0026gt; else() \u0026lt;commands\u0026gt; endif() 其中 \u0026lt;condition\u0026gt; 可为布尔常量、数值或字符串比较、变量存在性判断、逻辑组合等多种形式。根据官方文档，以下情形会被视为“假”（False）：0/\u0026quot;0\u0026quot;、OFF/\u0026quot;OFF\u0026quot;、NO/\u0026quot;NO\u0026quot;、FALSE/\u0026quot;FALSE\u0026quot;、NOTFOUND、空字符串，或未定义变量；而 1/\u0026quot;1\u0026quot;、ON/\u0026quot;ON\u0026quot;、YES/\u0026quot;YES\u0026quot;、TRUE/\u0026quot;TRUE\u0026quot;、Y、非零数字等被视为“真”（True）(cmake.org, cmake.org)。\n在条件中若直接写 \u0026lt;variable\u0026gt;，CMake 会判别该变量是否已定义，且其值不在上述“假”列表中，则结果为真；否则为假。需特别注意的是，CMake 的 if() 并不会为布尔判断单独创建作用域，位于 if()/endif() 之间用 set() 定义的变量，会绑定到当前目录作用域并影响后续逻辑，而不会在 endif() 时销毁，这与大多数编程语言（如 C/C++）不同(cmake.org, cmake.org)。\n此外，比较操作（如 EQUAL、LESS、GREATER）、字符串比较（如 STREQUAL、STRLESS）、版本比较（如 VERSION_LESS、VERSION_GREATER）等，在遇到 \u0026lt;variable|string\u0026gt; 形式时，会先判断是否为已定义变量，再取其值进行比较；不存在时即按字面值处理。而逻辑运算符 NOT、AND、OR 则按照优先级自上而下依次解析(cmake.org, cmake.org)。\n2.2 生成器表达式（Generator Expressions）及延迟求值 除了 if() 语法，CMake 还通过生成器表达式（Generator Expressions）实现针对目标属性（target properties）和编译选项的条件化配置。这种表达式形如 $\u0026lt;condition:result\u0026gt; 或 $\u0026lt;IF:condition,true_string,false_string\u0026gt;，在构建系统生成阶段（而非配置阶段）延迟求值，以便根据实际构建上下文（如生成器类型、多配置模式、平台、编译器版本等）输出不同结果。例如：\ntarget_compile_options(MyTarget PRIVATE $\u0026lt;$\u0026lt;CONFIG:Debug\u0026gt;:-O0\u0026gt; $\u0026lt;$\u0026lt;CONFIG:Release\u0026gt;:-O3\u0026gt; ) 当构建类型为 Debug 时，$\u0026lt;CONFIG:Debug\u0026gt; 求值为 1，输出 -O0；当为 Release 时，$\u0026lt;CONFIG:Release\u0026gt; 求值为 1，输出 -O3。若使用多配置生成器（如 Visual Studio、Ninja Multi-Config），则应依赖生成器表达式判断 CONFIG，而非直接判断 ${CMAKE_BUILD_TYPE}，因为后者在构建阶段可能不准确(cmake.org, cmake.org)。\n更复杂的嵌套示例：\n$\u0026lt;$\u0026lt;AND:$\u0026lt;CXX_COMPILER_ID:GNU\u0026gt;,$\u0026lt;VERSION_GREATER_EQUAL:$\u0026lt;CXX_COMPILER_VERSION\u0026gt;,9.0\u0026gt;\u0026gt;:-Wall\u0026gt; 该表达式仅在编译器为 GNU 且版本 ≥ 9.0 时产生 -Wall，否则输出空串。由内向外依次解析 $\u0026lt;CXX_COMPILER_ID:GNU\u0026gt; 判断编译器标识，$\u0026lt;CXX_COMPILER_VERSION\u0026gt; 判断版本号，最终通过 $\u0026lt;AND:…\u0026gt; 组合逻辑(cmake.org, github.com)。\n3. 工程实践：灵活运用条件编译 3.1 平台与编译器差异的编译选项设置 在跨平台项目中，对不同操作系统、编译器提供不同编译选项或链接库路径的需求极为常见。以下示例展示两种对比做法：\n使用 if()\nif(WIN32) set(PLATFORM_LIBS ws2_32) elseif(APPLE) set(PLATFORM_LIBS \u0026#34;-framework CoreFoundation\u0026#34;) else() set(PLATFORM_LIBS pthread) endif() add_executable(MyApp main.cpp) target_link_libraries(MyApp PRIVATE ${PLATFORM_LIBS}) 代码直观，对应平台关联系统库。条件判断在配置阶段即时生效(cmake.org, cmake.org)。\n使用生成器表达式\nadd_executable(MyApp main.cpp) target_link_libraries(MyApp PRIVATE $\u0026lt;$\u0026lt;PLATFORM_ID:Windows\u0026gt;:ws2_32\u0026gt; $\u0026lt;$\u0026lt;PLATFORM_ID:Darwin\u0026gt;:\u0026#34;-framework CoreFoundation\u0026#34;\u0026gt; $\u0026lt;$\u0026lt;PLATFORM_ID:Linux\u0026gt;:pthread\u0026gt; ) 生成器表达式将平台判断“推迟”到构建系统生成阶段，脚本更为简洁。无论在哪个子目录，只要针对 MyApp 设置属性，都能正确链接对应库(cmake.org, stuff.mit.edu)。\n3.2 多配置与编译选项管理 对于支持多配置的生成器（如 Visual Studio、Ninja Multi-Config），通过生成器表达式管理不同配置下的编译宏与选项是最佳实践：\nadd_executable(MyLib lib.cpp) target_compile_definitions(MyLib PRIVATE $\u0026lt;$\u0026lt;CONFIG:Debug\u0026gt;:DEBUG_MODE\u0026gt; $\u0026lt;$\u0026lt;CONFIG:Release\u0026gt;:NDEBUG\u0026gt; ) target_compile_options(MyLib PRIVATE $\u0026lt;$\u0026lt;CONFIG:Debug\u0026gt;:-g\u0026gt; $\u0026lt;$\u0026lt;CONFIG:RelWithDebInfo\u0026gt;:-O2 -g\u0026gt; ) 相比在多个 if(CONFIG STREQUAL \u0026quot;Debug\u0026quot;) 分支中反复设置，生成器表达式方式更具可读性、易扩展。当项目需要新增配置（如 Profile），只需在同一语句组中新增对应表达式即可，无需修改多处位置(cmake.org, cmake.org)。\n3.3 可选依赖与插件化架构 在大型项目中，常需根据用户选项或检测结果决定是否链接某些第三方库。典型模式如下：\noption(USE_FOO \u0026#34;Enable FOO support\u0026#34; OFF) if(USE_FOO) find_package(FOO REQUIRED) target_compile_definitions(MyApp PRIVATE USE_FOO) target_link_libraries(MyApp PRIVATE FOO::FOO) endif() 若用户通过 -DUSE_FOO=ON 开启，则执行 find_package(FOO)，并将 FOO::FOO 链接到目标。若将上述逻辑改为生成器表达式，可在链接阶段再判断：\nfind_package(FOO QUIET) target_compile_definitions(MyApp PRIVATE $\u0026lt;$\u0026lt;BOOL:${FOO_FOUND}\u0026gt;:USE_FOO\u0026gt; ) target_link_libraries(MyApp PRIVATE $\u0026lt;$\u0026lt;BOOL:${FOO_FOUND}\u0026gt;:FOO::FOO\u0026gt; ) 此时，无需显式 if(USE_FOO)，而是通过 $\u0026lt;BOOL:${FOO_FOUND}\u0026gt; 判断 find_package() 成功与否，再决定是否传递宏与链接库，可有效简化脚本层次(stackoverflow.com, cmake.org)。\n4. 变量作用域管理 4.1 CMake 的动态作用域模型 CMake 采用动态作用域（Dynamic Scoping），包含三类主要作用域：函数作用域（Function Scope）、目录作用域（Directory Scope）与缓存作用域（Cache Scope）(cmake.org, stuff.mit.edu)。\n函数作用域\n由 function() 创建，函数内部调用 set(VAR val) 则绑定于当前函数作用域，函数结束后该绑定失效，不会影响外部目录作用域。 目录作用域\n每个 CMakeLists.txt 文件对应一个目录作用域。在处理子目录前，CMake 会将父目录的变量绑定复制到子目录，形成层级继承。若在当前目录（非函数内部）使用 set(VAR val)，则绑定至当前目录与其后续子目录。 缓存作用域\n通过 -DVAR=val 或 set(VAR val CACHE TYPE \u0026quot;docstring\u0026quot;) 等方式创建，持久保存在 CMakeCache.txt 中，可跨多次配置运行维持不变。缓存变量在所有目录及函数作用域最低优先级查询。 在变量引用时，CMake 会依次在函数调用栈、当前目录作用域、缓存作用域中查找绑定；若均未找到，则变量视为空字符串。若需强制读取缓存条目可使用 $CACHE{VAR} 语法。这样层次化的查找逻辑对正确理解条件编译至关重要(stuff.mit.edu, cmake.org)。\n4.2 条件逻辑与变量持久性陷阱 CMake if() 本身不创建独立作用域，意味着在 if()/endif() 中用 set() 定义的普通变量，将绑定到当前目录作用域并对后续逻辑生效，除非显示指定 PARENT_SCOPE 或 CACHE。例如：\nif(USE_BAR) set(BAR_ENABLED TRUE) endif() message(\u0026#34;BAR_ENABLED = ${BAR_ENABLED}\u0026#34;) 若 USE_BAR 为真，则 BAR_ENABLED 被赋值 TRUE 并输出。\n若 USE_BAR 为假，则 BAR_ENABLED 未定义，输出为空字符串。\n此行为与许多编程语言不同，后者通常在 if 块结束时销毁局部变量。为避免此类风险，建议在条件外先初始化变量：\nset(BAR_ENABLED FALSE) if(USE_BAR) set(BAR_ENABLED TRUE) endif() 这样确保无论条件如何，BAR_ENABLED 都有确定值(cmake.org, manpages.debian.org)。\n4.3 PARENT_SCOPE 与 CACHE 的典型场景 PARENT_SCOPE\n用于将某个子目录中定义的变量值“上抛”到直接父目录作用域。例如：\n# 根 CMakeLists.txt set(FOO_FOUND FALSE) add_subdirectory(libfoo) if(FOO_FOUND) message(STATUS \u0026#34;Foo 已启用\u0026#34;) endif() # libfoo/CMakeLists.txt if(USE_FOO) add_library(foo STATIC foo.cpp) set(FOO_FOUND TRUE PARENT_SCOPE) endif() 当 USE_FOO 为真时，FOO_FOUND 在 libfoo 中被置为 TRUE 并传递至根目录，根目录即可检测到子模块状态。但需注意，PARENT_SCOPE 仅将绑定传递给直接父目录，若需跨层次传递，则需多次使用或借助缓存变量(stuff.mit.edu, releases.llvm.org)。\nCACHE\n缓存变量适用于用户可在 CMake GUI（如 ccmake、cmake-gui）或命令行 -D 提供交互式配置的场景。例如：\noption(ENABLE_BAZ \u0026#34;Enable BAZ feature\u0026#34; OFF) if(ENABLE_BAZ) add_subdirectory(baz) endif() 该语句将 ENABLE_BAZ 写入缓存，用户可以在后续配置时修改其值。如果使用 set(VAR val CACHE TYPE \u0026quot;doc\u0026quot;)，则在首次加入缓存后，除非加上 FORCE，否则后续同名缓存设置不会覆盖已存在值；当前目录 set(VAR val) 会屏蔽缓存中同名条目，直到该局部变量失效或被 unset() 删除(cmake.org, manpages.debian.org)。\n5. option(USE_FOO) 示例及条件判断 5.1 option() 本质与行为 option(USE_FOO \u0026#34;Enable FOO support\u0026#34; OFF) 含义：该命令定义一个缓存变量 USE_FOO，并设置其默认值为 OFF。如果同名缓存变量已存在，则不会改写；如果用户通过命令行 -DUSE_FOO=ON 或在 cmake-gui 中修改，则以用户设置为准。初次执行时，USE_FOO 的值必然为 OFF 并保存在 CMakeCache.txt 中 (cmake.org, stackoverflow.com)。\n作用域：\n缓存作用域：无论在项目哪个目录执行，均会向缓存写入 USE_FOO:BOOL=OFF。\n目录作用域：调用 option() 并不会将 USE_FOO 绑定为普通目录变量，而是写入缓存；因此在同一项目的其他目录仅能通过 ${USE_FOO} 或 if(USE_FOO) 读取其值。\n5.2 条件判断的三种情况 if(USE_FOO)\n语义：判断缓存变量 USE_FOO 的布尔值。当 USE_FOO 为 ON、1、YES、TRUE 等“真”时条件成立；若为 OFF、0、FALSE、空、NOTFOUND 或未定义，都视为“假”(cmake.org, stackoverflow.com)。\n示例：\nif(USE_FOO) message(STATUS \u0026#34;FOO 支持已启用\u0026#34;) else() message(STATUS \u0026#34;FOO 支持未启用\u0026#34;) endif() 由于 option() 默认将 USE_FOO 设为 OFF，执行初次配置时，if(USE_FOO) 判断为假，会输出“FOO 支持未启用”。\nif(DEFINED USE_FOO)\n语义：仅判断变量名 USE_FOO 是否在当前目录作用域或缓存中存在条目，与其具体值无关。由于 option() 已经在缓存中创建了对应条目，无论值为 ON 还是 OFF，DEFINED USE_FOO 都返回真；仅当从未调用 option(USE_FOO …) 或手动移除缓存条目时，该判断才为假(cmake.org, manpages.ubuntu.com)。\n示例：\nif(DEFINED USE_FOO) message(STATUS \u0026#34;USE_FOO 已在缓存或目录中定义，当前值 = ${USE_FOO}\u0026#34;) else() message(STATUS \u0026#34;USE_FOO 未定义，需要先调用 option()\u0026#34;) endif() 首次执行会输出“USE_FOO 已在缓存或目录中定义，当前值 = OFF”；若用户执行 cmake --fresh 删除缓存并未再次调用 option()，则输出“USE_FOO 未定义”。\nif(NOT DEFINED USE_FOO)\n语义：与上述相反，仅在 USE_FOO 既不在缓存，也不在当前目录作用域时为真。由于 option() 已将其写入缓存，故此判断通常为假，除非缓存被删除且尚未到达 option() 那行代码(manpages.ubuntu.com, cmake.org)。\n示例用法：\nif(NOT DEFINED USE_FOO) option(USE_FOO \u0026#34;Enable FOO support\u0026#34; OFF) endif() 保证了无论在何处首次调用该片段，都只会有一次“写入缓存”操作，避免在多个子模块重复定义而产生冲突。\n5.3 综合示例：option() 在多目录中的应用 project_root/ ├── CMakeLists.txt └── libfoo/ └── CMakeLists.txt project_root/CMakeLists.txt\ncmake_minimum_required(VERSION 3.15) project(MyProject) # 若尚未定义 USE_FOO，则初始化 if(NOT DEFINED USE_FOO) option(USE_FOO \u0026#34;Enable FOO support\u0026#34; OFF) endif() if(DEFINED USE_FOO) message(STATUS \u0026#34;根目录：USE_FOO 已定义，当前值 = ${USE_FOO}\u0026#34;) endif() if(USE_FOO) message(STATUS \u0026#34;根目录：FOO 支持已启用\u0026#34;) else() message(STATUS \u0026#34;根目录：FOO 支持未启用\u0026#34;) endif() add_subdirectory(libfoo) libfoo/CMakeLists.txt\nif(DEFINED USE_FOO) message(STATUS \u0026#34;libfoo：检测到 USE_FOO，当前值 = ${USE_FOO}\u0026#34;) endif() if(USE_FOO) add_library(foo STATIC foo.cpp) message(STATUS \u0026#34;libfoo：已构建 foo 库\u0026#34;) else() message(STATUS \u0026#34;libfoo：跳过 foo 库构建\u0026#34;) endif() 执行流程示例\n第一次配置，命令行未指定 -DUSE_FOO\n根目录：NOT DEFINED USE_FOO 为真 → 执行 option(USE_FOO ... OFF) → 写入缓存；随后 DEFINED USE_FOO 与 if(USE_FOO) 分别输出 “已定义，OFF” 与 “未启用”。\n进入 libfoo：DEFINED USE_FOO 為真 → 输出 “检测到 USE_FOO = OFF”；if(USE_FOO) 為假 → “跳过 foo 库构建”。\n第一次配置，命令行显式指定 -DUSE_FOO=ON\n缓存已由命令行初始化，根目录 NOT DEFINED USE_FOO 为假 → 跳过 option()；if(USE_FOO) 为真 → 输出“FOO 支持已启用”。\nlibfoo 同样检测到 USE_FOO=ON → 输出“检测到 USE_FOO = ON”，并构建 foo 库。\n再次配置（保留缓存），不修改 USE_FOO 值\n缓存已存在 → NOT DEFINED USE_FOO 为假 → 不再执行 option()，if(USE_FOO) 行为与上次保持一致。 通过上述示例可见，option() 作为缓存变量定义的方式，结合 if(USE_FOO)、if(DEFINED USE_FOO) 与 if(NOT DEFINED USE_FOO) 的判断，能够清晰地区分“是否已定义该选项”与“选项值为真/假”两种语义，避免冲突并支持多目录模块化管理(cmake.org, stackoverflow.com)。\n6. 结论 本文首先从 CMake 条件编译机制出发，详细分析了 if() 条件判断与生成器表达式的不同求值阶段及适用场景。随后，通过多个跨平台、多配置、可选依赖等工程实践示例，阐述了如何灵活运用条件编译实现功能模块化与构建可定制化。针对 CMake 的动态作用域模型，重点剖析了函数作用域、目录作用域与缓存作用域的查询逻辑，提醒开发者在 if() 语句块中定义变量时，要警惕持久化绑定对后续逻辑的影响。最后，以 option(USE_FOO \u0026quot;Enable FOO support\u0026quot; OFF) 为典型实例，演示其作为缓存变量的行为，并结合 if(USE_FOO)、if(DEFINED USE_FOO)、if(NOT DEFINED USE_FOO) 三种判断方式，帮助读者正确设计条件分支与选项管理。唯有深入理解 CMake 条件编译原理与变量作用域特性，方能构建出可维护性高、扩展性强的现代化 C/C++ 构建系统。\n参考文献 CMake 官方文档：option() 命令说明, CMake 4.0.2 文档，检索于 2025 年 6 月，详见 (cmake.org)。\nTsyvarev, “Why CMake option command should be ON or OFF?”, Stack Overflow, Jul 16, 2021，详见 (stackoverflow.com)。\nCMake 官方文档：if() 命令说明, CMake 3.18.6 文档，检索于 2025 年 6 月，详见 (cmake.org, cmake.org)。\nCMake 官方文档：语言手册—变量作用域章节, CMake 4.0.0-rc4 文档，检索于 2025 年 6 月，详见 (cmake.org, stuff.mit.edu)。\nCMake 官方文档：缓存变量逻辑, CMake 3.0.2 文档，检索于 2025 年 6 月，详见 (cmake.org, manpages.debian.org)。\nCMake 官方文档：生成器表达式说明, CMake 3.24.4 文档，检索于 2025 年 6 月，详见 (cmake.org, cmake.org)。\nMucha, Jeremi, “CMake Generator-Expressions”, Mar 1, 2021，详见 (jeremimucha.com, github.com)。\n","date":"3 June, 2025","id":8,"permalink":"/posts/cmake%E6%9D%A1%E4%BB%B6%E7%BC%96%E8%AF%91%E5%8E%9F%E7%90%86%E5%B7%A5%E7%A8%8B%E5%AE%9E%E8%B7%B5%E4%B8%8E%E5%8F%98%E9%87%8F%E4%BD%9C%E7%94%A8%E5%9F%9F%E7%AE%A1%E7%90%86/","summary":"CMake；条件编译；if；生成器表达式；变量作用域；缓存变量；目录作用域；函数作用域；option()","tags":"cmake","title":"CMake条件编译：原理、工程实践与变量作用域管理"},{"content":"可变长度数组（VLA）在C语言中的演进、争议与现代替代方案 ​摘要​：本文系统分析了C99标准引入的可变长度数组（Variable-Length Array, VLA）特性，从其技术原理、标准演进、性能特征和安全风险等维度展开深度探讨。结合ISO/IEC标准文档与核心编译器实现，本文揭示了VLA在栈内存动态分配机制上的根本局限，并通过实证分析验证了其在安全关键系统中的重大隐患。研究指出，现代C语言开发中应优先选择柔性数组成员（Flexible Array Member）和动态内存分配等替代方案，并给出了在限制性环境中处理动态数组的技术建议。\n​关键词​：可变长度数组；C语言；栈溢出；内存安全；C99；C11；Flexible Array Member\n1. 引言 [[可变长度数组]]（Variable-Length Array, [[VLA]]）是 C99 标准（ISO/IEC 9899:1999）引入的革新特性，允许数组维度在运行时确定。其语法形式简洁：\nvoid process(size_t n) { int arr[n]; // VLA：长度为运行时变量n // ... 数组操作 } 该特性旨在提供优于alloca()的标准化栈上动态内存分配方案[1]。然而，其实际应用引发了持续的技术争议。本文从工程实践角度分析VLA的设计哲学、实现机制及现实困境。\n2. VLA的技术实现与内存模型 2.1 栈内存动态分配原理 VLA的存储空间通过栈指针动态调整实现：\n; x86-64 GCC 编译伪代码 (n = rdi) process: sub rsp, rdi ; 直接扩展栈空间为n字节 mov rax, rsp ; rax指向数组首地址 ... ; 数组操作 add rsp, rdi ; 栈指针恢复 ret 相较于静态数组，VLA消除了编译期尺寸固定的约束，但代价是：\n​栈空间不确定性​：引发栈溢出风险（Stack Overflow） ​无错误恢复机制​：分配失败时触发未定义行为（UB）[2] ​释放不可控​：仅在作用域结束时释放，无法手动管理 2.2 编译器兼容性现状 ​完整支持​：[[GCC]], [[Clang]] (默认启用) ​可选支持​：C11起需__STDC_NO_VLA__未定义[3] ​明确禁用​：[[MSVC]]始终拒绝支持（VS2019文档明确标注”不支持C99 VLA”）[4] 3. 安全风险与性能缺陷的实证分析 3.1 栈溢出漏洞测试 #include \u0026lt;stdio.h\u0026gt; void vuln(size_t n) { int vla[n]; printf(\u0026#34;VLA at %p\\n\u0026#34;, (void*)vla); } int main() { vuln(1024 * 1024 * 64); // 申请64MB栈空间 return 0; } ​执行结果​：\n$ ulimit -s 8192 # 栈上限8MB $ ./vla_test Segmentation fault (core dumped) 实证表明，Linux 默认 8MB 栈空间下分配64MB VLA直接导致段错误，且无错误处理接口。\n3.2 性能劣化测试 (对比malloc) 操作 VLA (10000次平均) malloc/free (10000次平均) 10KB数组分配+释放 0.8μs 2.3μs 1MB数组分配+释放 75.4μs 15.2μs 测试显示：​小尺寸下VLA因免于堆管理而略快，但超过特定阈值（通常≈100KB）后性能急剧劣化。主因是操作系统扩展栈页的缺页中断（Page Fault）开销呈非线性增长。 3.3 安全缺陷分类（CWE映射） ​CWE-119​：缓冲区边界操作失效（缺少溢出保护） ​CWE-456​：未捕获的未定义行为（未处理分配失败） ​CWE-789​：不匹配的内存释放（仅依赖作用域退出） 4. 工程实践建议与替代方案 4.1 工业界政策参考 ​Linux内核开发规范​：明确禁用VLA（-Wvla警告视为错误）[5] ​MISRA C:2012​：规则18.7禁用VLA（安全关键系统强制要求）[6] ​Google C++ Style Guide​：扩展至C代码禁止使用 4.2 推荐替代技术方案 [[柔性数组成员]]（Flexible Array Member, [[FAM]]）​​ struct dyn_array { size_t len; int data[]; // C99柔性成员 }; struct dyn_array *arr = malloc(sizeof *arr + n * sizeof(int)); arr-\u0026gt;len = n; ​优势​：堆分配可预测、支持错误处理、内存连续\n​指针+独立分配​ int *arr = malloc(n * sizeof(int)); if (!arr) { /* 错误处理 */ } 定长数组+动态截断​ #define MAX_DIM 1024 void process(size_t n) { int arr[MAX_DIM]; assert(n \u0026lt;= MAX_DIM); // 强制约束 // ... } 5. 标准演进与技术趋势 ​C11 (ISO/IEC 9899:2011)​​：VLA降级为可选特性（条件特性）[3] ​C23 (ISO/IEC 9899:2023)​​：进一步弱化支持，保留__STDC_VERSION_VLA__宏作兼容标识[7] ​现代编译器扩展​：Clang提供-Wvla静态检查，GCC支持-Wvla-larger-than=1024尺寸约束 6. 结论 可变长度数组作为C99革新性尝试，因其在栈动态分配机制上的固有缺陷，已逐渐被现代C语言工程实践淘汰。在安全关键系统、高性能计算及大型代码库中，VLA引发的栈溢出风险和未定义行为构成重大工程隐患。建议开发者优先选择柔性数组成员（FAM）和显式动态内存分配，并在编译器层面启用-Wvla等保护措施。随着C标准的发展，VLA正逐步从核心特性退化为历史兼容选项。\n参考文献 [1] ISO/IEC 9899:1999. Programming languages — C. §6.7.5.2\n[2] CERT C Coding Standard. ARR32-C. Ensure size arguments for variable length arrays are in a valid range\n[3] ISO/IEC 9899:2011. Programming languages — C. §6.10.8.3\n[4] Microsoft Docs. C Variable Length Arrays. 2023\n[5] Linux Kernel Coding Style. Chapter 15: The diagnostic warner\n[6] MISRA C:2012. Guidelines for the use of the C language in critical systems. Rule 18.7\n[7] ISO/IEC 9899:2023 Committee Draft. Programming languages — C. §6.10.9.3\n","date":"3 June, 2025","id":9,"permalink":"/posts/%E5%8F%AF%E5%8F%98%E9%95%BF%E5%BA%A6%E6%95%B0%E7%BB%84vla%E5%9C%A8c%E8%AF%AD%E8%A8%80%E4%B8%AD%E7%9A%84%E6%BC%94%E8%BF%9B%E4%BA%89%E8%AE%AE%E4%B8%8E%E7%8E%B0%E4%BB%A3%E6%9B%BF%E4%BB%A3%E6%96%B9%E6%A1%88/","summary":"​摘要​：本文系统分析了C99标准引入的可变长度数组（Variable-Length Array, VLA）特性，从其技术原理、标准演进、性能特征和安全风险等维度展开深度探讨。结合ISO/IEC标准文档与核心编译器实现，本文揭示了VLA在栈内存动态分配机制上的根本局限，并通过实证分析验证了其在安全关键系统中的重大隐患。研究指出，现代C语言开发中应优先选择柔性数组成员（Flexible Array Member）和动态内存分配等替代方案，并给出了在限制性环境中处理动态数组的技术建议。","tags":"数组 堆栈 内存 VLA 可变长数组","title":"可变长度数组（VLA）在C语言中的演进、争议与现代替代方案"},{"content":"Ubuntu git 仓库搭建及代码上传 git 仓库服务器搭建 1.安装 git 首先在服务器上安装 git\nsudo apt-get install git 2.创建 git 账户 接下来得创建一个专门用来进行 git 仓库版本控制的 Linux 用户，为了方便，这里建议切换到 root 用户 （下面的所有操作都是在 root 账户下完成）：\nsudo -i adduser git 接下来会要求输入密码等信息，直接按照提示输入即可。\n3. 建立秘钥授权配置文件 为了保证仓库的安全性，必须得要求登录仓库时使用密钥登录。首先执行下面的命令创建密钥的存放路径：\ncd /home/git/ mkdir .ssh chmod 755 .ssh touch .ssh/authorized_keys chmod 644 .ssh/authorized_keys 接下来收集所有需要登录的用户的公钥，就是他们自己的 id_rsa.pub 文件，把所有公钥导入到 /home/git/.ssh/authorized_keys 文件里，一行一个。\n4.禁用 git 用户 shell 登录 出于安全考虑，创建的 git 用户是不允许登录 shell 的\nvi /etc/passwd 找到 passwd 文件中的：\ngit:x:1003:1004:,,,:/home/git:/bin/bash 将其修改为：\ngit:x:1003:1004:,,,:/home/git:/usr/bin/git-shell 这样，git 用户可以正常通过 ssh 使用 git ，但无法登录 shell，因为我们为 git 用户指定的 git-shell 每次一登录就自动退出。\n服务器新建仓库 首先创建一个空的文件夹来作为 git 仓库的目录，这里选择在 /home 目录下创建，文件夹名根据实际项目来起，这里使用 gitproject：\ncd /home mkdir gitproject 为 gitproject 指定用户和用户组：\nchown git:git gitproject 之后进入该文件夹下创建一个新的裸仓库：\ncd gitproject git init --bare gitproject.git –bare 是指定创建一个裸仓库，裸仓库表示在服务器不存储代码，只存储版本更改信息，因此在服务器看不到对应的项目代码，而且这里必须创建一个裸仓库，否则 push 项目到服务器的时候会报错\n新建了一个裸仓库之后还得将其对应的用户和用户组更改为 git：\nchown -R git:git gitproject.git 开发者本地 git 配置 1.安装 git 应用 这里直接到 git 官网下载对应操作系统版本的软件安装就好：\n下载 git OSX 版 下载 git Windows 版 下载 git Linux 版 2.git 账户配置 首先设置 git 的 user name 和 email：\ngit config --global user.name \u0026#34;username\u0026#34; git config --global user.email \u0026#34;email@qq.com\u0026#34; 接下来生成对应的密钥：\nssh-keygen -t rsa -C \u0026#34;email@qq.com\u0026#34; 3.密钥使用 创建好密钥之后可以将公钥保存到 git 服务器的 authorized_keys （/home/git/.ssh/authorized_keys）中使其可以访问 git 服务器，或者填写到 github 上，来向 github 上传项目。\n密钥的位置：\nLinux/Mac：～/.ssh/id_rsa.pub windows：C:/User/Administrator/.ssh/id_rsa.pub（在安装git时指定） 开发者本地克隆仓库 接下来就可以在客户端克隆服务器的项目了\ngit clone git:server-ip:/home/gitproject/gitproject.git 此时会提示克隆了一个空的项目\n接下来就可以在客户端写入一些文件 commit 到 git 服务器上去了。\n这里有关的 git 操作推荐去看：git - 简明指南\n本地仓库代码提交 有两种方式：\n先将服务器建立的空仓库 clone 到本地，然后添加并提交本地文件 本地先建立代码仓库，然后关联本地仓库和服务器建立的仓库，然后提交文件 添加文件，并提交到本地都一样：\n准备好需要提交的文件，为了将空目录添加到 git 仓库，需要在空目录下创建 .gitkeep 文件, 忽略 .git 目录\nfind . -type d -empty -not -path \u0026#39;./.git*\u0026#39; -exec sh -c \u0026#39;test -z \u0026#34;$(git ls-files \u0026#34;{}\u0026#34;)\u0026#34; \u0026amp;\u0026amp; touch \u0026#34;{}/.gitkeep\u0026#34;\u0026#39; \\; -print 在源码跟目录下添加所有文件并提交\ngit add .; git commit -m \u0026#34;init commit\u0026#34; 关联本地仓库和远程仓库\ncd /path/to/your/local/repository git remote add origin git@192.168.2.2:/path/to/my_project.git 将本地代码推送到服务器\ngit push -u origin master ","date":"15 May, 2025","id":10,"permalink":"/posts/ubuntu_git_server_build_push_code/","summary":"首先在服务器上安装 git","tags":"ubuntu git","title":"Ubuntu git 仓库搭建及代码上传"},{"content":"需要链接 rt 库\nLinux 定时器：精准的时间管理 在各种应用场景中，精确地在特定时间执行某些任务至关重要。无论是周期性地收集系统状态、在预定时间发送告警，还是实现复杂的任务调度，都需要可靠的定时器机制。Linux 内核提供了多种方式来处理时间，其中 POSIX 定时器提供了一种强大且灵活的解决方案。\nPOSIX 定时器简介 POSIX 定时器是符合 POSIX.1b 标准的实时扩展的一部分，它允许应用程序创建和管理多个高精度定时器。与传统的 sleep() 或 alarm() 等函数相比，POSIX 定时器提供了更精细的控制和更多的功能。\n核心概念包括：\n定时器 ID (timer_t): 每个成功创建的定时器都会返回一个唯一的标识符，类型为 timer_t。你可以使用这个 ID 来操作特定的定时器。 定时器事件: 当定时器到期时，会产生一个信号或者触发一个线程函数。 定时器属性: 可以设置定时器的触发方式（单次或周期性）、初始延迟以及时间间隔。 关键的系统调用 接下来，我们重点介绍用于创建、设置和管理 POSIX 定时器的关键系统调用。\n1. timer_create(): 创建定时器 timer_create() 系统调用用于创建一个新的 POSIX 定时器。\n#include \u0026lt;signal.h\u0026gt; #include \u0026lt;time.h\u0026gt; #include \u0026lt;stdio.h\u0026gt; #include \u0026lt;stdlib.h\u0026gt; #include \u0026lt;errno.h\u0026gt; int main() { timer_t timerid; struct sigevent sev; // 设置定时器到期时的通知方式为信号 sev.sigev_notify = SIGEV_SIGNAL; sev.sigev_signo = SIGRTMIN; // 使用一个实时信号 sev.sigev_value.sival_ptr = \u0026amp;timerid; // 传递定时器 ID if (timer_create(CLOCK_REALTIME, \u0026amp;sev, \u0026amp;timerid) == -1) { perror(\u0026#34;timer_create\u0026#34;); exit(EXIT_FAILURE); } printf(\u0026#34;定时器创建成功，ID: %ld\\n\u0026#34;, (long)timerid); // ... 后续设置和使用定时器的代码 ... return 0; } 代码解释:\n我们包含了必要的头文件 \u0026lt;signal.h\u0026gt;、\u0026lt;time.h\u0026gt;、\u0026lt;stdio.h\u0026gt; 和 \u0026lt;stdlib.h\u0026gt;。 声明了一个 timer_t 类型的变量 timerid 用于存储定时器 ID，以及一个 struct sigevent 类型的变量 sev 用于设置定时器到期时的行为。 sev.sigev_notify = SIGEV_SIGNAL; 指定当定时器到期时，通过发送信号的方式通知进程。 sev.sigev_signo = SIGRTMIN; 设置发送的信号为实时信号 SIGRTMIN。实时信号比标准信号具有更高的优先级和可靠性。 sev.sigev_value.sival_ptr = \u0026amp;timerid; 允许在信号处理函数中获取定时器 ID。 timer_create(CLOCK_REALTIME, \u0026amp;sev, \u0026amp;timerid) 调用创建定时器。 CLOCK_REALTIME 指定了使用系统实时时钟。其他时钟类型包括 CLOCK_MONOTONIC（单调递增时钟，不受系统时间调整影响）等。 \u0026amp;sev 是指向 sigevent 结构的指针，定义了定时器到期时的行为。 \u0026amp;timerid 是一个指向 timer_t 变量的指针，用于接收新创建的定时器 ID。 如果 timer_create() 返回 -1，则表示创建失败，我们使用 perror() 输出错误信息并退出。 成功创建后，我们打印了定时器的 ID。 编译和运行:\ngcc timer_create_example.c -o timer_create_example -lrt ./timer_create_example 可能的运行结果:\n定时器创建成功，ID: 0 （实际的定时器 ID 可能不同）\n2. timer_settime(): 设置定时器 timer_settime() 系统调用用于启动或停止定时器，并设置其初始延迟和间隔时间。\n#include \u0026lt;signal.h\u0026gt; #include \u0026lt;time.h\u0026gt; #include \u0026lt;stdio.h\u0026gt; #include \u0026lt;stdlib.h\u0026gt; #include \u0026lt;errno.h\u0026gt; #include \u0026lt;unistd.h\u0026gt; #define TIMER_SIG SIGRTMIN void timer_handler(int sig, siginfo_t *si, void *uc) { timer_t *tidp; tidp = (timer_t *)si-\u0026gt;si_value.sival_ptr; printf(\u0026#34;[%ld] 定时器到期，信号：%d\\n\u0026#34;, (long)*tidp, sig); } int main() { timer_t timerid; struct sigevent sev; struct itimerspec its; struct sigaction sa; // 设置信号处理函数 sa.sa_flags = SA_SIGINFO; sa.sa_sigaction = timer_handler; sigemptyset(\u0026amp;sa.sa_mask); if (sigaction(TIMER_SIG, \u0026amp;sa, NULL) == -1) { perror(\u0026#34;sigaction\u0026#34;); exit(EXIT_FAILURE); } // 创建定时器 sev.sigev_notify = SIGEV_SIGNAL; sev.sigev_signo = TIMER_SIG; sev.sigev_value.sival_ptr = \u0026amp;timerid; if (timer_create(CLOCK_REALTIME, \u0026amp;sev, \u0026amp;timerid) == -1) { perror(\u0026#34;timer_create\u0026#34;); exit(EXIT_FAILURE); } printf(\u0026#34;定时器创建成功，ID: %ld\\n\u0026#34;, (long)timerid); // 设置定时器的初始延迟和间隔 its.it_value.tv_sec = 2; // 初始延迟 2 秒 its.it_value.tv_nsec = 0; its.it_interval.tv_sec = 1; // 间隔时间 1 秒（周期性定时器） its.it_interval.tv_nsec = 0; if (timer_settime(timerid, 0, \u0026amp;its, NULL) == -1) { perror(\u0026#34;timer_settime\u0026#34;); exit(EXIT_FAILURE); } printf(\u0026#34;定时器已启动，每隔 1 秒触发一次，初始延迟 2 秒...\\n\u0026#34;); // 让程序运行一段时间 sleep(10); // 停止定时器 its.it_value.tv_sec = 0; its.it_value.tv_nsec = 0; its.it_interval.tv_sec = 0; its.it_interval.tv_nsec = 0; if (timer_settime(timerid, 0, \u0026amp;its, NULL) == -1) { perror(\u0026#34;timer_settime (停止)\u0026#34;); exit(EXIT_FAILURE); } printf(\u0026#34;定时器已停止。\\n\u0026#34;); // 删除定时器 if (timer_delete(timerid) == -1) { perror(\u0026#34;timer_delete\u0026#34;); exit(EXIT_FAILURE); } printf(\u0026#34;定时器已删除。\\n\u0026#34;); return 0; } 代码解释:\n我们定义了一个信号处理函数 timer_handler，当定时器到期并发送 TIMER_SIG 信号时，该函数会被调用。 在 main 函数中，我们首先使用 sigaction() 设置了信号 TIMER_SIG 的处理方式，将其与 timer_handler 函数关联起来。SA_SIGINFO 标志表示信号处理函数接收附加信息（通过 siginfo_t 结构）。 创建定时器的步骤与之前的示例相同。 我们声明了一个 struct itimerspec 类型的变量 its，用于设置定时器的超时值。 its.it_value 指定了定时器的初始延迟。 its.it_interval 指定了定时器的间隔时间。如果 it_interval 的两个字段都设置为 0，则定时器只触发一次。如果都大于 0，则定时器会周期性地触发。 timer_settime(timerid, 0, \u0026amp;its, NULL) 调用启动或修改定时器。 timerid 是要操作的定时器 ID。 第二个参数 flags 可以是 0 或 TIMER_ABSTIME。如果为 0，则 it_value 是相对时间；如果为 TIMER_ABSTIME，则 it_value 是绝对时间（基于定时器的时钟）。 \u0026amp;its 是指向 itimerspec 结构的指针，包含了新的定时器设置。 NULL 表示我们不关心旧的定时器设置。如果需要获取之前的设置，可以传递一个指向 itimerspec 结构的指针。 程序使用 sleep(10) 暂停 10 秒，以便观察定时器的触发。 之后，我们将 its.it_value 和 its.it_interval 都设置为 0，从而停止了定时器。 最后，我们使用 timer_delete() 系统调用删除了不再需要的定时器。 编译和运行:\ngcc timer_settime_example.c -o timer_settime_example -lrt ./timer_settime_example 可能的运行结果:\n定时器创建成功，ID: 0 定时器已启动，每隔 1 秒触发一次，初始延迟 2 秒... [0] 定时器到期，信号：34 [0] 定时器到期，信号：34 [0] 定时器到期，信号：34 [0] 定时器到期，信号：34 [0] 定时器到期，信号：34 [0] 定时器到期，信号：34 [0] 定时器到期，信号：34 [0] 定时器到期，信号：34 定时器已停止。 定时器已删除。 （实际的定时器 ID 和信号编号可能不同，34 对应 SIGRTMIN）\n3. timer_gettime(): 获取定时器状态 timer_gettime() 系统调用用于获取当前定时器的剩余时间和间隔。\n#include \u0026lt;signal.h\u0026gt; #include \u0026lt;time.h\u0026gt; #include \u0026lt;stdio.h\u0026gt; #include \u0026lt;stdlib.h\u0026gt; #include \u0026lt;errno.h\u0026gt; #include \u0026lt;unistd.h\u0026gt; int main() { timer_t timerid; struct sigevent sev; struct itimerspec its; struct itimerspec current_its; // 创建一个单次触发的定时器 sev.sigev_notify = SIGEV_NONE; // 不发送信号 if (timer_create(CLOCK_REALTIME, \u0026amp;sev, \u0026amp;timerid) == -1) { perror(\u0026#34;timer_create\u0026#34;); exit(EXIT_FAILURE); } printf(\u0026#34;定时器创建成功，ID: %ld\\n\u0026#34;, (long)timerid); // 设置定时器在 3 秒后触发一次 its.it_value.tv_sec = 3; its.it_value.tv_nsec = 0; its.it_interval.tv_sec = 0; its.it_interval.tv_nsec = 0; if (timer_settime(timerid, 0, \u0026amp;its, NULL) == -1) { perror(\u0026#34;timer_settime\u0026#34;); exit(EXIT_FAILURE); } printf(\u0026#34;定时器已设置为 3 秒后触发。\\n\u0026#34;); sleep(1); // 获取定时器的当前状态 if (timer_gettime(timerid, \u0026amp;current_its) == -1) { perror(\u0026#34;timer_gettime\u0026#34;); exit(EXIT_FAILURE); } printf(\u0026#34;当前剩余时间: %ld 秒 %ld 纳秒\\n\u0026#34;, (long)current_its.it_value.tv_sec, (long)current_its.it_value.tv_nsec); printf(\u0026#34;间隔时间: %ld 秒 %ld 纳秒\\n\u0026#34;, (long)current_its.it_interval.tv_sec, (long)current_its.it_interval.tv_nsec); // 等待定时器触发 sleep(3); // 再次获取定时器状态（应该已经触发） if (timer_gettime(timerid, \u0026amp;current_its) == -1) { perror(\u0026#34;timer_gettime\u0026#34;); exit(EXIT_FAILURE); } printf(\u0026#34;触发后剩余时间: %ld 秒 %ld 纳秒\\n\u0026#34;, (long)current_its.it_value.tv_sec, (long)current_its.it_value.tv_nsec); printf(\u0026#34;触发后间隔时间: %ld 秒 %ld 纳秒\\n\u0026#34;, (long)current_its.it_interval.tv_sec, (long)current_its.it_interval.tv_nsec); if (timer_delete(timerid) == -1) { perror(\u0026#34;timer_delete\u0026#34;); exit(EXIT_FAILURE); } printf(\u0026#34;定时器已删除。\\n\u0026#34;); return 0; } 代码解释:\n我们创建了一个单次触发的定时器，设置 sev.sigev_notify = SIGEV_NONE; 表示不发送信号，仅仅使用定时器本身的功能。 使用 timer_settime() 设置定时器在 3 秒后触发一次。 在等待 1 秒后，我们调用 timer_gettime(timerid, \u0026amp;current_its) 来获取当前定时器的状态，并将结果存储在 current_its 结构中。 我们打印了当前的剩余时间和间隔时间。对于单次触发的定时器，触发后剩余时间通常会接近 0。 程序等待 3 秒，让定时器触发。 再次调用 timer_gettime()，可以看到触发后剩余时间通常为 0。 编译和运行:\ngcc timer_gettime_example.c -o timer_gettime_example -lrt ./timer_gettime_example 可能的运行结果:\n定时器创建成功，ID: 0 定时器已设置为 3 秒后触发。 当前剩余时间: 2 秒 999999999 纳秒 间隔时间: 0 秒 0 纳秒 触发后剩余时间: 0 秒 0 纳秒 触发后间隔时间: 0 秒 0 纳秒 定时器已删除。 （实际的纳秒值可能略有不同）\n其他重要的系统调用 除了上述三个核心系统调用外，还有一个用于删除定时器的函数：\ntimer_delete(timer_t timerid): 删除由 timer_create() 创建的定时器。一旦删除，与该定时器 ID 关联的资源将被释放。 ","date":"15 May, 2025","id":11,"permalink":"/posts/linux-%E5%AE%9A%E6%97%B6%E5%99%A8%E7%B2%BE%E5%87%86%E7%9A%84%E6%97%B6%E9%97%B4%E7%AE%A1%E7%90%86/","summary":"需要链接 rt 库","tags":"timer 定时器 linux posix","title":"内核态定时器 timer"},{"content":"About Hugo is one of the most popular open-source static site generators. With its amazing speed and flexibility, Hugo makes building websites fun again.\nRusty-Typewriter is a theme for Hugo sites made by math-queiroz. It\u0026rsquo;s intended to be simple and used for blogs, being mostly inspired by the current Zen Browser\u0026rsquo;s website in style and other Hugo themes in functionality. It was initially intended for personal use but was made public for anyone who finds it worth using.\n","date":"24 March, 2025","id":12,"permalink":"/about/","summary":"Hugo is one of the most popular open-source static site generators. With its amazing speed and flexibility, Hugo makes building websites fun again.","tags":"","title":"About"},{"content":"You can change the current theme between dark and light mode by using the switcher icon at the right of the navbar.\nThe colors tweaked by the theme change are ideally defined in a non bundled CSS file (to optimize caching, since the theming is expected to change more than the rest) under the :root[color-scheme^='dark/light'] selector. Should you want to adjust them, a simple stylesheet rules override should suffice. You can read about it in customization.\n","date":"24 March, 2025","id":13,"permalink":"/features/dark-mode/","summary":"You can change the current theme between dark and light mode by using the switcher icon at the right of the navbar.","tags":"guide","title":"Dark Theme"},{"content":"Rusty Typewriter supports internationalization (i18n) files for localizing its sentences. By default it fallsback to english, but you may use the values from an existing translations file or add your own translations in the i18n/\u0026lt;lang\u0026gt;.yaml dir of your site.\n# Root theme_light: Light Theme theme_dark: Dark Theme # Footer scroll_top: Scroll to Top footer: Made with ❤️ and powered by {{ .ThemeAnchor }} theme for {{ .HugoAnchor }} # Home featured_posts: Featured Posts recent_posts: Recent Posts # SidePane for home search: Search... see_all: See all... # Page breadcrumb_home: Home # SidePane for single pages details_words: words details_read_time: minutes read side_table_of_contents: Table Of Contents side_attachments: Attachments side_related: Related Note: Didn\u0026rsquo;t find a value you\u0026rsquo;re looking for? Check the repository for the given file (which may be updated with it), or create a new feature request!\n","date":"24 March, 2025","id":14,"permalink":"/features/internationalization/","summary":"Rusty Typewriter supports internationalization (i18n) files for localizing its sentences. By default it fallsback to english, but you may use the values from an existing translations file or add your own translations in the i18n/\u0026lt;lang\u0026gt;.yaml dir of your site.","tags":"","title":"Internationalization"},{"content":"This page focuses on what you can do in terms of markdown syntax. Here you can see which and how each of the components are rendered to HTML in terms of structure and styling.\nThe use of Headings Headings are larger text intended for section titles, and they vary in size from 1 to 5 (bigger to smaller) as follows:\nHeading 1 Heading 2 Heading 3 Heading 4 Heading 5 Paragraphs Paragraphs are containers for standard page content. Its font is defined and configurable via CSS as mentioned in customization post.\nLists Ordered First item Second item\n2.1. First nested item Third item Unordered Unordered Item Another Item Yet another Tables Id Keys Data 1 Key 1 Value 1 2 Key 2 Value 2 3 Key 3 Value 3 Code Inline Code Inline code looks like this: inline-code-example. Defined by enclosing text in backticks (`), it\u0026rsquo;s enclosed in a different color and with monospaced font.\nCode Block Code blocks support syntax highlighting for plenty of languages.\nyaml: syntax: highlighted: so: cool! Media Media like images may be inserted using the syntax ![alt](/images/file.png)\nBlockquotes Blockquotes, with support for markdown syntax like bold text, strike through, links and others.\n— Here, Some name\n","date":"24 March, 2025","id":15,"permalink":"/posts/showcase/","summary":"This page focuses on what you can do in terms of markdown syntax. Here you can see which and how each of the components are rendered to HTML in terms of structure and styling.","tags":"example","title":"Showcase"},{"content":"Some of the static content on the site, like the home greetings and side pane content, can be defined in the file at data/rtwt/content.yaml. The structure to do so is as follows:\nNote: It\u0026rsquo;s possible to use file formats other than YAML, but the key structure must remain the same!\nhome: image: \u0026#39;images/greetings.jpg\u0026#39; greetings: \u0026#39;A Hugo Theme for Bloggers!\u0026#39; text: \u0026#39;The definitive, configurable, customizable, old fashioned rusty coloured theme for web writers and readers.\u0026#39; side: home: - content: \u0026#39;Oh, and did I mention it has support for static side pane content? Cool, right?\u0026#39; - title: \u0026#39;Media Support\u0026#39; content: \u0026#39;Side content can have images!\u0026#39; imagePath: \u0026#39;images/hugo.svg\u0026#39; imageHref: \u0026#39;https://gohugo.io\u0026#39; imageWidth: \u0026#39;100%\u0026#39; Didn\u0026rsquo;t find a value you\u0026rsquo;re looking for? Check the repository for the given file (which may be updated with it), or create a new feature request!\n","date":"24 March, 2025","id":16,"permalink":"/features/static-content/","summary":"Some of the static content on the site, like the home greetings and side pane content, can be defined in the file at data/rtwt/content.yaml. The structure to do so is as follows:","tags":"","title":"Static Content"},{"content":"The main taxonomy in the theme is tags, as it is the one listed under the title in every \u0026ldquo;single\u0026rdquo; page, but it\u0026rsquo;s also possible to set any number of arbitrary taxonomies which will be listed in the side pane details section.\nFor example, in this site there\u0026rsquo;s the taxonomies topic and series as defined in the config file.\n[taxonomies] tag = \u0026#39;tags\u0026#39; topic = \u0026#39;topics\u0026#39; series = \u0026#39;series\u0026#39; ","date":"24 March, 2025","id":17,"permalink":"/features/taxonomies-support/","summary":"The main taxonomy in the theme is tags, as it is the one listed under the title in every \u0026ldquo;single\u0026rdquo; page, but it\u0026rsquo;s also possible to set any number of arbitrary taxonomies which will be listed in the side pane details section.","tags":"","title":"Taxonomies Support"},{"content":"重点学习 errnum 转 str 的实现方法\n妙 妙 妙 perror stdio-common/perror.c\nperror (const char *s) static void perror_internal (FILE *fp, const char *s, int errnum) __strerror_r string/_strerror.c\n/* Return a string describing the errno code in ERRNUM. */ char * __strerror_r (int errnum, char *buf, size_t buflen) { char *err = (char *) __get_errlist (errnum); if (__glibc_unlikely (err == NULL)) { __snprintf (buf, buflen, \u0026#34;%s%d\u0026#34;, _(\u0026#34;Unknown error \u0026#34;), errnum); return buf; } return _(err); } __get_errlist stdio-common/errlist.c\nconst char * __get_errlist (int errnum) { int mapped = ERR_MAP (errnum); if (mapped \u0026gt;= 0 \u0026amp;\u0026amp; mapped \u0026lt; _sys_errlist_internal_len) return _sys_errlist_internal[mapped]; return NULL; } _sys_errlist_internal stdio-common/errlist-data-gen.c\nconst char *const _sys_errlist_internal[] = { #define _S(n, str) [ERR_MAP(n)] = str, #include \u0026lt;errlist.h\u0026gt; #undef _S }; const size_t _sys_errlist_internal_len = array_length (_sys_errlist_internal); _S sysdeps/gnu/errlist.h\n_S(0, N_(\u0026#34;Success\u0026#34;)) #ifdef EPERM /* TRANS Only the owner of the file (or other resource) TRANS or processes with special privileges can perform the operation. */ _S(EPERM, N_(\u0026#34;Operation not permitted\u0026#34;)) #endif #ifdef ENOENT /* TRANS This is a ``file doesn\u0026#39;t exist\u0026#39;\u0026#39; error TRANS for ordinary files that are referenced in contexts where they are TRANS expected to already exist. */ _S(ENOENT, N_(\u0026#34;No such file or directory\u0026#34;)) #endif #ifdef ESRCH /* TRANS No process matches the specified process ID. */ _S(ESRCH, N_(\u0026#34;No such process\u0026#34;)) #endif #ifdef EINTR /* TRANS An asynchronous signal occurred and prevented TRANS completion of the call. When this happens, you should try the call TRANS again. TRANS TRANS You can choose to have functions resume after a signal that is handled, TRANS rather than failing with @code{EINTR}; see @ref{Interrupted TRANS Primitives}. */ _S(EINTR, N_(\u0026#34;Interrupted system call\u0026#34;)) #endif #ifdef EIO /* TRANS Usually used for physical read or write errors. */ _S(EIO, N_(\u0026#34;Input/output error\u0026#34;)) #endif #ifdef ENXIO /* TRANS The system tried to use the device TRANS represented by a file you specified, and it couldn\u0026#39;t find the device. TRANS This can mean that the device file was installed incorrectly, or that TRANS the physical device is missing or not correctly attached to the TRANS computer. */ _S(ENXIO, N_(\u0026#34;No such device or address\u0026#34;)) #endif #ifdef E2BIG /* TRANS Used when the arguments passed to a new program TRANS being executed with one of the @code{exec} functions (@pxref{Executing a TRANS File}) occupy too much memory space. This condition never arises on TRANS @gnuhurdsystems{}. */ _S(E2BIG, N_(\u0026#34;Argument list too long\u0026#34;)) #endif #ifdef ENOEXEC /* TRANS Invalid executable file format. This condition is detected by the TRANS @code{exec} functions; see @ref{Executing a File}. */ _S(ENOEXEC, N_(\u0026#34;Exec format error\u0026#34;)) #endif #ifdef EBADF /* TRANS For example, I/O on a descriptor that has been TRANS closed or reading from a descriptor open only for writing (or vice TRANS versa). */ _S(EBADF, N_(\u0026#34;Bad file descriptor\u0026#34;)) #endif #ifdef ECHILD /* TRANS This error happens on operations that are TRANS supposed to manipulate child processes, when there aren\u0026#39;t any processes TRANS to manipulate. */ _S(ECHILD, N_(\u0026#34;No child processes\u0026#34;)) #endif #ifdef EDEADLK /* TRANS Allocating a system resource would have resulted in a TRANS deadlock situation. The system does not guarantee that it will notice TRANS all such situations. This error means you got lucky and the system TRANS noticed; it might just hang. @xref{File Locks}, for an example. */ _S(EDEADLK, N_(\u0026#34;Resource deadlock avoided\u0026#34;)) #endif #ifdef ENOMEM /* TRANS The system cannot allocate more virtual memory TRANS because its capacity is full. */ _S(ENOMEM, N_(\u0026#34;Cannot allocate memory\u0026#34;)) #endif #ifdef EACCES /* TRANS The file permissions do not allow the attempted operation. */ _S(EACCES, N_(\u0026#34;Permission denied\u0026#34;)) #endif #ifdef EFAULT /* TRANS An invalid pointer was detected. TRANS On @gnuhurdsystems{}, this error never happens; you get a signal instead. */ _S(EFAULT, N_(\u0026#34;Bad address\u0026#34;)) #endif #ifdef ENOTBLK /* TRANS A file that isn\u0026#39;t a block special file was given in a situation that TRANS requires one. For example, trying to mount an ordinary file as a file TRANS system in Unix gives this error. */ _S(ENOTBLK, N_(\u0026#34;Block device required\u0026#34;)) #endif #ifdef EBUSY /* TRANS A system resource that can\u0026#39;t be shared is already in use. TRANS For example, if you try to delete a file that is the root of a currently TRANS mounted filesystem, you get this error. */ _S(EBUSY, N_(\u0026#34;Device or resource busy\u0026#34;)) #endif #ifdef EEXIST /* TRANS An existing file was specified in a context where it only TRANS makes sense to specify a new file. */ _S(EEXIST, N_(\u0026#34;File exists\u0026#34;)) #endif #ifdef EXDEV /* TRANS An attempt to make an improper link across file systems was detected. TRANS This happens not only when you use @code{link} (@pxref{Hard Links}) but TRANS also when you rename a file with @code{rename} (@pxref{Renaming Files}). */ _S(EXDEV, N_(\u0026#34;Invalid cross-device link\u0026#34;)) #endif #ifdef ENODEV /* TRANS The wrong type of device was given to a function that expects a TRANS particular sort of device. */ _S(ENODEV, N_(\u0026#34;No such device\u0026#34;)) #endif #ifdef ENOTDIR /* TRANS A file that isn\u0026#39;t a directory was specified when a directory is required. */ _S(ENOTDIR, N_(\u0026#34;Not a directory\u0026#34;)) #endif #ifdef EISDIR /* TRANS You cannot open a directory for writing, TRANS or create or remove hard links to it. */ _S(EISDIR, N_(\u0026#34;Is a directory\u0026#34;)) #endif #ifdef EINVAL /* TRANS This is used to indicate various kinds of problems TRANS with passing the wrong argument to a library function. */ _S(EINVAL, N_(\u0026#34;Invalid argument\u0026#34;)) #endif #ifdef EMFILE /* TRANS The current process has too many files open and can\u0026#39;t open any more. TRANS Duplicate descriptors do count toward this limit. TRANS TRANS In BSD and GNU, the number of open files is controlled by a resource TRANS limit that can usually be increased. If you get this error, you might TRANS want to increase the @code{RLIMIT_NOFILE} limit or make it unlimited; TRANS @pxref{Limits on Resources}. */ _S(EMFILE, N_(\u0026#34;Too many open files\u0026#34;)) #endif #ifdef ENFILE /* TRANS There are too many distinct file openings in the entire system. Note TRANS that any number of linked channels count as just one file opening; see TRANS @ref{Linked Channels}. This error never occurs on @gnuhurdsystems{}. */ _S(ENFILE, N_(\u0026#34;Too many open files in system\u0026#34;)) #endif #ifdef ENOTTY /* TRANS Inappropriate I/O control operation, such as trying to set terminal TRANS modes on an ordinary file. */ _S(ENOTTY, N_(\u0026#34;Inappropriate ioctl for device\u0026#34;)) #endif #ifdef ETXTBSY /* TRANS An attempt to execute a file that is currently open for writing, or TRANS write to a file that is currently being executed. Often using a TRANS debugger to run a program is considered having it open for writing and TRANS will cause this error. (The name stands for ``text file busy\u0026#39;\u0026#39;.) This TRANS is not an error on @gnuhurdsystems{}; the text is copied as necessary. */ _S(ETXTBSY, N_(\u0026#34;Text file busy\u0026#34;)) #endif #ifdef EFBIG /* TRANS The size of a file would be larger than allowed by the system. */ _S(EFBIG, N_(\u0026#34;File too large\u0026#34;)) #endif #ifdef ENOSPC /* TRANS Write operation on a file failed because the TRANS disk is full. */ _S(ENOSPC, N_(\u0026#34;No space left on device\u0026#34;)) #endif #ifdef ESPIPE /* TRANS Invalid seek operation (such as on a pipe). */ _S(ESPIPE, N_(\u0026#34;Illegal seek\u0026#34;)) #endif #ifdef EROFS /* TRANS An attempt was made to modify something on a read-only file system. */ _S(EROFS, N_(\u0026#34;Read-only file system\u0026#34;)) #endif #ifdef EMLINK /* TRANS The link count of a single file would become too large. TRANS @code{rename} can cause this error if the file being renamed already has TRANS as many links as it can take (@pxref{Renaming Files}). */ _S(EMLINK, N_(\u0026#34;Too many links\u0026#34;)) #endif #ifdef EPIPE /* TRANS There is no process reading from the other end of a pipe. TRANS Every library function that returns this error code also generates a TRANS @code{SIGPIPE} signal; this signal terminates the program if not handled TRANS or blocked. Thus, your program will never actually see @code{EPIPE} TRANS unless it has handled or blocked @code{SIGPIPE}. */ _S(EPIPE, N_(\u0026#34;Broken pipe\u0026#34;)) #endif #ifdef EDOM /* TRANS Used by mathematical functions when an argument value does TRANS not fall into the domain over which the function is defined. */ _S(EDOM, N_(\u0026#34;Numerical argument out of domain\u0026#34;)) #endif #ifdef ERANGE /* TRANS Used by mathematical functions when the result value is TRANS not representable because of overflow or underflow. */ _S(ERANGE, N_(\u0026#34;Numerical result out of range\u0026#34;)) #endif #ifdef EAGAIN /* TRANS The call might work if you try again TRANS later. The macro @code{EWOULDBLOCK} is another name for @code{EAGAIN}; TRANS they are always the same in @theglibc{}. TRANS TRANS This error can happen in a few different situations: TRANS TRANS @itemize @bullet TRANS @item TRANS An operation that would block was attempted on an object that has TRANS non-blocking mode selected. Trying the same operation again will block TRANS until some external condition makes it possible to read, write, or TRANS connect (whatever the operation). You can use @code{select} to find out TRANS when the operation will be possible; @pxref{Waiting for I/O}. TRANS TRANS @strong{Portability Note:} In many older Unix systems, this condition TRANS was indicated by @code{EWOULDBLOCK}, which was a distinct error code TRANS different from @code{EAGAIN}. To make your program portable, you should TRANS check for both codes and treat them the same. TRANS TRANS @item TRANS A temporary resource shortage made an operation impossible. @code{fork} TRANS can return this error. It indicates that the shortage is expected to TRANS pass, so your program can try the call again later and it may succeed. TRANS It is probably a good idea to delay for a few seconds before trying it TRANS again, to allow time for other processes to release scarce resources. TRANS Such shortages are usually fairly serious and affect the whole system, TRANS so usually an interactive program should report the error to the user TRANS and return to its command loop. TRANS @end itemize */ _S(EAGAIN, N_(\u0026#34;Resource temporarily unavailable\u0026#34;)) #endif #ifdef EINPROGRESS /* TRANS An operation that cannot complete immediately was initiated on an object TRANS that has non-blocking mode selected. Some functions that must always TRANS block (such as @code{connect}; @pxref{Connecting}) never return TRANS @code{EAGAIN}. Instead, they return @code{EINPROGRESS} to indicate that TRANS the operation has begun and will take some time. Attempts to manipulate TRANS the object before the call completes return @code{EALREADY}. You can TRANS use the @code{select} function to find out when the pending operation TRANS has completed; @pxref{Waiting for I/O}. */ _S(EINPROGRESS, N_(\u0026#34;Operation now in progress\u0026#34;)) #endif #ifdef EALREADY /* TRANS An operation is already in progress on an object that has non-blocking TRANS mode selected. */ _S(EALREADY, N_(\u0026#34;Operation already in progress\u0026#34;)) #endif #ifdef ENOTSOCK /* TRANS A file that isn\u0026#39;t a socket was specified when a socket is required. */ _S(ENOTSOCK, N_(\u0026#34;Socket operation on non-socket\u0026#34;)) #endif #ifdef EMSGSIZE /* TRANS The size of a message sent on a socket was larger than the supported TRANS maximum size. */ _S(EMSGSIZE, N_(\u0026#34;Message too long\u0026#34;)) #endif #ifdef EPROTOTYPE /* TRANS The socket type does not support the requested communications protocol. */ _S(EPROTOTYPE, N_(\u0026#34;Protocol wrong type for socket\u0026#34;)) #endif #ifdef ENOPROTOOPT /* TRANS You specified a socket option that doesn\u0026#39;t make sense for the TRANS particular protocol being used by the socket. @xref{Socket Options}. */ _S(ENOPROTOOPT, N_(\u0026#34;Protocol not available\u0026#34;)) #endif #ifdef EPROTONOSUPPORT /* TRANS The socket domain does not support the requested communications protocol TRANS (perhaps because the requested protocol is completely invalid). TRANS @xref{Creating a Socket}. */ _S(EPROTONOSUPPORT, N_(\u0026#34;Protocol not supported\u0026#34;)) #endif #ifdef ESOCKTNOSUPPORT /* TRANS The socket type is not supported. */ _S(ESOCKTNOSUPPORT, N_(\u0026#34;Socket type not supported\u0026#34;)) #endif #ifdef EOPNOTSUPP /* TRANS The operation you requested is not supported. Some socket functions TRANS don\u0026#39;t make sense for all types of sockets, and others may not be TRANS implemented for all communications protocols. On @gnuhurdsystems{}, this TRANS error can happen for many calls when the object does not support the TRANS particular operation; it is a generic indication that the server knows TRANS nothing to do for that call. */ _S(EOPNOTSUPP, N_(\u0026#34;Operation not supported\u0026#34;)) #endif #ifdef EPFNOSUPPORT /* TRANS The socket communications protocol family you requested is not supported. */ _S(EPFNOSUPPORT, N_(\u0026#34;Protocol family not supported\u0026#34;)) #endif #ifdef EAFNOSUPPORT /* TRANS The address family specified for a socket is not supported; it is TRANS inconsistent with the protocol being used on the socket. @xref{Sockets}. */ _S(EAFNOSUPPORT, N_(\u0026#34;Address family not supported by protocol\u0026#34;)) #endif #ifdef EADDRINUSE /* TRANS The requested socket address is already in use. @xref{Socket Addresses}. */ _S(EADDRINUSE, N_(\u0026#34;Address already in use\u0026#34;)) #endif #ifdef EADDRNOTAVAIL /* TRANS The requested socket address is not available; for example, you tried TRANS to give a socket a name that doesn\u0026#39;t match the local host name. TRANS @xref{Socket Addresses}. */ _S(EADDRNOTAVAIL, N_(\u0026#34;Cannot assign requested address\u0026#34;)) #endif #ifdef ENETDOWN /* TRANS A socket operation failed because the network was down. */ _S(ENETDOWN, N_(\u0026#34;Network is down\u0026#34;)) #endif #ifdef ENETUNREACH /* TRANS A socket operation failed because the subnet containing the remote host TRANS was unreachable. */ _S(ENETUNREACH, N_(\u0026#34;Network is unreachable\u0026#34;)) #endif #ifdef ENETRESET /* TRANS A network connection was reset because the remote host crashed. */ _S(ENETRESET, N_(\u0026#34;Network dropped connection on reset\u0026#34;)) #endif #ifdef ECONNABORTED /* TRANS A network connection was aborted locally. */ _S(ECONNABORTED, N_(\u0026#34;Software caused connection abort\u0026#34;)) #endif #ifdef ECONNRESET /* TRANS A network connection was closed for reasons outside the control of the TRANS local host, such as by the remote machine rebooting or an unrecoverable TRANS protocol violation. */ _S(ECONNRESET, N_(\u0026#34;Connection reset by peer\u0026#34;)) #endif #ifdef ENOBUFS /* TRANS The kernel\u0026#39;s buffers for I/O operations are all in use. In GNU, this TRANS error is always synonymous with @code{ENOMEM}; you may get one or the TRANS other from network operations. */ _S(ENOBUFS, N_(\u0026#34;No buffer space available\u0026#34;)) #endif #ifdef EISCONN /* TRANS You tried to connect a socket that is already connected. TRANS @xref{Connecting}. */ _S(EISCONN, N_(\u0026#34;Transport endpoint is already connected\u0026#34;)) #endif #ifdef ENOTCONN /* TRANS The socket is not connected to anything. You get this error when you TRANS try to transmit data over a socket, without first specifying a TRANS destination for the data. For a connectionless socket (for datagram TRANS protocols, such as UDP), you get @code{EDESTADDRREQ} instead. */ _S(ENOTCONN, N_(\u0026#34;Transport endpoint is not connected\u0026#34;)) #endif #ifdef EDESTADDRREQ /* TRANS No default destination address was set for the socket. You get this TRANS error when you try to transmit data over a connectionless socket, TRANS without first specifying a destination for the data with @code{connect}. */ _S(EDESTADDRREQ, N_(\u0026#34;Destination address required\u0026#34;)) #endif #ifdef ESHUTDOWN /* TRANS The socket has already been shut down. */ _S(ESHUTDOWN, N_(\u0026#34;Cannot send after transport endpoint shutdown\u0026#34;)) #endif #ifdef ETOOMANYREFS _S(ETOOMANYREFS, N_(\u0026#34;Too many references: cannot splice\u0026#34;)) #endif #ifdef ETIMEDOUT /* TRANS A socket operation with a specified timeout received no response during TRANS the timeout period. */ _S(ETIMEDOUT, N_(\u0026#34;Connection timed out\u0026#34;)) #endif #ifdef ECONNREFUSED /* TRANS A remote host refused to allow the network connection (typically because TRANS it is not running the requested service). */ _S(ECONNREFUSED, N_(\u0026#34;Connection refused\u0026#34;)) #endif #ifdef ELOOP /* TRANS Too many levels of symbolic links were encountered in looking up a file name. TRANS This often indicates a cycle of symbolic links. */ _S(ELOOP, N_(\u0026#34;Too many levels of symbolic links\u0026#34;)) #endif #ifdef ENAMETOOLONG /* TRANS Filename too long (longer than @code{PATH_MAX}; @pxref{Limits for TRANS Files}) or host name too long (in @code{gethostname} or TRANS @code{sethostname}; @pxref{Host Identification}). */ _S(ENAMETOOLONG, N_(\u0026#34;File name too long\u0026#34;)) #endif #ifdef EHOSTDOWN /* TRANS The remote host for a requested network connection is down. */ _S(EHOSTDOWN, N_(\u0026#34;Host is down\u0026#34;)) #endif /* TRANS The remote host for a requested network connection is not reachable. */ #ifdef EHOSTUNREACH _S(EHOSTUNREACH, N_(\u0026#34;No route to host\u0026#34;)) #endif #ifdef ENOTEMPTY /* TRANS Directory not empty, where an empty directory was expected. Typically, TRANS this error occurs when you are trying to delete a directory. */ _S(ENOTEMPTY, N_(\u0026#34;Directory not empty\u0026#34;)) #endif #ifdef EUSERS /* TRANS The file quota system is confused because there are too many users. TRANS @c This can probably happen in a GNU system when using NFS. */ _S(EUSERS, N_(\u0026#34;Too many users\u0026#34;)) #endif #ifdef EDQUOT /* TRANS The user\u0026#39;s disk quota was exceeded. */ _S(EDQUOT, N_(\u0026#34;Disk quota exceeded\u0026#34;)) #endif #ifdef ESTALE /* TRANS This indicates an internal confusion in the TRANS file system which is due to file system rearrangements on the server host TRANS for NFS file systems or corruption in other file systems. TRANS Repairing this condition usually requires unmounting, possibly repairing TRANS and remounting the file system. */ _S(ESTALE, N_(\u0026#34;Stale file handle\u0026#34;)) #endif #ifdef EREMOTE /* TRANS An attempt was made to NFS-mount a remote file system with a file name that TRANS already specifies an NFS-mounted file. TRANS (This is an error on some operating systems, but we expect it to work TRANS properly on @gnuhurdsystems{}, making this error code impossible.) */ _S(EREMOTE, N_(\u0026#34;Object is remote\u0026#34;)) #endif #ifdef ENOLCK /* TRANS This is used by the file locking facilities; see TRANS @ref{File Locks}. This error is never generated by @gnuhurdsystems{}, but TRANS it can result from an operation to an NFS server running another TRANS operating system. */ _S(ENOLCK, N_(\u0026#34;No locks available\u0026#34;)) #endif #ifdef ENOSYS /* TRANS This indicates that the function called is TRANS not implemented at all, either in the C library itself or in the TRANS operating system. When you get this error, you can be sure that this TRANS particular function will always fail with @code{ENOSYS} unless you TRANS install a new version of the C library or the operating system. */ _S(ENOSYS, N_(\u0026#34;Function not implemented\u0026#34;)) #endif #ifdef EILSEQ /* TRANS While decoding a multibyte character the function came along an invalid TRANS or an incomplete sequence of bytes or the given wide character is invalid. */ _S(EILSEQ, N_(\u0026#34;Invalid or incomplete multibyte or wide character\u0026#34;)) #endif #ifdef EBADMSG _S(EBADMSG, N_(\u0026#34;Bad message\u0026#34;)) #endif #ifdef EIDRM _S(EIDRM, N_(\u0026#34;Identifier removed\u0026#34;)) #endif #ifdef EMULTIHOP _S(EMULTIHOP, N_(\u0026#34;Multihop attempted\u0026#34;)) #endif #ifdef ENODATA _S(ENODATA, N_(\u0026#34;No data available\u0026#34;)) #endif #ifdef ENOLINK _S(ENOLINK, N_(\u0026#34;Link has been severed\u0026#34;)) #endif #ifdef ENOMSG _S(ENOMSG, N_(\u0026#34;No message of desired type\u0026#34;)) #endif #ifdef ENOSR _S(ENOSR, N_(\u0026#34;Out of streams resources\u0026#34;)) #endif #ifdef ENOSTR _S(ENOSTR, N_(\u0026#34;Device not a stream\u0026#34;)) #endif #ifdef EOVERFLOW _S(EOVERFLOW, N_(\u0026#34;Value too large for defined data type\u0026#34;)) #endif #ifdef EPROTO _S(EPROTO, N_(\u0026#34;Protocol error\u0026#34;)) #endif #ifdef ETIME _S(ETIME, N_(\u0026#34;Timer expired\u0026#34;)) #endif #ifdef ECANCELED /* TRANS An asynchronous operation was canceled before it TRANS completed. @xref{Asynchronous I/O}. When you call @code{aio_cancel}, TRANS the normal result is for the operations affected to complete with this TRANS error; @pxref{Cancel AIO Operations}. */ _S(ECANCELED, N_(\u0026#34;Operation canceled\u0026#34;)) #endif #ifdef EOWNERDEAD _S(EOWNERDEAD, N_(\u0026#34;Owner died\u0026#34;)) #endif #ifdef ENOTRECOVERABLE _S(ENOTRECOVERABLE, N_(\u0026#34;State not recoverable\u0026#34;)) #endif #ifdef ERESTART _S(ERESTART, N_(\u0026#34;Interrupted system call should be restarted\u0026#34;)) #endif #ifdef ECHRNG _S(ECHRNG, N_(\u0026#34;Channel number out of range\u0026#34;)) #endif #ifdef EL2NSYNC _S(EL2NSYNC, N_(\u0026#34;Level 2 not synchronized\u0026#34;)) #endif #ifdef EL3HLT _S(EL3HLT, N_(\u0026#34;Level 3 halted\u0026#34;)) #endif #ifdef EL3RST _S(EL3RST, N_(\u0026#34;Level 3 reset\u0026#34;)) #endif #ifdef ELNRNG _S(ELNRNG, N_(\u0026#34;Link number out of range\u0026#34;)) #endif #ifdef EUNATCH _S(EUNATCH, N_(\u0026#34;Protocol driver not attached\u0026#34;)) #endif #ifdef ENOCSI _S(ENOCSI, N_(\u0026#34;No CSI structure available\u0026#34;)) #endif #ifdef EL2HLT _S(EL2HLT, N_(\u0026#34;Level 2 halted\u0026#34;)) #endif #ifdef EBADE _S(EBADE, N_(\u0026#34;Invalid exchange\u0026#34;)) #endif #ifdef EBADR _S(EBADR, N_(\u0026#34;Invalid request descriptor\u0026#34;)) #endif #ifdef EXFULL _S(EXFULL, N_(\u0026#34;Exchange full\u0026#34;)) #endif #ifdef ENOANO _S(ENOANO, N_(\u0026#34;No anode\u0026#34;)) #endif #ifdef EBADRQC _S(EBADRQC, N_(\u0026#34;Invalid request code\u0026#34;)) #endif #ifdef EBADSLT _S(EBADSLT, N_(\u0026#34;Invalid slot\u0026#34;)) #endif #if defined EDEADLOCK \u0026amp;\u0026amp; EDEADLOCK != EDEADLK _S (EDEADLOCK, N_ (\u0026#34;File locking deadlock error\u0026#34;)) #endif #ifdef EBFONT _S(EBFONT, N_(\u0026#34;Bad font file format\u0026#34;)) #endif #ifdef ENONET _S(ENONET, N_(\u0026#34;Machine is not on the network\u0026#34;)) #endif #ifdef ENOPKG _S(ENOPKG, N_(\u0026#34;Package not installed\u0026#34;)) #endif #ifdef EADV _S(EADV, N_(\u0026#34;Advertise error\u0026#34;)) #endif #ifdef ESRMNT _S(ESRMNT, N_(\u0026#34;Srmount error\u0026#34;)) #endif #ifdef ECOMM _S(ECOMM, N_(\u0026#34;Communication error on send\u0026#34;)) #endif #ifdef EDOTDOT _S(EDOTDOT, N_(\u0026#34;RFS specific error\u0026#34;)) #endif #ifdef ENOTUNIQ _S(ENOTUNIQ, N_(\u0026#34;Name not unique on network\u0026#34;)) #endif #ifdef EBADFD _S(EBADFD, N_(\u0026#34;File descriptor in bad state\u0026#34;)) #endif #ifdef EREMCHG _S(EREMCHG, N_(\u0026#34;Remote address changed\u0026#34;)) #endif #ifdef ELIBACC _S(ELIBACC, N_(\u0026#34;Can not access a needed shared library\u0026#34;)) #endif #ifdef ELIBBAD _S(ELIBBAD, N_(\u0026#34;Accessing a corrupted shared library\u0026#34;)) #endif #ifdef ELIBSCN _S(ELIBSCN, N_(\u0026#34;.lib section in a.out corrupted\u0026#34;)) #endif #ifdef ELIBMAX _S(ELIBMAX, N_(\u0026#34;Attempting to link in too many shared libraries\u0026#34;)) #endif #ifdef ELIBEXEC _S(ELIBEXEC, N_(\u0026#34;Cannot exec a shared library directly\u0026#34;)) #endif #ifdef ESTRPIPE _S(ESTRPIPE, N_(\u0026#34;Streams pipe error\u0026#34;)) #endif #ifdef EUCLEAN _S(EUCLEAN, N_(\u0026#34;Structure needs cleaning\u0026#34;)) #endif #ifdef ENOTNAM _S(ENOTNAM, N_(\u0026#34;Not a XENIX named type file\u0026#34;)) #endif #ifdef ENAVAIL _S(ENAVAIL, N_(\u0026#34;No XENIX semaphores available\u0026#34;)) #endif #ifdef EISNAM _S(EISNAM, N_(\u0026#34;Is a named type file\u0026#34;)) #endif #ifdef EREMOTEIO _S(EREMOTEIO, N_(\u0026#34;Remote I/O error\u0026#34;)) #endif #ifdef ENOMEDIUM _S(ENOMEDIUM, N_(\u0026#34;No medium found\u0026#34;)) #endif #ifdef EMEDIUMTYPE _S(EMEDIUMTYPE, N_(\u0026#34;Wrong medium type\u0026#34;)) #endif #ifdef ENOKEY _S(ENOKEY, N_(\u0026#34;Required key not available\u0026#34;)) #endif #ifdef EKEYEXPIRED _S(EKEYEXPIRED, N_(\u0026#34;Key has expired\u0026#34;)) #endif #ifdef EKEYREVOKED _S(EKEYREVOKED, N_(\u0026#34;Key has been revoked\u0026#34;)) #endif #ifdef EKEYREJECTED _S(EKEYREJECTED, N_(\u0026#34;Key was rejected by service\u0026#34;)) #endif #ifdef ERFKILL _S(ERFKILL, N_(\u0026#34;Operation not possible due to RF-kill\u0026#34;)) #endif #ifdef EHWPOISON _S(EHWPOISON, N_(\u0026#34;Memory page has hardware error\u0026#34;)) #endif #ifdef EBADRPC _S(EBADRPC, N_(\u0026#34;RPC struct is bad\u0026#34;)) #endif #ifdef EFTYPE /* TRANS The file was the wrong type for the TRANS operation, or a data file had the wrong format. TRANS TRANS On some systems @code{chmod} returns this error if you try to set the TRANS sticky bit on a non-directory file; @pxref{Setting Permissions}. */ _S(EFTYPE, N_(\u0026#34;Inappropriate file type or format\u0026#34;)) #endif #ifdef EPROCUNAVAIL _S(EPROCUNAVAIL, N_(\u0026#34;RPC bad procedure for program\u0026#34;)) #endif #ifdef EAUTH _S(EAUTH, N_(\u0026#34;Authentication error\u0026#34;)) #endif #ifdef EDIED /* TRANS On @gnuhurdsystems{}, opening a file returns this error when the file is TRANS translated by a program and the translator program dies while starting TRANS up, before it has connected to the file. */ _S(EDIED, N_(\u0026#34;Translator died\u0026#34;)) #endif #ifdef ERPCMISMATCH _S(ERPCMISMATCH, N_(\u0026#34;RPC version wrong\u0026#34;)) #endif #ifdef EGREGIOUS /* TRANS You did @strong{what}? */ _S(EGREGIOUS, N_(\u0026#34;You really blew it this time\u0026#34;)) #endif #ifdef EPROCLIM /* TRANS This means that the per-user limit on new process would be exceeded by TRANS an attempted @code{fork}. @xref{Limits on Resources}, for details on TRANS the @code{RLIMIT_NPROC} limit. */ _S(EPROCLIM, N_(\u0026#34;Too many processes\u0026#34;)) #endif #ifdef EGRATUITOUS /* TRANS This error code has no purpose. */ _S(EGRATUITOUS, N_(\u0026#34;Gratuitous error\u0026#34;)) #endif #if defined (ENOTSUP) \u0026amp;\u0026amp; ENOTSUP != EOPNOTSUPP /* TRANS A function returns this error when certain parameter TRANS values are valid, but the functionality they request is not available. TRANS This can mean that the function does not implement a particular command TRANS or option value or flag bit at all. For functions that operate on some TRANS object given in a parameter, such as a file descriptor or a port, it TRANS might instead mean that only @emph{that specific object} (file TRANS descriptor, port, etc.) is unable to support the other parameters given; TRANS different file descriptors might support different ranges of parameter TRANS values. TRANS TRANS If the entire function is not available at all in the implementation, TRANS it returns @code{ENOSYS} instead. */ _S(ENOTSUP, N_(\u0026#34;Not supported\u0026#34;)) #endif #ifdef EPROGMISMATCH _S(EPROGMISMATCH, N_(\u0026#34;RPC program version wrong\u0026#34;)) #endif #ifdef EBACKGROUND /* TRANS On @gnuhurdsystems{}, servers supporting the @code{term} protocol return TRANS this error for certain operations when the caller is not in the TRANS foreground process group of the terminal. Users do not usually see this TRANS error because functions such as @code{read} and @code{write} translate TRANS it into a @code{SIGTTIN} or @code{SIGTTOU} signal. @xref{Job Control}, TRANS for information on process groups and these signals. */ _S(EBACKGROUND, N_(\u0026#34;Inappropriate operation for background process\u0026#34;)) #endif #ifdef EIEIO /* TRANS Go home and have a glass of warm, dairy-fresh milk. TRANS @c Okay. Since you are dying to know, I\u0026#39;ll tell you. TRANS @c This is a joke, obviously. There is a children\u0026#39;s song which begins, TRANS @c \u0026#34;Old McDonald had a farm, e-i-e-i-o.\u0026#34; Every time I see the (real) TRANS @c errno macro EIO, I think about that song. Probably most of my TRANS @c compatriots who program on Unix do, too. One of them must have stayed TRANS @c up a little too late one night and decided to add it to Hurd or Glibc. TRANS @c Whoever did it should be castigated, but it made me laugh. TRANS @c --jtobey@channel1.com TRANS @c TRANS @c \u0026#34;bought the farm\u0026#34; means \u0026#34;died\u0026#34;. -jtobey TRANS @c TRANS @c Translators, please do not translate this litteraly, translate it into TRANS @c an idiomatic funny way of saying that the computer died. */ _S(EIEIO, N_(\u0026#34;Computer bought the farm\u0026#34;)) #endif #if defined (EWOULDBLOCK) \u0026amp;\u0026amp; EWOULDBLOCK != EAGAIN /* TRANS In @theglibc{}, this is another name for @code{EAGAIN} (above). TRANS The values are always the same, on every operating system. TRANS TRANS C libraries in many older Unix systems have @code{EWOULDBLOCK} as a TRANS separate error code. */ _S(EWOULDBLOCK, N_(\u0026#34;Operation would block\u0026#34;)) #endif #ifdef ENEEDAUTH _S(ENEEDAUTH, N_(\u0026#34;Need authenticator\u0026#34;)) #endif #ifdef ED /* TRANS The experienced user will know what is wrong. TRANS @c This error code is a joke. Its perror text is part of the joke. TRANS @c Don\u0026#39;t change it. */ _S(ED, N_(\u0026#34;?\u0026#34;)) #endif #ifdef EPROGUNAVAIL _S(EPROGUNAVAIL, N_(\u0026#34;RPC program not available\u0026#34;)) #endif ","date":"1 January, 2024","id":18,"permalink":"/posts/perror_func/","summary":"重点学习 errnum 转 str 的实现方法","tags":"c perror errnum glibc RTFSC","title":"perror"},{"content":"配置前的状态 windows 11 + wsl + ubuntu 18.04 windows 可以识别 adb devices\nC:\\Users\u0026gt;adb devices List of devices attached fada-018b4209f24d0001 device wsl 识别不到 adb devices\nluyang@LUYANG:~$ adb devices * daemon not running; starting now at tcp:5037 * daemon started successfully List of devices attached Windows 安装工具包 windows 安装 usbipd-win\nWSL 安装工具包 WSL ubuntu 安装 adb 工具\nsudo apt install android-tools-adb 在WSL中，安装 USB/IP 的用户空间工具和 USB 硬件标识符的数据库。\nsudo apt install linux-tools-5.15.0-87-generic hwdata # 注意 linux-tools 相应的要改成你实际安装的版本 sudo update-alternatives --install /usr/local/bin/usbip usbip /usr/lib/linux-tools/5.15.0-87-generic/usbip 20 关于 linux-tools 查看当前 ubuntu 系统版本支持的 linux-tools generic版本\n~$ sudo apt-cache search linux-tools linux-aws-tools-5.15.0-1004 - Linux kernel version specific tools for version 5.15.0-1004 linux-azure-tools-5.15.0-1003 - Linux kernel version specific tools for version 5.15.0-1003 linux-gcp-tools-5.15.0-1003 - Linux kernel version specific tools for version 5.15.0-1003 linux-gke-tools-5.15.0-1002 - Linux kernel version specific tools for version 5.15.0-1002 linux-ibm-tools-5.15.0-1002 - Linux kernel version specific tools for version 5.15.0-1002 linux-intel-iotg-tools-5.15.0-1004 - Linux kernel version specific tools for version 5.15.0-1004 linux-kvm-tools-5.15.0-1004 - Linux kernel version specific tools for version 5.15.0-1004 linux-lowlatency-tools-5.15.0-24 - Linux kernel version specific tools for version 5.15.0-24 linux-oem-5.17-tools-5.17.0-1003 - Linux kernel version specific tools for version 5.17.0-1003 linux-oracle-tools-5.15.0-1002 - Oracle Linux kernel version specific tools for version 5.15.0-1002 linux-tools-5.15.0-1002-gke - Linux kernel version specific tools for version 5.15.0-1002 linux-tools-5.15.0-1002-ibm - Linux kernel version specific tools for version 5.15.0-1002 linux-tools-5.15.0-1002-oracle - Oracle Linux kernel version specific tools for version 5.15.0-1002 linux-tools-5.15.0-1003-azure - Linux kernel version specific tools for version 5.15.0-1003 linux-tools-5.15.0-1003-gcp - Linux kernel version specific tools for version 5.15.0-1003 linux-tools-5.15.0-1004-aws - Linux kernel version specific tools for version 5.15.0-1004 linux-tools-5.15.0-1004-intel-iotg - Linux kernel version specific tools for version 5.15.0-1004 linux-tools-5.15.0-1004-kvm - Linux kernel version specific tools for version 5.15.0-1004 linux-tools-5.15.0-24-lowlatency - Linux kernel version specific tools for version 5.15.0-24 linux-tools-5.15.0-25 - Linux kernel version specific tools for version 5.15.0-25 linux-tools-5.15.0-25-generic - Linux kernel version specific tools for version 5.15.0-25 linux-tools-5.17.0-1003-oem - Linux kernel version specific tools for version 5.17.0-1003 linux-tools-aws - Linux kernel versioned tools for Amazon Web Services (AWS) systems. linux-tools-azure - Linux kernel versioned tools for Azure systems. linux-tools-common - Linux kernel version specific tools for version 5.15.0 linux-tools-gcp - Google Cloud Platform (GCP) Linux kernel tools linux-tools-generic - Generic Linux kernel tools linux-tools-generic-hwe-20.04 - Generic Linux kernel tools (dummy transitional package) linux-tools-generic-hwe-20.04-edge - Generic Linux kernel tools (dummy transitional package) linux-tools-generic-hwe-22.04 - Generic Linux kernel tools linux-tools-generic-hwe-22.04-edge - Generic Linux kernel tools linux-tools-gke - Linux kernel versioned tools for gke systems. linux-tools-gke-5.15 - Linux kernel versioned tools for gke systems. linux-tools-host - Linux kernel VM host tools linux-tools-ibm - IBM Cloud Platform (ibm) Linux kernel tools linux-tools-intel-iotg - Intel-Iotg Linux kernel tools linux-tools-kvm - Linux kernel versioned tools for virtual systems. linux-tools-lowlatency - lowlatency Linux kernel tools linux-tools-lowlatency-hwe-20.04 - lowlatency Linux kernel tools (dummy transitional package) linux-tools-lowlatency-hwe-20.04-edge - lowlatency Linux kernel tools (dummy transitional package) linux-tools-lowlatency-hwe-22.04 - lowlatency Linux kernel tools linux-tools-lowlatency-hwe-22.04-edge - lowlatency Linux kernel tools linux-tools-oem-20.04 - OEM Linux kernel tools (dummy transitional package) linux-tools-oem-22.04 - OEM Linux kernel tools linux-tools-oracle - Linux kernel versioned tools for Oracle systems. linux-tools-virtual - Virtual Linux kernel tools linux-tools-virtual-hwe-20.04 - Virtual Linux kernel tools (dummy transitional package) linux-tools-virtual-hwe-20.04-edge - Virtual Linux kernel tools (dummy transitional package) linux-tools-virtual-hwe-22.04 - Virtual Linux kernel tools linux-tools-virtual-hwe-22.04-edge - Virtual Linux kernel tools linux-aws-5.19-tools-5.19.0-1024 - Linux kernel version specific tools for version 5.19.0-1024 linux-aws-5.19-tools-5.19.0-1025 - Linux kernel version specific tools for version 5.19.0-1025 linux-aws-5.19-tools-5.19.0-1026 - Linux kernel version specific tools for version 5.19.0-1026 linux-aws-5.19-tools-5.19.0-1027 - Linux kernel version specific tools for version 5.19.0-1027 linux-aws-5.19-tools-5.19.0-1028 - Linux kernel version specific tools for version 5.19.0-1028 linux-aws-5.19-tools-5.19.0-1029 - Linux kernel version specific tools for version 5.19.0-1029 linux-aws-6.2-tools-6.2.0-1005 - Linux kernel version specific tools for version 6.2.0-1005 linux-aws-6.2-tools-6.2.0-1006 - Linux kernel version specific tools for version 6.2.0-1006 linux-aws-6.2-tools-6.2.0-1007 - Linux kernel version specific tools for version 6.2.0-1007 linux-aws-6.2-tools-6.2.0-1008 - Linux kernel version specific tools for version 6.2.0-1008 linux-aws-6.2-tools-6.2.0-1009 - Linux kernel version specific tools for version 6.2.0-1009 linux-aws-6.2-tools-6.2.0-1010 - Linux kernel version specific tools for version 6.2.0-1010 linux-aws-6.2-tools-6.2.0-1011 - Linux kernel version specific tools for version 6.2.0-1011 linux-aws-6.2-tools-6.2.0-1012 - Linux kernel version specific tools for version 6.2.0-1012 linux-aws-6.2-tools-6.2.0-1013 - Linux kernel version specific tools for version 6.2.0-1013 linux-aws-6.2-tools-6.2.0-1014 - Linux kernel version specific tools for version 6.2.0-1014 linux-aws-tools-5.15.0-1035 - Linux kernel version specific tools for version 5.15.0-1035 linux-aws-tools-5.15.0-1036 - Linux kernel version specific tools for version 5.15.0-1036 linux-aws-tools-5.15.0-1037 - Linux kernel version specific tools for version 5.15.0-1037 linux-aws-tools-5.15.0-1038 - Linux kernel version specific tools for version 5.15.0-1038 linux-aws-tools-5.15.0-1039 - Linux kernel version specific tools for version 5.15.0-1039 linux-aws-tools-5.15.0-1040 - Linux kernel version specific tools for version 5.15.0-1040 linux-aws-tools-5.15.0-1042 - Linux kernel version specific tools for version 5.15.0-1042 linux-aws-tools-5.15.0-1043 - Linux kernel version specific tools for version 5.15.0-1043 linux-aws-tools-5.15.0-1044 - Linux kernel version specific tools for version 5.15.0-1044 linux-aws-tools-5.15.0-1045 - Linux kernel version specific tools for version 5.15.0-1045 linux-aws-tools-5.15.0-1047 - Linux kernel version specific tools for version 5.15.0-1047 linux-aws-tools-5.15.0-1048 - Linux kernel version specific tools for version 5.15.0-1048 linux-azure-5.19-tools-5.19.0-1025 - Linux kernel version specific tools for version 5.19.0-1025 linux-azure-5.19-tools-5.19.0-1026 - Linux kernel version specific tools for version 5.19.0-1026 linux-azure-5.19-tools-5.19.0-1027 - Linux kernel version specific tools for version 5.19.0-1027 linux-azure-6.2-tools-6.2.0-1005 - Linux kernel version specific tools for version 6.2.0-1005 linux-azure-6.2-tools-6.2.0-1006 - Linux kernel version specific tools for version 6.2.0-1006 linux-azure-6.2-tools-6.2.0-1007 - Linux kernel version specific tools for version 6.2.0-1007 linux-azure-6.2-tools-6.2.0-1008 - Linux kernel version specific tools for version 6.2.0-1008 linux-azure-6.2-tools-6.2.0-1011 - Linux kernel version specific tools for version 6.2.0-1011 linux-azure-6.2-tools-6.2.0-1012 - Linux kernel version specific tools for version 6.2.0-1012 linux-azure-6.2-tools-6.2.0-1014 - Linux kernel version specific tools for version 6.2.0-1014 linux-azure-6.2-tools-6.2.0-1015 - Linux kernel version specific tools for version 6.2.0-1015 linux-azure-tools-5.15.0-1035 - Linux kernel version specific tools for version 5.15.0-1035 linux-azure-tools-5.15.0-1036 - Linux kernel version specific tools for version 5.15.0-1036 linux-azure-tools-5.15.0-1037 - Linux kernel version specific tools for version 5.15.0-1037 linux-azure-tools-5.15.0-1038 - Linux kernel version specific tools for version 5.15.0-1038 linux-azure-tools-5.15.0-1039 - Linux kernel version specific tools for version 5.15.0-1039 linux-azure-tools-5.15.0-1040 - Linux kernel version specific tools for version 5.15.0-1040 linux-azure-tools-5.15.0-1041 - Linux kernel version specific tools for version 5.15.0-1041 linux-azure-tools-5.15.0-1042 - Linux kernel version specific tools for version 5.15.0-1042 linux-azure-tools-5.15.0-1044 - Linux kernel version specific tools for version 5.15.0-1044 linux-azure-tools-5.15.0-1045 - Linux kernel version specific tools for version 5.15.0-1045 linux-azure-tools-5.15.0-1046 - Linux kernel version specific tools for version 5.15.0-1046 linux-azure-tools-5.15.0-1047 - Linux kernel version specific tools for version 5.15.0-1047 linux-azure-tools-5.15.0-1049 - Linux kernel version specific tools for version 5.15.0-1049 linux-azure-tools-5.15.0-1050 - Linux kernel version specific tools for version 5.15.0-1050 linux-gcp-5.19-tools-5.19.0-1022 - Linux kernel version specific tools for version 5.19.0-1022 linux-gcp-5.19-tools-5.19.0-1024 - Linux kernel version specific tools for version 5.19.0-1024 linux-gcp-5.19-tools-5.19.0-1025 - Linux kernel version specific tools for version 5.19.0-1025 linux-gcp-5.19-tools-5.19.0-1026 - Linux kernel version specific tools for version 5.19.0-1026 linux-gcp-5.19-tools-5.19.0-1027 - Linux kernel version specific tools for version 5.19.0-1027 linux-gcp-5.19-tools-5.19.0-1030 - Linux kernel version specific tools for version 5.19.0-1030 linux-gcp-6.2-tools-6.2.0-1009 - Linux kernel version specific tools for version 6.2.0-1009 linux-gcp-6.2-tools-6.2.0-1010 - Linux kernel version specific tools for version 6.2.0-1010 linux-gcp-6.2-tools-6.2.0-1011 - Linux kernel version specific tools for version 6.2.0-1011 linux-gcp-6.2-tools-6.2.0-1012 - Linux kernel version specific tools for version 6.2.0-1012 linux-gcp-6.2-tools-6.2.0-1013 - Linux kernel version specific tools for version 6.2.0-1013 linux-gcp-6.2-tools-6.2.0-1014 - Linux kernel version specific tools for version 6.2.0-1014 linux-gcp-6.2-tools-6.2.0-1016 - Linux kernel version specific tools for version 6.2.0-1016 linux-gcp-6.2-tools-6.2.0-1017 - Linux kernel version specific tools for version 6.2.0-1017 linux-gcp-tools-5.15.0-1034 - Linux kernel version specific tools for version 5.15.0-1034 linux-gcp-tools-5.15.0-1035 - Linux kernel version specific tools for version 5.15.0-1035 linux-gcp-tools-5.15.0-1036 - Linux kernel version specific tools for version 5.15.0-1036 linux-gcp-tools-5.15.0-1037 - Linux kernel version specific tools for version 5.15.0-1037 linux-gcp-tools-5.15.0-1038 - Linux kernel version specific tools for version 5.15.0-1038 linux-gcp-tools-5.15.0-1039 - Linux kernel version specific tools for version 5.15.0-1039 linux-gcp-tools-5.15.0-1040 - Linux kernel version specific tools for version 5.15.0-1040 linux-gcp-tools-5.15.0-1041 - Linux kernel version specific tools for version 5.15.0-1041 linux-gcp-tools-5.15.0-1042 - Linux kernel version specific tools for version 5.15.0-1042 linux-gcp-tools-5.15.0-1044 - Linux kernel version specific tools for version 5.15.0-1044 linux-gcp-tools-5.15.0-1045 - Linux kernel version specific tools for version 5.15.0-1045 linux-gke-tools-5.15.0-1027 - Linux kernel version specific tools for version 5.15.0-1027 linux-gke-tools-5.15.0-1028 - Linux kernel version specific tools for version 5.15.0-1028 linux-gke-tools-5.15.0-1030 - Linux kernel version specific tools for version 5.15.0-1030 linux-gke-tools-5.15.0-1032 - Linux kernel version specific tools for version 5.15.0-1032 linux-gke-tools-5.15.0-1033 - Linux kernel version specific tools for version 5.15.0-1033 linux-gke-tools-5.15.0-1034 - Linux kernel version specific tools for version 5.15.0-1034 linux-gke-tools-5.15.0-1035 - Linux kernel version specific tools for version 5.15.0-1035 linux-gke-tools-5.15.0-1036 - Linux kernel version specific tools for version 5.15.0-1036 linux-gke-tools-5.15.0-1037 - Linux kernel version specific tools for version 5.15.0-1037 linux-gke-tools-5.15.0-1038 - Linux kernel version specific tools for version 5.15.0-1038 linux-gke-tools-5.15.0-1039 - Linux kernel version specific tools for version 5.15.0-1039 linux-gke-tools-5.15.0-1040 - Linux kernel version specific tools for version 5.15.0-1040 linux-gke-tools-5.15.0-1041 - Linux kernel version specific tools for version 5.15.0-1041 linux-gke-tools-5.15.0-1042 - Linux kernel version specific tools for version 5.15.0-1042 linux-gke-tools-5.15.0-1044 - Linux kernel version specific tools for version 5.15.0-1044 linux-gke-tools-5.15.0-1045 - Linux kernel version specific tools for version 5.15.0-1045 linux-hwe-5.19-tools-5.19.0-41 - Linux kernel version specific tools for version 5.19.0-41 linux-hwe-5.19-tools-5.19.0-42 - Linux kernel version specific tools for version 5.19.0-42 linux-hwe-5.19-tools-5.19.0-43 - Linux kernel version specific tools for version 5.19.0-43 linux-hwe-5.19-tools-5.19.0-45 - Linux kernel version specific tools for version 5.19.0-45 linux-hwe-5.19-tools-5.19.0-46 - Linux kernel version specific tools for version 5.19.0-46 linux-hwe-5.19-tools-5.19.0-50 - Linux kernel version specific tools for version 5.19.0-50 linux-hwe-6.2-tools-6.2.0-25 - Linux kernel version specific tools for version 6.2.0-25 linux-hwe-6.2-tools-6.2.0-26 - Linux kernel version specific tools for version 6.2.0-26 linux-hwe-6.2-tools-6.2.0-31 - Linux kernel version specific tools for version 6.2.0-31 linux-hwe-6.2-tools-6.2.0-32 - Linux kernel version specific tools for version 6.2.0-32 linux-hwe-6.2-tools-6.2.0-33 - Linux kernel version specific tools for version 6.2.0-33 linux-hwe-6.2-tools-6.2.0-34 - Linux kernel version specific tools for version 6.2.0-34 linux-hwe-6.2-tools-6.2.0-35 - Linux kernel version specific tools for version 6.2.0-35 linux-ibm-tools-5.15.0-1030 - Linux kernel version specific tools for version 5.15.0-1030 linux-ibm-tools-5.15.0-1031 - Linux kernel version specific tools for version 5.15.0-1031 linux-ibm-tools-5.15.0-1032 - Linux kernel version specific tools for version 5.15.0-1032 linux-ibm-tools-5.15.0-1033 - Linux kernel version specific tools for version 5.15.0-1033 linux-ibm-tools-5.15.0-1034 - Linux kernel version specific tools for version 5.15.0-1034 linux-ibm-tools-5.15.0-1035 - Linux kernel version specific tools for version 5.15.0-1035 linux-ibm-tools-5.15.0-1036 - Linux kernel version specific tools for version 5.15.0-1036 linux-ibm-tools-5.15.0-1037 - Linux kernel version specific tools for version 5.15.0-1037 linux-ibm-tools-5.15.0-1038 - Linux kernel version specific tools for version 5.15.0-1038 linux-ibm-tools-5.15.0-1040 - Linux kernel version specific tools for version 5.15.0-1040 linux-ibm-tools-5.15.0-1041 - Linux kernel version specific tools for version 5.15.0-1041 linux-intel-iotg-tools-5.15.0-1028 - Linux kernel version specific tools for version 5.15.0-1028 linux-intel-iotg-tools-5.15.0-1030 - Linux kernel version specific tools for version 5.15.0-1030 linux-intel-iotg-tools-5.15.0-1031 - Linux kernel version specific tools for version 5.15.0-1031 linux-intel-iotg-tools-5.15.0-1033 - Linux kernel version specific tools for version 5.15.0-1033 linux-intel-iotg-tools-5.15.0-1034 - Linux kernel version specific tools for version 5.15.0-1034 linux-intel-iotg-tools-5.15.0-1035 - Linux kernel version specific tools for version 5.15.0-1035 linux-intel-iotg-tools-5.15.0-1036 - Linux kernel version specific tools for version 5.15.0-1036 linux-intel-iotg-tools-5.15.0-1037 - Linux kernel version specific tools for version 5.15.0-1037 linux-intel-iotg-tools-5.15.0-1038 - Linux kernel version specific tools for version 5.15.0-1038 linux-intel-iotg-tools-5.15.0-1039 - Linux kernel version specific tools for version 5.15.0-1039 linux-intel-iotg-tools-5.15.0-1040 - Linux kernel version specific tools for version 5.15.0-1040 linux-intel-iotg-tools-5.15.0-1043 - Linux kernel version specific tools for version 5.15.0-1043 linux-kvm-tools-5.15.0-1033 - Linux kernel version specific tools for version 5.15.0-1033 linux-kvm-tools-5.15.0-1034 - Linux kernel version specific tools for version 5.15.0-1034 linux-kvm-tools-5.15.0-1035 - Linux kernel version specific tools for version 5.15.0-1035 linux-kvm-tools-5.15.0-1037 - Linux kernel version specific tools for version 5.15.0-1037 linux-kvm-tools-5.15.0-1038 - Linux kernel version specific tools for version 5.15.0-1038 linux-kvm-tools-5.15.0-1039 - Linux kernel version specific tools for version 5.15.0-1039 linux-kvm-tools-5.15.0-1040 - Linux kernel version specific tools for version 5.15.0-1040 linux-kvm-tools-5.15.0-1041 - Linux kernel version specific tools for version 5.15.0-1041 linux-kvm-tools-5.15.0-1042 - Linux kernel version specific tools for version 5.15.0-1042 linux-kvm-tools-5.15.0-1044 - Linux kernel version specific tools for version 5.15.0-1044 linux-kvm-tools-5.15.0-1045 - Linux kernel version specific tools for version 5.15.0-1045 linux-lowlatency-hwe-5.19-tools-5.19.0-1024 - Linux kernel version specific tools for version 5.19.0-1024 linux-lowlatency-hwe-5.19-tools-5.19.0-1025 - Linux kernel version specific tools for version 5.19.0-1025 linux-lowlatency-hwe-5.19-tools-5.19.0-1027 - Linux kernel version specific tools for version 5.19.0-1027 linux-lowlatency-hwe-5.19-tools-5.19.0-1028 - Linux kernel version specific tools for version 5.19.0-1028 linux-lowlatency-hwe-5.19-tools-5.19.0-1030 - Linux kernel version specific tools for version 5.19.0-1030 linux-lowlatency-hwe-6.2-tools-6.2.0-1008 - Linux kernel version specific tools for version 6.2.0-1008 linux-lowlatency-hwe-6.2-tools-6.2.0-1009 - Linux kernel version specific tools for version 6.2.0-1009 linux-lowlatency-hwe-6.2-tools-6.2.0-1011 - Linux kernel version specific tools for version 6.2.0-1011 linux-lowlatency-hwe-6.2-tools-6.2.0-1012 - Linux kernel version specific tools for version 6.2.0-1012 linux-lowlatency-hwe-6.2-tools-6.2.0-1013 - Linux kernel version specific tools for version 6.2.0-1013 linux-lowlatency-hwe-6.2-tools-6.2.0-1014 - Linux kernel version specific tools for version 6.2.0-1014 linux-lowlatency-hwe-6.2-tools-6.2.0-1015 - Linux kernel version specific tools for version 6.2.0-1015 linux-lowlatency-tools-5.15.0-72 - Linux kernel version specific tools for version 5.15.0-72 linux-lowlatency-tools-5.15.0-73 - Linux kernel version specific tools for version 5.15.0-73 linux-lowlatency-tools-5.15.0-75 - Linux kernel version specific tools for version 5.15.0-75 linux-lowlatency-tools-5.15.0-76 - Linux kernel version specific tools for version 5.15.0-76 linux-lowlatency-tools-5.15.0-78 - Linux kernel version specific tools for version 5.15.0-78 linux-lowlatency-tools-5.15.0-79 - Linux kernel version specific tools for version 5.15.0-79 linux-lowlatency-tools-5.15.0-82 - Linux kernel version specific tools for version 5.15.0-82 linux-lowlatency-tools-5.15.0-83 - Linux kernel version specific tools for version 5.15.0-83 linux-lowlatency-tools-5.15.0-84 - Linux kernel version specific tools for version 5.15.0-84 linux-lowlatency-tools-5.15.0-86 - Linux kernel version specific tools for version 5.15.0-86 linux-lowlatency-tools-5.15.0-87 - Linux kernel version specific tools for version 5.15.0-87 linux-nvidia-6.2-tools-6.2.0-1003 - Linux kernel version specific tools for version 6.2.0-1003 linux-nvidia-6.2-tools-6.2.0-1009 - Linux kernel version specific tools for version 6.2.0-1009 linux-nvidia-6.2-tools-6.2.0-1010 - Linux kernel version specific tools for version 6.2.0-1010 linux-nvidia-tools-5.15.0-1025 - Linux kernel version specific tools for version 5.15.0-1025 linux-nvidia-tools-5.15.0-1026 - Linux kernel version specific tools for version 5.15.0-1026 linux-nvidia-tools-5.15.0-1027 - Linux kernel version specific tools for version 5.15.0-1027 linux-nvidia-tools-5.15.0-1028 - Linux kernel version specific tools for version 5.15.0-1028 linux-nvidia-tools-5.15.0-1029 - Linux kernel version specific tools for version 5.15.0-1029 linux-nvidia-tools-5.15.0-1030 - Linux kernel version specific tools for version 5.15.0-1030 linux-nvidia-tools-5.15.0-1031 - Linux kernel version specific tools for version 5.15.0-1031 linux-nvidia-tools-5.15.0-1032 - Linux kernel version specific tools for version 5.15.0-1032 linux-nvidia-tools-5.15.0-1033 - Linux kernel version specific tools for version 5.15.0-1033 linux-nvidia-tools-5.15.0-1037 - Linux kernel version specific tools for version 5.15.0-1037 linux-nvidia-tools-5.15.0-1039 - Linux kernel version specific tools for version 5.15.0-1039 linux-oem-5.17-tools-5.17.0-1031 - Linux kernel version specific tools for version 5.17.0-1031 linux-oem-5.17-tools-5.17.0-1032 - Linux kernel version specific tools for version 5.17.0-1032 linux-oem-5.17-tools-5.17.0-1033 - Linux kernel version specific tools for version 5.17.0-1033 linux-oem-5.17-tools-5.17.0-1034 - Linux kernel version specific tools for version 5.17.0-1034 linux-oem-5.17-tools-5.17.0-1035 - Linux kernel version specific tools for version 5.17.0-1035 linux-oem-6.0-tools-6.0.0-1016 - Linux kernel version specific tools for version 6.0.0-1016 linux-oem-6.0-tools-6.0.0-1017 - Linux kernel version specific tools for version 6.0.0-1017 linux-oem-6.0-tools-6.0.0-1018 - Linux kernel version specific tools for version 6.0.0-1018 linux-oem-6.0-tools-6.0.0-1019 - Linux kernel version specific tools for version 6.0.0-1019 linux-oem-6.0-tools-6.0.0-1020 - Linux kernel version specific tools for version 6.0.0-1020 linux-oem-6.0-tools-6.0.0-1021 - Linux kernel version specific tools for version 6.0.0-1021 linux-oem-6.1-tools-6.1.0-1012 - Linux kernel version specific tools for version 6.1.0-1012 linux-oem-6.1-tools-6.1.0-1013 - Linux kernel version specific tools for version 6.1.0-1013 linux-oem-6.1-tools-6.1.0-1014 - Linux kernel version specific tools for version 6.1.0-1014 linux-oem-6.1-tools-6.1.0-1015 - Linux kernel version specific tools for version 6.1.0-1015 linux-oem-6.1-tools-6.1.0-1016 - Linux kernel version specific tools for version 6.1.0-1016 linux-oem-6.1-tools-6.1.0-1017 - Linux kernel version specific tools for version 6.1.0-1017 linux-oem-6.1-tools-6.1.0-1019 - Linux kernel version specific tools for version 6.1.0-1019 linux-oem-6.1-tools-6.1.0-1020 - Linux kernel version specific tools for version 6.1.0-1020 linux-oem-6.1-tools-6.1.0-1021 - Linux kernel version specific tools for version 6.1.0-1021 linux-oem-6.1-tools-6.1.0-1022 - Linux kernel version specific tools for version 6.1.0-1022 linux-oem-6.1-tools-6.1.0-1023 - Linux kernel version specific tools for version 6.1.0-1023 linux-oem-6.1-tools-6.1.0-1024 - Linux kernel version specific tools for version 6.1.0-1024 linux-oem-6.5-tools-6.5.0-1003 - Linux kernel version specific tools for version 6.5.0-1003 linux-oem-6.5-tools-6.5.0-1004 - Linux kernel version specific tools for version 6.5.0-1004 linux-oracle-5.19-tools-5.19.0-1023 - Oracle Linux kernel version specific tools for version 5.19.0-1023 linux-oracle-5.19-tools-5.19.0-1024 - Oracle Linux kernel version specific tools for version 5.19.0-1024 linux-oracle-5.19-tools-5.19.0-1025 - Oracle Linux kernel version specific tools for version 5.19.0-1025 linux-oracle-5.19-tools-5.19.0-1026 - Oracle Linux kernel version specific tools for version 5.19.0-1026 linux-oracle-5.19-tools-5.19.0-1027 - Oracle Linux kernel version specific tools for version 5.19.0-1027 linux-oracle-6.2-tools-6.2.0-1013 - Oracle Linux kernel version specific tools for version 6.2.0-1013 linux-oracle-6.2-tools-6.2.0-1014 - Oracle Linux kernel version specific tools for version 6.2.0-1014 linux-oracle-tools-5.15.0-1035 - Oracle Linux kernel version specific tools for version 5.15.0-1035 linux-oracle-tools-5.15.0-1036 - Oracle Linux kernel version specific tools for version 5.15.0-1036 linux-oracle-tools-5.15.0-1037 - Oracle Linux kernel version specific tools for version 5.15.0-1037 linux-oracle-tools-5.15.0-1038 - Oracle Linux kernel version specific tools for version 5.15.0-1038 linux-oracle-tools-5.15.0-1039 - Oracle Linux kernel version specific tools for version 5.15.0-1039 linux-oracle-tools-5.15.0-1040 - Oracle Linux kernel version specific tools for version 5.15.0-1040 linux-oracle-tools-5.15.0-1041 - Oracle Linux kernel version specific tools for version 5.15.0-1041 linux-oracle-tools-5.15.0-1042 - Oracle Linux kernel version specific tools for version 5.15.0-1042 linux-oracle-tools-5.15.0-1044 - Oracle Linux kernel version specific tools for version 5.15.0-1044 linux-oracle-tools-5.15.0-1045 - Oracle Linux kernel version specific tools for version 5.15.0-1045 linux-oracle-tools-5.15.0-1046 - Oracle Linux kernel version specific tools for version 5.15.0-1046 linux-tools-5.15.0-1025-nvidia - Linux kernel version specific tools for version 5.15.0-1025 linux-tools-5.15.0-1025-nvidia-lowlatency - Linux kernel version specific tools for version 5.15.0-1025 linux-tools-5.15.0-1026-nvidia - Linux kernel version specific tools for version 5.15.0-1026 linux-tools-5.15.0-1026-nvidia-lowlatency - Linux kernel version specific tools for version 5.15.0-1026 linux-tools-5.15.0-1027-gke - Linux kernel version specific tools for version 5.15.0-1027 linux-tools-5.15.0-1027-nvidia - Linux kernel version specific tools for version 5.15.0-1027 linux-tools-5.15.0-1027-nvidia-lowlatency - Linux kernel version specific tools for version 5.15.0-1027 linux-tools-5.15.0-1028-gke - Linux kernel version specific tools for version 5.15.0-1028 linux-tools-5.15.0-1028-intel-iotg - Linux kernel version specific tools for version 5.15.0-1028 linux-tools-5.15.0-1028-nvidia - Linux kernel version specific tools for version 5.15.0-1028 linux-tools-5.15.0-1028-nvidia-lowlatency - Linux kernel version specific tools for version 5.15.0-1028 linux-tools-5.15.0-1029-nvidia - Linux kernel version specific tools for version 5.15.0-1029 linux-tools-5.15.0-1029-nvidia-lowlatency - Linux kernel version specific tools for version 5.15.0-1029 linux-tools-5.15.0-1030-gke - Linux kernel version specific tools for version 5.15.0-1030 linux-tools-5.15.0-1030-ibm - Linux kernel version specific tools for version 5.15.0-1030 linux-tools-5.15.0-1030-intel-iotg - Linux kernel version specific tools for version 5.15.0-1030 linux-tools-5.15.0-1030-nvidia - Linux kernel version specific tools for version 5.15.0-1030 linux-tools-5.15.0-1030-nvidia-lowlatency - Linux kernel version specific tools for version 5.15.0-1030 linux-tools-5.15.0-1031-ibm - Linux kernel version specific tools for version 5.15.0-1031 linux-tools-5.15.0-1031-intel-iotg - Linux kernel version specific tools for version 5.15.0-1031 linux-tools-5.15.0-1031-nvidia - Linux kernel version specific tools for version 5.15.0-1031 linux-tools-5.15.0-1031-nvidia-lowlatency - Linux kernel version specific tools for version 5.15.0-1031 linux-tools-5.15.0-1032-gke - Linux kernel version specific tools for version 5.15.0-1032 linux-tools-5.15.0-1032-ibm - Linux kernel version specific tools for version 5.15.0-1032 linux-tools-5.15.0-1032-nvidia - Linux kernel version specific tools for version 5.15.0-1032 linux-tools-5.15.0-1032-nvidia-lowlatency - Linux kernel version specific tools for version 5.15.0-1032 linux-tools-5.15.0-1033-gke - Linux kernel version specific tools for version 5.15.0-1033 linux-tools-5.15.0-1033-ibm - Linux kernel version specific tools for version 5.15.0-1033 linux-tools-5.15.0-1033-intel-iotg - Linux kernel version specific tools for version 5.15.0-1033 linux-tools-5.15.0-1033-kvm - Linux kernel version specific tools for version 5.15.0-1033 linux-tools-5.15.0-1033-nvidia - Linux kernel version specific tools for version 5.15.0-1033 linux-tools-5.15.0-1033-nvidia-lowlatency - Linux kernel version specific tools for version 5.15.0-1033 linux-tools-5.15.0-1034-gcp - Linux kernel version specific tools for version 5.15.0-1034 linux-tools-5.15.0-1034-gke - Linux kernel version specific tools for version 5.15.0-1034 linux-tools-5.15.0-1034-ibm - Linux kernel version specific tools for version 5.15.0-1034 linux-tools-5.15.0-1034-intel-iotg - Linux kernel version specific tools for version 5.15.0-1034 linux-tools-5.15.0-1034-kvm - Linux kernel version specific tools for version 5.15.0-1034 linux-tools-5.15.0-1035-aws - Linux kernel version specific tools for version 5.15.0-1035 linux-tools-5.15.0-1035-azure - Linux kernel version specific tools for version 5.15.0-1035 linux-tools-5.15.0-1035-gcp - Linux kernel version specific tools for version 5.15.0-1035 linux-tools-5.15.0-1035-gke - Linux kernel version specific tools for version 5.15.0-1035 linux-tools-5.15.0-1035-ibm - Linux kernel version specific tools for version 5.15.0-1035 linux-tools-5.15.0-1035-intel-iotg - Linux kernel version specific tools for version 5.15.0-1035 linux-tools-5.15.0-1035-kvm - Linux kernel version specific tools for version 5.15.0-1035 linux-tools-5.15.0-1035-oracle - Oracle Linux kernel version specific tools for version 5.15.0-1035 linux-tools-5.15.0-1036-aws - Linux kernel version specific tools for version 5.15.0-1036 linux-tools-5.15.0-1036-azure - Linux kernel version specific tools for version 5.15.0-1036 linux-tools-5.15.0-1036-gcp - Linux kernel version specific tools for version 5.15.0-1036 linux-tools-5.15.0-1036-gke - Linux kernel version specific tools for version 5.15.0-1036 linux-tools-5.15.0-1036-ibm - Linux kernel version specific tools for version 5.15.0-1036 linux-tools-5.15.0-1036-intel-iotg - Linux kernel version specific tools for version 5.15.0-1036 linux-tools-5.15.0-1036-oracle - Oracle Linux kernel version specific tools for version 5.15.0-1036 linux-tools-5.15.0-1037-aws - Linux kernel version specific tools for version 5.15.0-1037 linux-tools-5.15.0-1037-azure - Linux kernel version specific tools for version 5.15.0-1037 linux-tools-5.15.0-1037-gcp - Linux kernel version specific tools for version 5.15.0-1037 linux-tools-5.15.0-1037-gke - Linux kernel version specific tools for version 5.15.0-1037 linux-tools-5.15.0-1037-ibm - Linux kernel version specific tools for version 5.15.0-1037 linux-tools-5.15.0-1037-intel-iotg - Linux kernel version specific tools for version 5.15.0-1037 linux-tools-5.15.0-1037-kvm - Linux kernel version specific tools for version 5.15.0-1037 linux-tools-5.15.0-1037-nvidia - Linux kernel version specific tools for version 5.15.0-1037 linux-tools-5.15.0-1037-nvidia-lowlatency - Linux kernel version specific tools for version 5.15.0-1037 linux-tools-5.15.0-1037-oracle - Oracle Linux kernel version specific tools for version 5.15.0-1037 linux-tools-5.15.0-1038-aws - Linux kernel version specific tools for version 5.15.0-1038 linux-tools-5.15.0-1038-azure - Linux kernel version specific tools for version 5.15.0-1038 linux-tools-5.15.0-1038-gcp - Linux kernel version specific tools for version 5.15.0-1038 linux-tools-5.15.0-1038-gke - Linux kernel version specific tools for version 5.15.0-1038 linux-tools-5.15.0-1038-ibm - Linux kernel version specific tools for version 5.15.0-1038 linux-tools-5.15.0-1038-intel-iotg - Linux kernel version specific tools for version 5.15.0-1038 linux-tools-5.15.0-1038-kvm - Linux kernel version specific tools for version 5.15.0-1038 linux-tools-5.15.0-1038-oracle - Oracle Linux kernel version specific tools for version 5.15.0-1038 linux-tools-5.15.0-1039-aws - Linux kernel version specific tools for version 5.15.0-1039 linux-tools-5.15.0-1039-azure - Linux kernel version specific tools for version 5.15.0-1039 linux-tools-5.15.0-1039-gcp - Linux kernel version specific tools for version 5.15.0-1039 linux-tools-5.15.0-1039-gke - Linux kernel version specific tools for version 5.15.0-1039 linux-tools-5.15.0-1039-intel-iotg - Linux kernel version specific tools for version 5.15.0-1039 linux-tools-5.15.0-1039-kvm - Linux kernel version specific tools for version 5.15.0-1039 linux-tools-5.15.0-1039-nvidia - Linux kernel version specific tools for version 5.15.0-1039 linux-tools-5.15.0-1039-nvidia-lowlatency - Linux kernel version specific tools for version 5.15.0-1039 linux-tools-5.15.0-1039-oracle - Oracle Linux kernel version specific tools for version 5.15.0-1039 linux-tools-5.15.0-1040-aws - Linux kernel version specific tools for version 5.15.0-1040 linux-tools-5.15.0-1040-azure - Linux kernel version specific tools for version 5.15.0-1040 linux-tools-5.15.0-1040-gcp - Linux kernel version specific tools for version 5.15.0-1040 linux-tools-5.15.0-1040-gke - Linux kernel version specific tools for version 5.15.0-1040 linux-tools-5.15.0-1040-ibm - Linux kernel version specific tools for version 5.15.0-1040 linux-tools-5.15.0-1040-intel-iotg - Linux kernel version specific tools for version 5.15.0-1040 linux-tools-5.15.0-1040-kvm - Linux kernel version specific tools for version 5.15.0-1040 linux-tools-5.15.0-1040-oracle - Oracle Linux kernel version specific tools for version 5.15.0-1040 linux-tools-5.15.0-1041-azure - Linux kernel version specific tools for version 5.15.0-1041 linux-tools-5.15.0-1041-gcp - Linux kernel version specific tools for version 5.15.0-1041 linux-tools-5.15.0-1041-gke - Linux kernel version specific tools for version 5.15.0-1041 linux-tools-5.15.0-1041-ibm - Linux kernel version specific tools for version 5.15.0-1041 linux-tools-5.15.0-1041-kvm - Linux kernel version specific tools for version 5.15.0-1041 linux-tools-5.15.0-1041-oracle - Oracle Linux kernel version specific tools for version 5.15.0-1041 linux-tools-5.15.0-1042-aws - Linux kernel version specific tools for version 5.15.0-1042 linux-tools-5.15.0-1042-azure - Linux kernel version specific tools for version 5.15.0-1042 linux-tools-5.15.0-1042-gcp - Linux kernel version specific tools for version 5.15.0-1042 linux-tools-5.15.0-1042-gke - Linux kernel version specific tools for version 5.15.0-1042 linux-tools-5.15.0-1042-kvm - Linux kernel version specific tools for version 5.15.0-1042 linux-tools-5.15.0-1042-oracle - Oracle Linux kernel version specific tools for version 5.15.0-1042 linux-tools-5.15.0-1043-aws - Linux kernel version specific tools for version 5.15.0-1043 linux-tools-5.15.0-1043-intel-iotg - Linux kernel version specific tools for version 5.15.0-1043 linux-tools-5.15.0-1044-aws - Linux kernel version specific tools for version 5.15.0-1044 linux-tools-5.15.0-1044-azure - Linux kernel version specific tools for version 5.15.0-1044 linux-tools-5.15.0-1044-gcp - Linux kernel version specific tools for version 5.15.0-1044 linux-tools-5.15.0-1044-gke - Linux kernel version specific tools for version 5.15.0-1044 linux-tools-5.15.0-1044-kvm - Linux kernel version specific tools for version 5.15.0-1044 linux-tools-5.15.0-1044-oracle - Oracle Linux kernel version specific tools for version 5.15.0-1044 linux-tools-5.15.0-1045-aws - Linux kernel version specific tools for version 5.15.0-1045 linux-tools-5.15.0-1045-azure - Linux kernel version specific tools for version 5.15.0-1045 linux-tools-5.15.0-1045-gcp - Linux kernel version specific tools for version 5.15.0-1045 linux-tools-5.15.0-1045-gke - Linux kernel version specific tools for version 5.15.0-1045 linux-tools-5.15.0-1045-kvm - Linux kernel version specific tools for version 5.15.0-1045 linux-tools-5.15.0-1045-oracle - Oracle Linux kernel version specific tools for version 5.15.0-1045 linux-tools-5.15.0-1046-azure - Linux kernel version specific tools for version 5.15.0-1046 linux-tools-5.15.0-1046-oracle - Oracle Linux kernel version specific tools for version 5.15.0-1046 linux-tools-5.15.0-1047-aws - Linux kernel version specific tools for version 5.15.0-1047 linux-tools-5.15.0-1047-azure - Linux kernel version specific tools for version 5.15.0-1047 linux-tools-5.15.0-1048-aws - Linux kernel version specific tools for version 5.15.0-1048 linux-tools-5.15.0-1049-azure - Linux kernel version specific tools for version 5.15.0-1049 linux-tools-5.15.0-1050-azure - Linux kernel version specific tools for version 5.15.0-1050 linux-tools-5.15.0-72 - Linux kernel version specific tools for version 5.15.0-72 linux-tools-5.15.0-72-generic - Linux kernel version specific tools for version 5.15.0-72 linux-tools-5.15.0-72-lowlatency - Linux kernel version specific tools for version 5.15.0-72 linux-tools-5.15.0-73 - Linux kernel version specific tools for version 5.15.0-73 linux-tools-5.15.0-73-generic - Linux kernel version specific tools for version 5.15.0-73 linux-tools-5.15.0-73-lowlatency - Linux kernel version specific tools for version 5.15.0-73 linux-tools-5.15.0-75 - Linux kernel version specific tools for version 5.15.0-75 linux-tools-5.15.0-75-generic - Linux kernel version specific tools for version 5.15.0-75 linux-tools-5.15.0-75-lowlatency - Linux kernel version specific tools for version 5.15.0-75 linux-tools-5.15.0-76-lowlatency - Linux kernel version specific tools for version 5.15.0-76 linux-tools-5.15.0-78 - Linux kernel version specific tools for version 5.15.0-78 linux-tools-5.15.0-78-generic - Linux kernel version specific tools for version 5.15.0-78 linux-tools-5.15.0-78-lowlatency - Linux kernel version specific tools for version 5.15.0-78 linux-tools-5.15.0-79 - Linux kernel version specific tools for version 5.15.0-79 linux-tools-5.15.0-79-generic - Linux kernel version specific tools for version 5.15.0-79 linux-tools-5.15.0-79-lowlatency - Linux kernel version specific tools for version 5.15.0-79 linux-tools-5.15.0-82 - Linux kernel version specific tools for version 5.15.0-82 linux-tools-5.15.0-82-generic - Linux kernel version specific tools for version 5.15.0-82 linux-tools-5.15.0-82-lowlatency - Linux kernel version specific tools for version 5.15.0-82 linux-tools-5.15.0-83 - Linux kernel version specific tools for version 5.15.0-83 linux-tools-5.15.0-83-generic - Linux kernel version specific tools for version 5.15.0-83 linux-tools-5.15.0-83-lowlatency - Linux kernel version specific tools for version 5.15.0-83 linux-tools-5.15.0-84 - Linux kernel version specific tools for version 5.15.0-84 linux-tools-5.15.0-84-generic - Linux kernel version specific tools for version 5.15.0-84 linux-tools-5.15.0-84-lowlatency - Linux kernel version specific tools for version 5.15.0-84 linux-tools-5.15.0-86 - Linux kernel version specific tools for version 5.15.0-86 linux-tools-5.15.0-86-generic - Linux kernel version specific tools for version 5.15.0-86 linux-tools-5.15.0-86-lowlatency - Linux kernel version specific tools for version 5.15.0-86 linux-tools-5.15.0-87 - Linux kernel version specific tools for version 5.15.0-87 linux-tools-5.15.0-87-generic - Linux kernel version specific tools for version 5.15.0-87 linux-tools-5.15.0-87-lowlatency - Linux kernel version specific tools for version 5.15.0-87 linux-tools-5.17.0-1031-oem - Linux kernel version specific tools for version 5.17.0-1031 linux-tools-5.17.0-1032-oem - Linux kernel version specific tools for version 5.17.0-1032 linux-tools-5.17.0-1033-oem - Linux kernel version specific tools for version 5.17.0-1033 linux-tools-5.17.0-1034-oem - Linux kernel version specific tools for version 5.17.0-1034 linux-tools-5.17.0-1035-oem - Linux kernel version specific tools for version 5.17.0-1035 linux-tools-5.19.0-1022-gcp - Linux kernel version specific tools for version 5.19.0-1022 linux-tools-5.19.0-1023-oracle - Oracle Linux kernel version specific tools for version 5.19.0-1023 linux-tools-5.19.0-1024-aws - Linux kernel version specific tools for version 5.19.0-1024 linux-tools-5.19.0-1024-gcp - Linux kernel version specific tools for version 5.19.0-1024 linux-tools-5.19.0-1024-lowlatency - Linux kernel version specific tools for version 5.19.0-1024 linux-tools-5.19.0-1024-oracle - Oracle Linux kernel version specific tools for version 5.19.0-1024 linux-tools-5.19.0-1025-aws - Linux kernel version specific tools for version 5.19.0-1025 linux-tools-5.19.0-1025-azure - Linux kernel version specific tools for version 5.19.0-1025 linux-tools-5.19.0-1025-gcp - Linux kernel version specific tools for version 5.19.0-1025 linux-tools-5.19.0-1025-lowlatency - Linux kernel version specific tools for version 5.19.0-1025 linux-tools-5.19.0-1025-oracle - Oracle Linux kernel version specific tools for version 5.19.0-1025 linux-tools-5.19.0-1026-aws - Linux kernel version specific tools for version 5.19.0-1026 linux-tools-5.19.0-1026-azure - Linux kernel version specific tools for version 5.19.0-1026 linux-tools-5.19.0-1026-gcp - Linux kernel version specific tools for version 5.19.0-1026 linux-tools-5.19.0-1026-oracle - Oracle Linux kernel version specific tools for version 5.19.0-1026 linux-tools-5.19.0-1027-aws - Linux kernel version specific tools for version 5.19.0-1027 linux-tools-5.19.0-1027-azure - Linux kernel version specific tools for version 5.19.0-1027 linux-tools-5.19.0-1027-gcp - Linux kernel version specific tools for version 5.19.0-1027 linux-tools-5.19.0-1027-lowlatency - Linux kernel version specific tools for version 5.19.0-1027 linux-tools-5.19.0-1027-oracle - Oracle Linux kernel version specific tools for version 5.19.0-1027 linux-tools-5.19.0-1028-aws - Linux kernel version specific tools for version 5.19.0-1028 linux-tools-5.19.0-1028-lowlatency - Linux kernel version specific tools for version 5.19.0-1028 linux-tools-5.19.0-1029-aws - Linux kernel version specific tools for version 5.19.0-1029 linux-tools-5.19.0-1030-gcp - Linux kernel version specific tools for version 5.19.0-1030 linux-tools-5.19.0-1030-lowlatency - Linux kernel version specific tools for version 5.19.0-1030 linux-tools-5.19.0-41-generic - Linux kernel version specific tools for version 5.19.0-41 linux-tools-5.19.0-42-generic - Linux kernel version specific tools for version 5.19.0-42 linux-tools-5.19.0-43-generic - Linux kernel version specific tools for version 5.19.0-43 linux-tools-5.19.0-45-generic - Linux kernel version specific tools for version 5.19.0-45 linux-tools-5.19.0-46-generic - Linux kernel version specific tools for version 5.19.0-46 linux-tools-5.19.0-50-generic - Linux kernel version specific tools for version 5.19.0-50 linux-tools-6.0.0-1016-oem - Linux kernel version specific tools for version 6.0.0-1016 linux-tools-6.0.0-1017-oem - Linux kernel version specific tools for version 6.0.0-1017 linux-tools-6.0.0-1018-oem - Linux kernel version specific tools for version 6.0.0-1018 linux-tools-6.0.0-1019-oem - Linux kernel version specific tools for version 6.0.0-1019 linux-tools-6.0.0-1020-oem - Linux kernel version specific tools for version 6.0.0-1020 linux-tools-6.0.0-1021-oem - Linux kernel version specific tools for version 6.0.0-1021 linux-tools-6.1.0-1012-oem - Linux kernel version specific tools for version 6.1.0-1012 linux-tools-6.1.0-1013-oem - Linux kernel version specific tools for version 6.1.0-1013 linux-tools-6.1.0-1014-oem - Linux kernel version specific tools for version 6.1.0-1014 linux-tools-6.1.0-1015-oem - Linux kernel version specific tools for version 6.1.0-1015 linux-tools-6.1.0-1016-oem - Linux kernel version specific tools for version 6.1.0-1016 linux-tools-6.1.0-1017-oem - Linux kernel version specific tools for version 6.1.0-1017 linux-tools-6.1.0-1019-oem - Linux kernel version specific tools for version 6.1.0-1019 linux-tools-6.1.0-1020-oem - Linux kernel version specific tools for version 6.1.0-1020 linux-tools-6.1.0-1021-oem - Linux kernel version specific tools for version 6.1.0-1021 linux-tools-6.1.0-1022-oem - Linux kernel version specific tools for version 6.1.0-1022 linux-tools-6.1.0-1023-oem - Linux kernel version specific tools for version 6.1.0-1023 linux-tools-6.1.0-1024-oem - Linux kernel version specific tools for version 6.1.0-1024 linux-tools-6.2.0-1003-nvidia - Linux kernel version specific tools for version 6.2.0-1003 linux-tools-6.2.0-1005-aws - Linux kernel version specific tools for version 6.2.0-1005 linux-tools-6.2.0-1005-azure - Linux kernel version specific tools for version 6.2.0-1005 linux-tools-6.2.0-1006-aws - Linux kernel version specific tools for version 6.2.0-1006 linux-tools-6.2.0-1006-azure - Linux kernel version specific tools for version 6.2.0-1006 linux-tools-6.2.0-1007-aws - Linux kernel version specific tools for version 6.2.0-1007 linux-tools-6.2.0-1007-azure - Linux kernel version specific tools for version 6.2.0-1007 linux-tools-6.2.0-1008-aws - Linux kernel version specific tools for version 6.2.0-1008 linux-tools-6.2.0-1008-azure - Linux kernel version specific tools for version 6.2.0-1008 linux-tools-6.2.0-1008-lowlatency - Linux kernel version specific tools for version 6.2.0-1008 linux-tools-6.2.0-1009-aws - Linux kernel version specific tools for version 6.2.0-1009 linux-tools-6.2.0-1009-gcp - Linux kernel version specific tools for version 6.2.0-1009 linux-tools-6.2.0-1009-lowlatency - Linux kernel version specific tools for version 6.2.0-1009 linux-tools-6.2.0-1009-nvidia - Linux kernel version specific tools for version 6.2.0-1009 linux-tools-6.2.0-1010-aws - Linux kernel version specific tools for version 6.2.0-1010 linux-tools-6.2.0-1010-gcp - Linux kernel version specific tools for version 6.2.0-1010 linux-tools-6.2.0-1010-nvidia - Linux kernel version specific tools for version 6.2.0-1010 linux-tools-6.2.0-1011-aws - Linux kernel version specific tools for version 6.2.0-1011 linux-tools-6.2.0-1011-azure - Linux kernel version specific tools for version 6.2.0-1011 linux-tools-6.2.0-1011-gcp - Linux kernel version specific tools for version 6.2.0-1011 linux-tools-6.2.0-1011-lowlatency - Linux kernel version specific tools for version 6.2.0-1011 linux-tools-6.2.0-1012-aws - Linux kernel version specific tools for version 6.2.0-1012 linux-tools-6.2.0-1012-azure - Linux kernel version specific tools for version 6.2.0-1012 linux-tools-6.2.0-1012-gcp - Linux kernel version specific tools for version 6.2.0-1012 linux-tools-6.2.0-1012-lowlatency - Linux kernel version specific tools for version 6.2.0-1012 linux-tools-6.2.0-1013-aws - Linux kernel version specific tools for version 6.2.0-1013 linux-tools-6.2.0-1013-gcp - Linux kernel version specific tools for version 6.2.0-1013 linux-tools-6.2.0-1013-lowlatency - Linux kernel version specific tools for version 6.2.0-1013 linux-tools-6.2.0-1013-oracle - Oracle Linux kernel version specific tools for version 6.2.0-1013 linux-tools-6.2.0-1014-aws - Linux kernel version specific tools for version 6.2.0-1014 linux-tools-6.2.0-1014-azure - Linux kernel version specific tools for version 6.2.0-1014 linux-tools-6.2.0-1014-gcp - Linux kernel version specific tools for version 6.2.0-1014 linux-tools-6.2.0-1014-lowlatency - Linux kernel version specific tools for version 6.2.0-1014 linux-tools-6.2.0-1014-oracle - Oracle Linux kernel version specific tools for version 6.2.0-1014 linux-tools-6.2.0-1015-azure - Linux kernel version specific tools for version 6.2.0-1015 linux-tools-6.2.0-1015-lowlatency - Linux kernel version specific tools for version 6.2.0-1015 linux-tools-6.2.0-1016-gcp - Linux kernel version specific tools for version 6.2.0-1016 linux-tools-6.2.0-1017-gcp - Linux kernel version specific tools for version 6.2.0-1017 linux-tools-6.2.0-25-generic - Linux kernel version specific tools for version 6.2.0-25 linux-tools-6.2.0-26-generic - Linux kernel version specific tools for version 6.2.0-26 linux-tools-6.2.0-31-generic - Linux kernel version specific tools for version 6.2.0-31 linux-tools-6.2.0-32-generic - Linux kernel version specific tools for version 6.2.0-32 linux-tools-6.2.0-33-generic - Linux kernel version specific tools for version 6.2.0-33 linux-tools-6.2.0-34-generic - Linux kernel version specific tools for version 6.2.0-34 linux-tools-6.2.0-35-generic - Linux kernel version specific tools for version 6.2.0-35 linux-tools-6.5.0-1003-oem - Linux kernel version specific tools for version 6.5.0-1003 linux-tools-6.5.0-1004-oem - Linux kernel version specific tools for version 6.5.0-1004 linux-tools-aws-edge - Linux kernel versioned tools for Amazon Web Services (AWS) systems. linux-tools-aws-lts-22.04 - Linux kernel versioned tools for Amazon Web Services (AWS) systems. linux-tools-azure-edge - Linux kernel versioned tools for Azure systems. linux-tools-azure-fde - Linux kernel versioned tools for Azure systems. linux-tools-azure-fde-edge - Linux kernel versioned tools for Azure systems. linux-tools-azure-fde-lts-22.04 - Linux kernel versioned tools for Azure systems. linux-tools-azure-lts-22.04 - Linux kernel versioned tools for Azure systems. linux-tools-gcp-edge - Google Cloud Platform (GCP) Linux kernel tools linux-tools-gcp-lts-22.04 - Google Cloud Platform (GCP) Linux kernel tools linux-tools-nvidia - Linux kernel tools for Nvidia systems. linux-tools-nvidia-6.2 - Nvidia Linux kernel tools linux-tools-nvidia-edge - Nvidia Linux kernel tools linux-tools-nvidia-hwe-22.04 - Nvidia Linux kernel tools linux-tools-nvidia-hwe-22.04-edge - Nvidia Linux kernel tools linux-tools-nvidia-lowlatency - Linux kernel tools for Nvidia systems. linux-tools-oem-22.04a - OEM Linux kernel tools (dummy transitional package) linux-tools-oem-22.04b - OEM Linux kernel tools (dummy transitional package) linux-tools-oem-22.04c - OEM Linux kernel tools linux-tools-oem-22.04d - OEM Linux kernel tools linux-tools-oracle-edge - Linux kernel versioned tools for Oracle systems. linux-tools-oracle-lts-22.04 - Linux kernel versioned tools for Oracle systems. linux-gkeop-tools-5.15.0-1019 - Linux kernel version specific tools for version 5.15.0-1019 linux-gkeop-tools-5.15.0-1020 - Linux kernel version specific tools for version 5.15.0-1020 linux-gkeop-tools-5.15.0-1021 - Linux kernel version specific tools for version 5.15.0-1021 linux-gkeop-tools-5.15.0-1022 - Linux kernel version specific tools for version 5.15.0-1022 linux-gkeop-tools-5.15.0-1023 - Linux kernel version specific tools for version 5.15.0-1023 linux-gkeop-tools-5.15.0-1024 - Linux kernel version specific tools for version 5.15.0-1024 linux-gkeop-tools-5.15.0-1025 - Linux kernel version specific tools for version 5.15.0-1025 linux-gkeop-tools-5.15.0-1026 - Linux kernel version specific tools for version 5.15.0-1026 linux-gkeop-tools-5.15.0-1027 - Linux kernel version specific tools for version 5.15.0-1027 linux-gkeop-tools-5.15.0-1028 - Linux kernel version specific tools for version 5.15.0-1028 linux-gkeop-tools-5.15.0-1030 - Linux kernel version specific tools for version 5.15.0-1030 linux-gkeop-tools-5.15.0-1031 - Linux kernel version specific tools for version 5.15.0-1031 linux-nvidia-5.19-tools-5.19.0-1010 - Linux kernel version specific tools for version 5.19.0-1010 linux-nvidia-5.19-tools-5.19.0-1014 - Linux kernel version specific tools for version 5.19.0-1014 linux-oracle-5.19-tools-5.19.0-1022 - Oracle Linux kernel version specific tools for version 5.19.0-1022 linux-realtime-tools-5.15.0-1032 - Linux kernel version specific tools for version 5.15.0-1032 linux-tools-5.15.0-1019-gkeop - Linux kernel version specific tools for version 5.15.0-1019 linux-tools-5.15.0-1020-gkeop - Linux kernel version specific tools for version 5.15.0-1020 linux-tools-5.15.0-1021-gkeop - Linux kernel version specific tools for version 5.15.0-1021 linux-tools-5.15.0-1022-gkeop - Linux kernel version specific tools for version 5.15.0-1022 linux-tools-5.15.0-1023-gkeop - Linux kernel version specific tools for version 5.15.0-1023 linux-tools-5.15.0-1024-gkeop - Linux kernel version specific tools for version 5.15.0-1024 linux-tools-5.15.0-1025-gkeop - Linux kernel version specific tools for version 5.15.0-1025 linux-tools-5.15.0-1026-gkeop - Linux kernel version specific tools for version 5.15.0-1026 linux-tools-5.15.0-1027-gkeop - Linux kernel version specific tools for version 5.15.0-1027 linux-tools-5.15.0-1028-gkeop - Linux kernel version specific tools for version 5.15.0-1028 linux-tools-5.15.0-1030-gkeop - Linux kernel version specific tools for version 5.15.0-1030 linux-tools-5.15.0-1031-gkeop - Linux kernel version specific tools for version 5.15.0-1031 linux-tools-5.15.0-1032-realtime - Linux kernel version specific tools for version 5.15.0-1032 linux-tools-5.19.0-1010-nvidia - Linux kernel version specific tools for version 5.19.0-1010 linux-tools-5.19.0-1010-nvidia-lowlatency - Linux kernel version specific tools for version 5.19.0-1010 linux-tools-5.19.0-1014-nvidia - Linux kernel version specific tools for version 5.19.0-1014 linux-tools-5.19.0-1014-nvidia-lowlatency - Linux kernel version specific tools for version 5.19.0-1014 linux-tools-5.19.0-1022-oracle - Oracle Linux kernel version specific tools for version 5.19.0-1022 linux-tools-gkeop - Generic Linux kernel tools linux-tools-gkeop-5.15 - Generic Linux kernel tools linux-tools-nvidia-5.19 - Nvidia-5.19 Linux kernel tools linux-tools-nvidia-lowlatency-5.19 - Nvidia-5.19 Linux kernel tools linux-tools-nvidia-lowlatency-edge - Nvidia-5.19 Linux kernel tools linux-tools-realtime - Linux kernel versioned tools for real-time systems. linux-tools-azure-fde-5.19-edge - Linux kernel versioned tools for Azure systems. uname -a 查看当前 linux 内核版本号\n~$ uname -a Linux LUYANG 5.15.90.1-microsoft-standard-WSL2 #1 SMP Fri Jan 27 02:56:13 UTC 2023 x86_64 x86_64 x86_64 GNU/Linux 因此我选择了 linux-tools-5.15.0-87-generic\nlinux-tools-5.15.0-72 - Linux kernel version specific tools for version 5.15.0-72 linux-tools-5.15.0-72-generic - Linux kernel version specific tools for version 5.15.0-72 linux-tools-5.15.0-72-lowlatency - Linux kernel version specific tools for version 5.15.0-72 linux-tools-5.15.0-73 - Linux kernel version specific tools for version 5.15.0-73 linux-tools-5.15.0-73-generic - Linux kernel version specific tools for version 5.15.0-73 linux-tools-5.15.0-73-lowlatency - Linux kernel version specific tools for version 5.15.0-73 linux-tools-5.15.0-75 - Linux kernel version specific tools for version 5.15.0-75 linux-tools-5.15.0-75-generic - Linux kernel version specific tools for version 5.15.0-75 linux-tools-5.15.0-75-lowlatency - Linux kernel version specific tools for version 5.15.0-75 linux-tools-5.15.0-76-lowlatency - Linux kernel version specific tools for version 5.15.0-76 linux-tools-5.15.0-78 - Linux kernel version specific tools for version 5.15.0-78 linux-tools-5.15.0-78-generic - Linux kernel version specific tools for version 5.15.0-78 linux-tools-5.15.0-78-lowlatency - Linux kernel version specific tools for version 5.15.0-78 linux-tools-5.15.0-79 - Linux kernel version specific tools for version 5.15.0-79 linux-tools-5.15.0-79-generic - Linux kernel version specific tools for version 5.15.0-79 linux-tools-5.15.0-79-lowlatency - Linux kernel version specific tools for version 5.15.0-79 linux-tools-5.15.0-82 - Linux kernel version specific tools for version 5.15.0-82 linux-tools-5.15.0-82-generic - Linux kernel version specific tools for version 5.15.0-82 linux-tools-5.15.0-82-lowlatency - Linux kernel version specific tools for version 5.15.0-82 linux-tools-5.15.0-83 - Linux kernel version specific tools for version 5.15.0-83 linux-tools-5.15.0-83-generic - Linux kernel version specific tools for version 5.15.0-83 linux-tools-5.15.0-83-lowlatency - Linux kernel version specific tools for version 5.15.0-83 linux-tools-5.15.0-84 - Linux kernel version specific tools for version 5.15.0-84 linux-tools-5.15.0-84-generic - Linux kernel version specific tools for version 5.15.0-84 linux-tools-5.15.0-84-lowlatency - Linux kernel version specific tools for version 5.15.0-84 linux-tools-5.15.0-86 - Linux kernel version specific tools for version 5.15.0-86 linux-tools-5.15.0-86-generic - Linux kernel version specific tools for version 5.15.0-86 linux-tools-5.15.0-86-lowlatency - Linux kernel version specific tools for version 5.15.0-86 linux-tools-5.15.0-87 - Linux kernel version specific tools for version 5.15.0-87 linux-tools-5.15.0-87-generic - Linux kernel version specific tools for version 5.15.0-87 linux-tools-5.15.0-87-lowlatency - Linux kernel version specific tools for version 5.15.0-87 windows 利用 usbipd bind \u0026amp; attach adb device Notice： usbipd.exe 命令需要在管理员身份运行的 powershell 中执行  usbipd.exe wsl -h usbipd-win 3.2.0 Description: Convenience commands for attaching and detaching devices to Windows Subsystem for Linux. Usage: usbipd wsl [command] [options] Options: -?, -h, --help Show help and usage information Commands: attach Attach a USB device to a WSL instance detach Detach a USB device from a WSL instance list List USB devices  usbipd.exe wsl attach -h usbipd-win 3.2.0 Description: Attaches a USB device to a WSL instance. The first time a device is attached this command will include a \u0026#39;bind\u0026#39;, for which administrator privileges are required. Subsequent attaches can be done with standard user privileges. Exactly one of the options \u0026#39;--busid\u0026#39; or \u0026#39;--hardware-id\u0026#39; is required. Usage: usbipd wsl attach [options] Options: -a, --auto-attach Automatically re-attach when the device is detached or unplugged -b, --busid \u0026lt;BUSID\u0026gt; Attach device having \u0026lt;BUSID\u0026gt; -d, --distribution \u0026lt;NAME\u0026gt; Name of the WSL distribution to attach to -i, --hardware-id \u0026lt;VID:PID\u0026gt; Attach device having \u0026lt;VID\u0026gt;:\u0026lt;PID\u0026gt; -?, -h, --help Show help and usage information  usbipd wsl list BUSID VID:PID DEVICE STATE 2-1 30c9:0096 HP 5MP Camera, HP IR Camera, Camera DFU Device Not attached 2-10 8087:0033 英特尔(R) 无线 Bluetooth(R) Not attached 4-2 18d1:4ee4 bst usb gadget function Not attached usbipd: warning: USB filter \u0026#39;USBPcap\u0026#39; is known to be incompatible with this software; \u0026#39;bind --force\u0026#39; will be required. usbipd wsl attach -b \u0026lt;busid\u0026gt; usbipd wsl attach -i \u0026lt;VID:PID\u0026gt;  usbipd.exe wsl attach -i 18d1:4ee4 usbipd: info: Device with hardware-id \u0026#39;18d1:4ee4\u0026#39; found at busid \u0026#39;2-3\u0026#39;. usbipd: info: Using default WSL distribution \u0026#39;Ubuntu\u0026#39;; specify the \u0026#39;--distribution\u0026#39; option to select a different one. usbipd: warning: USB filter \u0026#39;USBPcap\u0026#39; is known to be incompatible with this software; \u0026#39;bind --force\u0026#39; will be required. usbip: error: Attach Request for 2-3 failed - Device busy (exported) usbipd: error: Failed to attach device with busid \u0026#39;2-3\u0026#39;.  usbipd.exe bind -h usbipd-win 3.2.0 Description: Registers a single USB device for sharing, so it can be attached to other machines. Unless the --force option is used, shared devices remain available to the host until they are attached to another machine. Exactly one of the options \u0026#39;--busid\u0026#39; or \u0026#39;--hardware-id\u0026#39; is required. Usage: usbipd bind [options] Options: -b, --busid \u0026lt;BUSID\u0026gt; Share device having \u0026lt;BUSID\u0026gt; -f, --force Force binding; the host cannot use the device -i, --hardware-id \u0026lt;VID:PID\u0026gt; Share device having \u0026lt;VID\u0026gt;:\u0026lt;PID\u0026gt; -?, -h, --help Show help and usage information  usbipd.exe bind -i 18d1:4ee4 -f usbipd: info: Device with hardware-id \u0026#39;18d1:4ee4\u0026#39; found at busid \u0026#39;2-3\u0026#39;. usbipd: warning: A reboot may be required before the changes take effect. 按照说明重启电脑之后：\n usbipd.exe bind -i 18d1:4ee4 -f usbipd: info: Device with hardware-id \u0026#39;18d1:4ee4\u0026#39; found at busid \u0026#39;2-3\u0026#39;. usbipd: info: Device with busid \u0026#39;2-3\u0026#39; was already shared. 此时管理员身份运行 powershell 执行如下命令：\n usbipd.exe wsl attach -i 18d1:4ee4 -a usbipd: info: Device with hardware-id \u0026#39;18d1:4ee4\u0026#39; found at busid \u0026#39;2-3\u0026#39;. usbipd: info: Using default WSL distribution \u0026#39;Ubuntu\u0026#39;; specify the \u0026#39;--distribution\u0026#39; option to select a different one. usbipd: info: Starting endless attach loop; press Ctrl+C to quit. Attached Detached usbip: error: Attach Request for 2-3 failed - Device not found Attached 加上 -a 选项后 attach 命令不会退出，会持续监听 -i 指定的设备，插拔该 usb 设备会自动 attach。如上命令可以看出有一个插拔的过程。\nluyang@LUYANG:~$ adb devices * daemon not running; starting now at tcp:5037 * daemon started successfully List of devices attached fada-018b0e6b656d0002 device 参考链接 https://devblogs.microsoft.com/commandline/connecting-usb-devices-to-wsl/\n","date":"26 October, 2023","id":19,"permalink":"/posts/windows_wsl_ubuntu_adb_%E9%85%8D%E7%BD%AE/","summary":"windows 可以识别 adb devices","tags":"android adb wsl usb usbip","title":"Windows WSL ubuntu adb 配置"},{"content":"下载一份 Linux 内核代码，拷贝一份 toos/spi/spidev_test.c 文件（只需要这一个文件）\n要在Android 7.1上编译spidev_test.c，可以参考以下步骤：\n准备工作 ~~确保内核支持SPI设备：~~\n在内核配置中启用SPI设备支持，确保CONFIG_SPI和CONFIG_SPI_SPIDEV选项被启用。 修改设备树文件，添加SPI控制器和SPI设备节点。 创建Android.mk文件：\n在system/extras目录下创建一个名为spi的文件夹。 将spidev_test.c文件复制到spi文件夹中。 在spi文件夹中创建一个Android.mk文件，内容如下： LOCAL_PATH := $(call my-dir) include $(CLEAR_VARS) LOCAL_MODULE := spidev_test LOCAL_SRC_FILES := spidev_test.c LOCAL_MODULE_TAGS := optional include $(BUILD_EXECUTABLE) 编译步骤 编译spidev_test： 打开终端，切换到spi目录。 执行mm命令进行编译。这将在out/target/product/\u0026lt;your_device\u0026gt;/symbols/system目录下生成可执行文件spidev_test。 将可执行文件推送到设备： 使用adb push命令将spidev_test推送到设备上的某个目录，例如： adb push out/target/product/\u0026lt;your_device\u0026gt;/symbols/system/spidev_test /data/ 在设备上运行测试程序： 使用adb shell连接到设备，切换到包含spidev_test的目录，并运行程序： adb shell cd /data/ chmod 777 spidev_test ./spidev_test 注意事项 确保设备上已经正确配置了SPI设备节点，例如/dev/spidevX.Y，其中X是SPI控制器编号，Y是设备编号。 如果在编译或运行过程中遇到问题，检查内核配置和设备树文件是否正确设置，并确保所有必要的权限和依赖项都已满足。 adb 指定被操作设备 如果 PC 当前连接了多个正在运行 adb 的设备，可以通过 adb -s 指定操作特定设备\n\u0026gt;adb devices List of devices attached J6-9f81e1412b08443 device EE02FL9SR5 device adb -s \u0026lt;序列号\u0026gt; shell ","date":"26 June, 2023","id":20,"permalink":"/posts/android-7/","summary":"下载一份 Linux 内核代码，拷贝一份 toos/spi/spidev_test.c 文件（只需要这一个文件）","tags":"SPI spidev","title":"Android 7.1 build spidev_test.c"},{"content":"Sites http://www.duckduckgo.com - Search engine http://www.google.com - Search engine + more http://www.theregister.com - IT news http://slashdot.org - News for nerds http://news.ycombinator.com - Hacker news https://www.usenix.org/publications/login - USENIX ;login: magazine http://queue.acm.org - ACMqueue http://lwn.net/ - Linux Weekly News https://perf.wiki.kernel.org - Linux perf_events wiki https://ebpf.io - eBPF homepage http://seclists.org - Computer security mailing lists (Bugtraq, Full-Disclosure) http://www.insecure.org/tools.html - Top 75 security tools http://cryptome.org - Computer security and intelligence http://www.ietf.org/rfc.html - RFCs (network protocols) http://shelldorado.com - Shell scripting resource http://www.cpan.org - CPAN, Perl libraries http://www.povray.org - POV-Ray, a free computer graphics tool http://www.apcmag.com - Australian Personal Computer Magazine http://www.thangorodrim.net - Angband and Zangband http://www.confluence.org - Photos from every confluence (latitude/longitude) http://www.gutenberg.net - Project Gutenberg, book collection http://www.vim.org - Text editor http://mail.openjdk.java.net/pipermail/hotspot-compiler-dev - hotspot compiler dev mailing list Homepages https://www.bell-labs.com/usr/dmr/www - Dennis Ritchie\u0026rsquo;s home page http://www.ozatwar.com/ausarmy/ernestgregg.htm - Ernest Gregg, my grandfather, who served in Z Special Unit Blogs http://www.beginningwithi.com - Deirdré Straughan, which has many Brendan Gregg tagged posts https://netflixtechblog.com - Netflix tech blog https://jvns.ca - Julia Evans homepage and blog http://mechanical-sympathy.blogspot.com - Martin Thompson\u0026rsquo;s performance blog http://www.mysqlperformanceblog.com - MySQL Performance Blog http://taosecurity.blogspot.com - Computer security tips and reviews Other https://www.twitch.tv/somecodingguy - Ex-colleague live streamer https://www.twitch.tv/theprimeagen - Colleague live streamer ","date":"26 June, 2023","id":21,"permalink":"/posts/brendangregg_bookmarks/","summary":"","tags":"bookmark","title":"BrendanGregg_bookmarks"},{"content":"系统信息 $ lsb_release -a No LSB modules are available. Distributor ID: Ubuntu Description: Ubuntu 20.04.6 LTS Release: 20.04 Codename: focal $ uname -a Linux kang-HP-ProBook-440-14-inch-G10-Notebook-PC 5.15.0-67-generic #74~20.04.1-Ubuntu SMP Wed Feb 22 14:52:34 UTC 2023 x86_64 x86_64 x86_64 GNU/Linux 安装依赖 sudo apt update \u0026amp;\u0026amp; sudo apt upgrade sudo apt install binutils build-essential gcc make perl net-tools libncurses-dev \\ openssh-server git fakeroot libssl-dev bc flex libelf-dev bison \\ dwarves zstd Linux 源码下载 官网：https://www.kernel.org/pub/ Git：https://git.kernel.org/ ftp：http://ftp.sjtu.edu.cn/sites/ftp.kernel.org/pub/linux/kernel/ 拷贝 .config 配置文件 解压源代码并进入源码根目录，然后执行\ncp /boot/config-$(uname -r) .config 修改 .config 文件，左侧为修改后，解决编译报错问题\n编译 make menuconfig # 弹出的不做任何修改，直接保存。 make -j16 sudo make modules_install sudo make install $ sudo make modules_install SYMLINK /lib/modules/6.11.7/build INSTALL /lib/modules/6.11.7/modules.order INSTALL /lib/modules/6.11.7/modules.builtin INSTALL /lib/modules/6.11.7/modules.builtin.modinfo INSTALL /lib/modules/6.11.7/kernel/arch/x86/events/amd/amd-uncore.ko SIGN /lib/modules/6.11.7/kernel/arch/x86/events/amd/amd-uncore.ko INSTALL /lib/modules/6.11.7/kernel/arch/x86/events/intel/intel-cstate.ko SIGN /lib/modules/6.11.7/kernel/arch/x86/events/intel/intel-cstate.ko INSTALL /lib/modules/6.11.7/kernel/arch/x86/events/rapl.ko SIGN /lib/modules/6.11.7/kernel/arch/x86/events/rapl.ko INSTALL /lib/modules/6.11.7/kernel/arch/x86/kernel/cpu/mce/mce-inject.ko SIGN /lib/modules/6.11.7/kernel/arch/x86/kernel/cpu/mce/mce-inject.ko INSTALL /lib/modules/6.11.7/kernel/arch/x86/kernel/msr.ko SIGN /lib/modules/6.11.7/kernel/arch/x86/kernel/msr.ko INSTALL /lib/modules/6.11.7/kernel/arch/x86/kernel/cpuid.ko SIGN /lib/modules/6.11.7/kernel/arch/x86/kernel/cpuid.ko INSTALL /lib/modules/6.11.7/kernel/arch/x86/crypto/twofish-x86_64.ko SIGN /lib/modules/6.11.7/kernel/arch/x86/crypto/twofish-x86_64.ko INSTALL /lib/modules/6.11.7/kernel/arch/x86/crypto/twofish-x86_64-3way.ko SIGN /lib/modules/6.11.7/kernel/arch/x86/crypto/twofish-x86_64-3way.ko ...... $ sudo make install INSTALL /boot run-parts: executing /etc/kernel/postinst.d/initramfs-tools 6.11.7 /boot/vmlinuz-6.11.7 update-initramfs: Generating /boot/initrd.img-6.11.7 W: Possible missing firmware /lib/firmware/rtl_nic/rtl8126a-2.fw for module r8169 run-parts: executing /etc/kernel/postinst.d/unattended-upgrades 6.11.7 /boot/vmlinuz-6.11.7 run-parts: executing /etc/kernel/postinst.d/update-notifier 6.11.7 /boot/vmlinuz-6.11.7 run-parts: executing /etc/kernel/postinst.d/xx-update-initrd-links 6.11.7 /boot/vmlinuz-6.11.7 I: /boot/initrd.img.old is now a symlink to initrd.img-5.15.0-126-generic I: /boot/initrd.img is now a symlink to initrd.img-6.11.7 run-parts: executing /etc/kernel/postinst.d/zz-shim 6.11.7 /boot/vmlinuz-6.11.7 run-parts: executing /etc/kernel/postinst.d/zz-update-grub 6.11.7 /boot/vmlinuz-6.11.7 Sourcing file `/etc/default/grub\u0026#39; Sourcing file `/etc/default/grub.d/init-select.cfg\u0026#39; Generating grub configuration file ... Found linux image: /boot/vmlinuz-6.11.7 Found initrd image: /boot/initrd.img-6.11.7 Found linux image: /boot/vmlinuz-5.15.0-126-generic Found initrd image: /boot/initrd.img-5.15.0-126-generic Found linux image: /boot/vmlinuz-5.15.0-67-generic Found initrd image: /boot/initrd.img-5.15.0-67-generic Adding boot menu entry for UEFI Firmware Settings done $ sudo update-grub Sourcing file `/etc/default/grub\u0026#39; Sourcing file `/etc/default/grub.d/init-select.cfg\u0026#39; Generating grub configuration file ... Found linux image: /boot/vmlinuz-6.11.7 Found initrd image: /boot/initrd.img-6.11.7 Found linux image: /boot/vmlinuz-5.15.0-126-generic Found initrd image: /boot/initrd.img-5.15.0-126-generic Found linux image: /boot/vmlinuz-5.15.0-67-generic Found initrd image: /boot/initrd.img-5.15.0-67-generic Adding boot menu entry for UEFI Firmware Settings done 解决 WIFI 不工作 git://git.kernel.org/pub/scm/linux/kernel/git/firmware/linux-firmware.git sudo cp iwlwifi-* /lib/firmware/` sudo reboot ","date":"26 June, 2023","id":22,"permalink":"/posts/ubuntu_2004_%E5%8D%87%E7%BA%A7%E5%86%85%E6%A0%B8/","summary":"解压源代码并进入源码根目录，然后执行","tags":"ubuntu","title":"ubuntu 20.04 升级内核"},{"content":"安装 subversion sudo apt-get remove --purge subversion sudo apt-get update sudo apt-get install subversion 创建 SVN 用户 sudo adduser svn sudo adduser svn sudo sudo su svn 创建仓库目录 sudo mkdir /svn sudo mkdir /svn/repos sudo mkdir /svn/repos/public sudo chmod 777 -R /svn/repos/public sudo chown svn:svn -R /svn 创建版本库 sudo svnadmin create /svn/repos/public $ ls -lah /svn/repos/public total 32K drwxrwxrwx 6 svn svn 4.0K 6月 19 14:15 . drwxr-xr-x 3 svn svn 4.0K 6月 19 14:15 .. drwxr-xr-x 2 root root 4.0K 6月 19 14:15 conf drwxr-sr-x 6 root root 4.0K 6月 19 14:15 db -r--r--r-- 1 root root 2 6月 19 14:15 format drwxr-xr-x 2 root root 4.0K 6月 19 14:15 hooks drwxr-xr-x 2 root root 4.0K 6月 19 14:15 locks -rw-r--r-- 1 root root 246 6月 19 14:15 README.txt cd /svn/repos/public sudo chmod -R 777 db cd conf sudo cp svnserve.conf svnserve.conf.bak sudo vim svnserve.conf 取消注释：\n$ sudo diff -u svnserve.conf svnserve.conf.bak --- svnserve.conf 2023-06-19 13:27:33.473464875 +0800 +++ svnserve.conf.bak 2023-06-19 13:26:30.071350251 +0800 @@ -16,15 +16,15 @@ ### The sample settings below are the defaults and specify that anonymous ### users have read-only access to the repository, while authenticated ### users have read and write access to the repository. -anon-access = read -auth-access = write +# anon-access = read +# auth-access = write ### The password-db option controls the location of the password ### database file. Unless you specify a path starting with a /, ### the file\u0026#39;s location is relative to the directory containing ### this configuration file. ### If SASL is enabled (see below), this file will NOT be used. ### Uncomment the line below to use the default password file. -password-db = passwd +# password-db = passwd ### The authz-db option controls the location of the authorization ### rules for path-based access control. Unless you specify a path ### starting with a /, the file\u0026#39;s location is relative to the @@ -33,7 +33,7 @@ ### file in a Subversion repository. If you don\u0026#39;t specify an authz-db, ### no path-based access control is done. ### Uncomment the line below to use the default authorization file. -authz-db = authz +# authz-db = authz ### The groups-db option controls the location of the file with the ### group definitions and allows maintaining groups separately from the ### authorization rules. The groups-db file is of the same format as the 说明：（去掉前面的#，并且顶格）\nanon-access = none 匿名用户不可读 auth-access = write 权限用户可写 password-db = passwd 密码文件为 passwd authz-db = authz 权限文件为 authz 修改 passwd sudo cp passwd passwd.bak sudo vim passwd $ cat /svn/repos/public/conf/passwd ### This file is an example password file for svnserve. ### Its format is similar to that of svnserve.conf. As shown in the ### example below it contains one section labelled [users]. ### The name and password for each user follow, one account per line. [users] hanmeimei = iampassword lilei = helloworld 新增用户格式：名字 = 密码\n修改 authz sudo cp authz authz.bak sudo vim authz $ cat /svn/repos/public/conf/authz ### This file is an example authorization file for svnserve. ### Its format is identical to that of mod_authz_svn authorization ### files. ### As shown below each section defines authorizations for the path and ### (optional) repository specified by the section name. ### The authorizations follow. An authorization line can refer to: ### - a single user, ### - a group of users defined in a special [groups] section, ### - an alias defined in a special [aliases] section, ### - all authenticated users, using the \u0026#39;$authenticated\u0026#39; token, ### - only anonymous users, using the \u0026#39;$anonymous\u0026#39; token, ### - anyone, using the \u0026#39;*\u0026#39; wildcard. ### ### A match can be inverted by prefixing the rule with \u0026#39;~\u0026#39;. Rules can ### grant read (\u0026#39;r\u0026#39;) access, read-write (\u0026#39;rw\u0026#39;) access, or no access ### (\u0026#39;\u0026#39;). [aliases] # joe = /C=XZ/ST=Dessert/L=Snake City/O=Snake Oil, Ltd./OU=Research Institute/CN=Joe Average [groups] students = hanmeimei,lilei # harry_and_sally = harry,sally # harry_sally_and_joe = harry,sally,\u0026amp;joe # [/foo/bar] # harry = rw # \u0026amp;joe = r # * = # [repository:/baz/fuz] # @harry_and_sally = rw # * = r [public:/] @students = rw * = 启动服务 sudo su svn sudo svnserve -d -r /svn --listen-port 81 下载安装 windows 小乌龟 https://tortoisesvn.net/downloads.zh.html\n访问 svn 服务器 svn://10.0.0.:81/public ","date":"26 June, 2023","id":23,"permalink":"/posts/svn/","summary":"取消注释：","tags":"svn","title":"ubuntu 搭建 svn 服务器"},{"content":"适用于 Windows terminal + powershell\n安装 oh-my-posh Microsoft Store 中搜索并安装：oh-my-posh by jandedobbeleer\n使用图标字体 Nerd Fonts - Iconic font aggregator, glyphs/icons collection, \u0026amp; fonts patcher\n去这里下载一个自己喜欢的字体，并配置 windows terminal power shell profile 使用该字体。\n配置 profile 判断当前的 shell 类型：oh-my-posh get shell\nPS C:\\Users\\luyang\\Desktop\u0026gt; oh-my-posh get shell powershell 修改配置文件：\nnotepad $PROFILE 添加如下内容：\noh-my-posh init pwsh | Invoke-Expression 如果 notepad $PROFILE 报错，说配置文件不存在需要自己创建一个：\nNew-Item -Path $PROFILE -Type File -Force 加载配置：\n. $PROFILE Q\u0026amp;A 运行报错：\nWindows PowerShell 版权所有（C） Microsoft Corporation。保留所有权利。 安装最新的 PowerShell，了解新功能和改进！https://aka.ms/PSWindows . : 无法加载文件 C:\\Users\\luyang\\Documents\\WindowsPowerShell\\Microsoft.PowerShell_profile.ps1，因为在此系统上禁止运行脚 本。有关详细信息，请参阅 https:/go.microsoft.com/fwlink/?LinkID=135170 中的 about_Execution_Policies。 所在位置 行:1 字符: 3 + . \u0026#39;C:\\Users\\luyang\\Documents\\WindowsPowerShell\\Microsoft.PowerShell_pr ... + ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ + CategoryInfo : SecurityError: (:) []，PSSecurityException + FullyQualifiedErrorId : UnauthorizedAccess 原因：PowerShell 默认禁止运行脚本，PowerShell 默认禁止运行脚本;\nRestricted 表示在 PowerShell 中运行脚本是禁止的\nPS C:\\Users\\luyang\u0026gt; get-ExecutionPolicy Restricted 解决方案：\n以管理员身份运行 windows PowerShell，执行如下命令，并选择 Y, 之后再运行 PowerShell 即可恢复正常。\nset-ExecutionPolicy RemoteSigned PS C:\\WINDOWS\\system32\u0026gt; set-ExecutionPolicy RemoteSigned 执行策略更改 执行策略可帮助你防止执行不信任的脚本。更改执行策略可能会产生安全风险，如 https:/go.microsoft.com/fwlink/?LinkID=135170 中的 about_Execution_Policies 帮助主题所述。是否要更改执行策略? [Y] 是(Y) [A] 全是(A) [N] 否(N) [L] 全否(L) [S] 暂停(S) [?] 帮助 (默认值为“N”): Y PS C:\\WINDOWS\\system32\u0026gt; 参考 Windows | Oh My Posh Change your prompt | Oh My Posh Nerd Fonts - Iconic font aggregator, glyphs/icons collection, \u0026amp; fonts patcher ","date":"26 June, 2023","id":24,"permalink":"/posts/windows-terminal-%E5%AE%89%E8%A3%85%E9%85%8D%E7%BD%AE-oh-my-posh/","summary":"适用于 Windows terminal + powershell","tags":"terminal oh-my-posh","title":"Windows terminal 安装配置 oh-my-posh"},{"content":" ","date":"1 June, 2023","id":25,"permalink":"/posts/asan/","summary":"","tags":"cpp memory","title":"asan"},{"content":"sudo find /usr /lib /lib64 -name \u0026#34;libasan6.so\u0026#34; NI-VISA Driver Wizard 生成了一个 .INF 文件。右键该文件安装的过程中提示错误：第三方 INF 不包含数字签名信息。\nDriver Wizard 生成的 INF 文件，必须为其创建 Windows Catalog (.cat)文件并进行数字签名，然后才能在Windows 10(或更高版本)机器上安装INF文件。\n打开 Windows Terminal 在 .INF 文件所在目录下执行如下命令，生成 Windows Catalog 文件：\nInf2Cat /driver:. /os:10_X64 Windows 平台依赖环境安装 visual studio 2022 WDK Windows Driver Kit Windows SDK Linux 平台依赖环境安装 sudo apt install openssl 准备证书 目的：Linux 平台使用OpenSSL生成带有基本约束扩展的证书\n创建文件 openssl.cnf，内容如下 [req] req_extensions = v3_req distinguished_name = req_distinguished_name [v3_req] basicConstraints = CA:FALSE [req_distinguished_name] countryName = US stateOrProvinceName = California organizationName = DeadBeef commonName = DeadBeef.com 请求签发 CSR openssl req -new -x509 -key private.key -out certificate.crt -days 36500 -config openssl.cnf 生成自签名证书 openssl pkcs12 -export -in certificate.crt -inkey private.key -out yourfile.pfx Windows Catalog 签名 将上前面生成的证书相关的文件，全部拷贝到 Windows 目录，跟 .INF .cat 文件放在一起。\nsigntool.exe sign /fdws /f yourfile.pfx /p 123456 prefix.cat 安装证书 右键 openssl 生成的 certificate.crt 文件进行 安装证书，如何安装 cert 自行百度\n存储位置： 本地计算机 将说有的证书都放入下列存储：浏览 受信任的根证书颁发机构 安装 INF 右键点击 .inf 文件，选择安装.\n参考链接 NI-VISA 2022 Q3 Readme #Creating and Digitally Signing Catalog Files Windows 8和10上使用驱动程序开发向导中的* .inf文件 windows-sdk WDK Inf2Cat Creating a Catalog File for Test-Signing a Driver Package Openssl生成自签名证书，简单步骤 ","date":"1 June, 2023","id":26,"permalink":"/posts/openssl/","summary":"NI-VISA Driver Wizard 生成了一个 .INF 文件。右键该文件安装的过程中提示错误：第三方 INF 不包含数字签名信息。","tags":"openssl wdk 签名 证书","title":"openssl 创建自签名证书,对 Windows Catalog 进行签名"},{"content":"for pkg in docker.io docker-doc docker-compose podman-docker containerd runc; do sudo apt-get remove $pkg; done sudo apt-get update sudo apt-get install ca-certificates curl gnupg sudo install -m 0755 -d /etc/apt/keyrings curl -fsSL https://download.docker.com/linux/ubuntu/gpg | sudo gpg --dearmor -o /etc/apt/keyrings/docker.gpg sudo chmod a+r /etc/apt/keyrings/docker.gpg echo \\ \u0026#34;deb [arch=\u0026#34;$(dpkg --print-architecture)\u0026#34; signed-by=/etc/apt/keyrings/docker.gpg] https://download.docker.com/linux/ubuntu \\ \u0026#34;$(. /etc/os-release \u0026amp;\u0026amp; echo \u0026#34;$VERSION_CODENAME\u0026#34;)\u0026#34; stable\u0026#34; | \\ sudo tee /etc/apt/sources.list.d/docker.list \u0026gt; /dev/null sudo apt-get update sudo apt-get install docker-ce docker-ce-cli containerd.io docker-buildx-plugin docker-compose-plugin ","date":"1 June, 2023","id":27,"permalink":"/posts/docker-%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA/","summary":"","tags":"docker","title":"docker 环境搭建"},{"content":"R1 - Gerrit 环境搭建 环境说明 ubuntu 20.04 Gerrit 3.8.0 openjdk version \u0026ldquo;11.0.19\u0026rdquo; 2023-04-18 安装依赖软件包 sudo apt install openjdk-11-jdk openjdk-11-jdk-headless openjdk-11-jre openjdk-11-jre-headless 创建 Gerrit 用户 sudo adduser gerrit sudo usermod -a -G sudo gerrit sudo su gerrit mkdir ~/gerrit java -jar gerrit-3.8.0.war init -d ~/gerrit 安装 Gerrit $ java -jar gerrit-3.8.0.war init -d ~/gerrit Using secure store: com.google.gerrit.server.securestore.DefaultSecureStore [2023-06-03 12:19:03,027] [main] INFO com.google.gerrit.server.config.GerritServerConfigProvider : No /home/gerrit/gerrit/etc/gerrit.config; assuming defaults *** Gerrit Code Review 3.8.0 *** Create \u0026#39;/home/gerrit/gerrit\u0026#39; [Y/n]? Y *** Git Repositories *** Location of Git repositories [git]: *** JGit Configuration *** Auto-configured \u0026#34;receive.autogc = false\u0026#34; to disable auto-gc after git-receive-pack. *** Index *** Type [lucene]: *** User Authentication *** Authentication method [openid/?]: ? Supported options are: openid openid_sso http http_ldap client_ssl_cert_ldap ldap ldap_bind custom_extension development_become_any_account oauth Authentication method [openid/?]: http Get username from custom HTTP header [y/N]? y Username HTTP header [SM_USER]: SSO logout URL : Enable signed push support [y/N]? y Use case insensitive usernames [Y/n]? Y *** Review Labels *** Install Verified label [y/N]? N *** Email Delivery *** SMTP server hostname [localhost]: SMTP server port [(default)]: SMTP encryption [none/?]: SMTP username : *** Container Process *** Run as [gerrit]: Java runtime [/usr/lib/jvm/java-11-openjdk-amd64]: Copy gerrit-3.8.0.war to /home/gerrit/gerrit/bin/gerrit.war [Y/n]? Y Copying gerrit-3.8.0.war to /home/gerrit/gerrit/bin/gerrit.war *** SSH Daemon *** Listen on address [*]: Listen on port [29418]: Generating SSH host key ... rsa... ed25519... ecdsa 256... ecdsa 384... ecdsa 521... done *** HTTP Daemon *** Behind reverse proxy [y/N]? y Proxy uses SSL (https://) [y/N]? N Subdirectory on proxy server [/]: Listen on address [*]: Listen on port [8081]: Canonical URL [http://luyang-VirtualBox/]: *** Cache *** *** Plugins *** Installing plugins. Install plugin codemirror-editor version v3.8.0 [y/N]? y Installed codemirror-editor v3.8.0 Install plugin commit-message-length-validator version v3.8.0 [y/N]? y Installed commit-message-length-validator v3.8.0 Install plugin delete-project version v3.8.0 [y/N]? y Installed delete-project v3.8.0 Install plugin download-commands version v3.8.0 [y/N]? y Installed download-commands v3.8.0 Install plugin gitiles version v3.8.0 [y/N]? y Installed gitiles v3.8.0 Install plugin hooks version v3.8.0 [y/N]? y Installed hooks v3.8.0 Install plugin plugin-manager version v3.8.0 [y/N]? y Installed plugin-manager v3.8.0 Install plugin replication version v3.8.0 [y/N]? y Installed replication v3.8.0 Install plugin reviewnotes version v3.8.0 [y/N]? y Installed reviewnotes v3.8.0 Install plugin singleusergroup version v3.8.0 [y/N]? y Installed singleusergroup v3.8.0 Install plugin webhooks version v3.8.0 [y/N]? y Installed webhooks v3.8.0 Initializing plugins. ============================================================================ Welcome to the Gerrit community Find more information on the homepage: https://www.gerritcodereview.com Discuss Gerrit on the mailing list: https://groups.google.com/g/repo-discuss ============================================================================ Initialized /home/gerrit/gerrit Init complete, reindexing accounts,changes,groups,projects with: reindex --site-path /home/gerrit/gerrit --threads 1 --index accounts --index changes --index groups --index projectsReindexed 0 documents in accounts index in 0.0s (0.0/s) Index accounts in version 12 is ready Reindexing groups: 100% (2/2) Reindexed 2 documents in groups index in 0.2s (9.9/s) Index groups in version 9 is ready Reindexing changes: Slicing projects: 100% (2/2), done Reindexed 0 documents in changes index in 0.0s (0.0/s) Index changes in version 82 is ready Reindexing projects: 100% (2/2) Reindexed 2 documents in projects index in 0.1s (25.0/s) Index projects in version 5 is ready Executing /home/gerrit/gerrit/bin/gerrit.sh start Starting Gerrit Code Review: WARNING: Could not adjust Gerrit\u0026#39;s process for the kernel\u0026#39;s out-of-memory killer. This may be caused by /home/gerrit/gerrit/bin/gerrit.sh not being run as root. Consider changing the OOM score adjustment manually for Gerrit\u0026#39;s PID=4510 with e.g.: echo \u0026#39;-1000\u0026#39; | sudo tee /proc/4510/oom_score_adj OK Waiting for server on luyang-VirtualBox:80 ... OK Please open the following URL in the browser: http://luyang-VirtualBox/#/admin/projects/ 配置 Gerrit etc/gerrit.config\n[gerrit] basePath = git canonicalWebUrl = http://192.168.56.104:8080 serverId = d00cca90-af13-4298-9273-72d50cce94ce [container] javaOptions = \u0026#34;-Dflogger.backend_factory=com.google.common.flogger.backend.log4j.Log4jBackendFactory#getInstance\u0026#34; javaOptions = \u0026#34;-Dflogger.logging_context=com.google.gerrit.server.logging.LoggingContext#getInstance\u0026#34; user = gerrit javaHome = /usr/lib/jvm/java-11-openjdk-amd64 [index] type = lucene [auth] type = HTTP httpHeader = SM_USER userNameCaseInsensitive = true [receive] enableSignedPush = true [sendemail] enable = true smtpServer = smtp.qq.com smtpServerPort = 465 smtpEncryption = SSL sslVerify = true smtpUser = 193944320@qq.com smtpPass = fjas;jfa;sdjfalk from = [SCM]\u0026lt;193944320@qq.com\u0026gt; [sshd] listenAddress = *:29418 [httpd] listenUrl = proxy-http://*:8081/ [cache] directory = cache 安装配置 Nginx sudo apt install nginx /etc/nginx/conf.d/gerrit.conf\nserver { listen *:8080; server_name 192.168.56.104; allow all; deny all; auth_basic \u0026#34;Welcomme to Gerrit Code Review Site!\u0026#34;; auth_basic_user_file /home/gerrit/gerrit/etc/gerrit.password; location / { proxy_redirect off; proxy_pass http://192.168.56.104:8081; proxy_set_header X-Forwarded-For $remote_addr; proxy_set_header Host $host; } } ","date":"1 June, 2023","id":28,"permalink":"/posts/gerrit/","summary":"etc/gerrit.config","tags":"android repo gerrit CodeReview","title":"gerrit 环境搭建"},{"content":"Install vcpkg https://github.com/microsoft/vcpkg#quick-start-windows\npowershell 终端执行如下命令：\ngit clone https://github.com/microsoft/vcpkg .\\vcpkg\\bootstrap-vcpkg.bat Install Package # To install the libraries for your project, run: # This will install x86 libraries by default. .\\vcpkg\\vcpkg install [packages to install] # To install x64, run: .\\vcpkg\\vcpkg install [package name]:x64-windows Tab-Completion/Auto-Completion https://github.com/microsoft/vcpkg#tab-completionauto-completion\nvcpkg supports auto-completion of commands, package names, and options in both powershell and bash. To enable tab-completion in the shell of your choice, run:\n\u0026gt; .\\vcpkg integrate powershell VS/MSBuild 项目 (用户范围的集成) https://learn.microsoft.com/zh-cn/vcpkg/examples/installing-and-using-packages#msbuild\n使用 vcpkg 的建议且最高效的方法是通过用户范围的集成，使系统可用于你生成的所有项目。 首次在给定计算机上使用时，用户范围的集成将提示管理员进行访问，但之后不再需要该集成，并且集成按用户进行配置。\nPowerShell 终端执行：\nPS D:\\src\\vcpkg\u0026gt; .\\vcpkg integrate install Applied user-wide integration for this vcpkg root. All C++ projects can now #include any installed libraries. Linking will be handled automatically. Installing new libraries will make them instantly available. 需要重启 Visual Studio 或执行生成以使用更改更新 Intellisense。\n现在只需在 Visual Studio 中使用“文件 -\u0026gt; 新建项目”，该库将自动可用。 对于 SQLite，可以尝试其 C/C++ 示例。\n若要删除用户的集成，可以使用 .\\vcpkg integrate remove。\nVcpkg with CLion https://github.com/microsoft/vcpkg#vcpkg-with-clion\nOpen the Toolchains settings (File \u0026gt; Settings on Windows and Linux, CLion \u0026gt; Preferences on macOS), and go to the CMake settings (Build, Execution, Deployment \u0026gt; CMake). Finally, in CMake options, add the following line:\n-DCMAKE_TOOLCHAIN_FILE=[vcpkg root]/scripts/buildsystems/vcpkg.cmake You must add this line to each profile.\nInstall cppzmq package .\\vcpkg\\vcpkg install cppzmq:x64-windows To find and use cppzmq in CMakeLists.txt if (WIN32) find_package(cppzmq REQUIRED) endif (WIN32) ","date":"16 May, 2023","id":29,"permalink":"/posts/vcpkg_windows/","summary":"https://github.com/microsoft/vcpkg#quick-start-windows","tags":"windows vcpkg clion visual_studio","title":"windows vcpkg"},{"content":"基本用法 date $ date 2023年 02月 09日 星期四 16:22:29 CST 精确到 ms $ date +\u0026#39;%d/%m/%Y %H:%M:%S:%3N\u0026#39; 09/02/2023 16:23:20:252 精确到 ns $ date +\u0026#39;%d/%m/%Y %H:%M:%S:%N\u0026#39; 09/02/2023 16:23:24:918036405 ","date":"9 February, 2023","id":30,"permalink":"/posts/linux_date_cmd/","summary":"","tags":"linux date","title":"Linux date 命令用法"},{"content":"win10 安装 wsl2 安装 WSL | Microsoft Docs\n必须运行 Windows 10 版本 2004 及更高版本（内部版本 19041 及更高版本）或 Windows 11。\n→ 我的电脑win10已经更新到最新，应该没问题。\n设置→系统→关于\n以管理员身份运行 powershell\nwsl —install 如果没有安装wsl，则会进入安装过程，如果已经安装会打印帮助信息\n要在安装新的 Linux 发行版时将默认版本设置为 WSL 1 或 WSL 2，请使用命令 wsl --set-default-version \u0026lt;Version#\u0026gt;，将 \u0026lt;Version#\u0026gt;替换为 1 或 2。\nwsl --set-default-version 2 wsl2 安装ubuntu distro wsl --list --online 以下是可安装的有效分发的列表。 请使用“wsl \u0026ndash;install -d \u0026lt;分发\u0026gt;”安装。\nNAME FRIENDLY NAME Ubuntu Ubuntu Debian Debian GNU/Linux kali-linux Kali Linux Rolling openSUSE-42 openSUSE Leap 42 SLES-12 SUSE Linux Enterprise Server v12 Ubuntu-16.04 Ubuntu 16.04 LTS Ubuntu-18.04 Ubuntu 18.04 LTS Ubuntu-20.04 Ubuntu 20.04 LTS wsl --install -d Ubuntu-20.04 卸载 wsl2 distro wsl -l -v wsl --unregister Debian 限制vmmem进程内存占用过高\n%UserProfile% 目录下新建 .wslconfig , 内容如下\n[wsl2] memory=2GB Access WSL2/Ubuntu Drive from File Explorer Open File Explorer Type \\\\wsl$ in the address bar My distro shows up and click on it and you can see the file system. Mount a Linux filesystem disk in WSL2 win usbipd .exe\n下载wsl2内核源码，开启USB Mass Storage 编译安装\nwsl2\nhttps://github.com/dorssel/usbipd-win/wiki/WSL-support#usbip-client-tools https://docs.microsoft.com/zh-tw/windows/wsl/connect-usb sudo apt install linux-tools-virtual hwdata sudo update-alternatives --install /usr/local/bin/usbip usbip /usr/lib/linux-tools/*/usbip 20 OK\n让 WSL 2 支持 USB WSL 2 connect a USB device\nConnect USB devices USB/IP open-source project uspipd-win is needed Once the USB/IP project has completed installing, you will need to install the user space tools and a database of USB hardware identifiers. These instructions are for Ubuntu — other distributions may require a different usbip client package. sudo apt install linux-tools-5.4.0-77-generic hwdata sudo update-alternatives --install /usr/local/bin/usbip usbip /usr/lib/linux-tools/5.4.0-77-generic/usbip 20 Running Linux kernel 5.10.60.1 or higher\nluyang@DESKTOP-DM1TKNP:~/WSL2-Linux-Kernel-linux-msft-wsl-5.10.102.1$ uname -a Linux DESKTOP-DM1TKNP 5.10.16.3-microsoft-standard-WSL2 #1 SMP Fri Apr 2 22:23:49 UTC 2021 x86_64 x86_64 x86_64 GNU/Linux It has recently become simpler to update the WSL 2 Kernel: turn on \u0026ldquo;Receive updates for other Microsoft products when you update Windows\u0026rdquo; in the Advanced options for Windows update. The WSL2 kernel will get updated automatically.\n以管理员身份运行 powershell\nPS C:\\Windows\\system32\u0026gt; wsl --update 正在检查更新... 正在下载更新... 正在安装更新... 此更改将在 WSL 下次完全重启时生效。若要强制重启，请运行“wsl --shutdown”。 内核版本： 5.10.102.1 luyang@DESKTOP-DM1TKNP:/mnt/c/Users/luyang$ uname -a Linux DESKTOP-DM1TKNP 5.10.102.1-microsoft-standard-WSL2 #1 SMP Wed Mar 2 00:30:59 UTC 2022 x86_64 x86_64 x86_64 GNU/Linux identify the disk and partition to attach to WSL2\nBefore attaching your USB device, ensure that a WSL command line is open. This will keep the WSL 2 lightweight VM active.\nList all of the USB devices connected to Windows by opening PowerShell in administrator mode and entering the command: usbipd wsl list\nPS C:\\Windows\\system32\u0026gt; usbipd wsl list BUSID DEVICE STATE 1-2 HP HD Camera Not attached 1-7 Synaptics FS7604 Touch Fingerprint Sensor with PurePrint(TM) Not attached 1-10 英特尔(R) 无线 Bluetooth(R) Not attached 1-13 USB Attached SCSI (UAS) 大容量存储设备 Not attached 1-14 USB Attached SCSI (UAS) 大容量存储设备 Not attached Select the bus ID of the device you’d like to attach to WSL and run this command. You’ll be prompted by WSL for a password to run a sudo command. The Linux distribution to be attached must be your default distribution. (See the Basic comands for WSL doc to change your default distribution). usbipd wsl attach --busid \u0026lt;busid\u0026gt;\nPS C:\\Windows\\system32\u0026gt; usbipd wsl attach --busid 1-13 PS C:\\Windows\\system32\u0026gt; Open Ubuntu (or your preferred WSL command line) and list the attached USB devices using the command: lsusb\nluyang@DESKTOP-DM1TKNP:/mnt/c/Users/luyang$ lsusb Bus 002 Device 002: ID 1058:25f3 Western Digital Technologies, Inc. Bus 002 Device 001: ID 1d6b:0003 Linux Foundation 3.0 root hub Bus 001 Device 001: ID 1d6b:0002 Linux Foundation 2.0 root hub You should see the device you just attached and be able to interact with it using normal Linux tools. Depending on your application, you may need to configure udev rules to allow non-root users to access the device.\nOnce you are done using the device in WSL, you can either physically disconnect the USB device or run this command from PowerShell in administrator mode: usbipd wsl detach --busid \u0026lt;busid\u0026gt;\nmount\n按照上边的流程，usb设备已经挂载到了wsl2 ubuntu子系统，剩下的就是常规的ubuntu操作了 sudo lsusb 可以显示usb设备，但是sudo fdisk -l不显示usb设备， lsblk 也不显示移动硬盘的分区 [https://www.youtube.com/watch?v=iyBfQXmyH4o](https://www.youtube.com/watch?v=iyBfQXmyH4o https://github.com/microsoft/WSL/issues/7770 https://github.com/microsoft/WSL2-Linux-Kernel/blob/918dbaa9fa4aa665c9e5fe44489dd453da7cadeb/Microsoft/config-wsl#L2374-L2380 手动编译内核 下载源码 sudo apt install build-essential flex bison libssl-dev libelf-dev libncurses-dev autoconf libudev-dev libtool cd WSL2-Linux-Kernel-linux-msft-wsl-5.10.102.1 luyang@DESKTOP-DM1TKNP:~/WSL2-Linux-Kernel-linux-msft-wsl-5.10.102.1$ cp /proc/config.gz config.gz luyang@DESKTOP-DM1TKNP:~/WSL2-Linux-Kernel-linux-msft-wsl-5.10.102.1$ gunzip config.gz luyang@DESKTOP-DM1TKNP:~/WSL2-Linux-Kernel-linux-msft-wsl-5.10.102.1$ cp config .config luyang@DESKTOP-DM1TKNP:~/WSL2-Linux-Kernel-linux-msft-wsl-5.10.102.1$ make menuconfig # Device Drivers -\u0026gt; USB support -\u0026gt; select USB Mass Storage support and Enter y -\u0026gt; save and exit luyang@DESKTOP-DM1TKNP:~/WSL2-Linux-Kernel-linux-msft-wsl-5.10.102.1$ make -j8 # 编译过程中报错, 根据报错直接vim .config 注释掉了 CONFIG_DEBUG_INFO_BTF 项，保存然后再次make -j8 # CONFIG_DEBUG_INFO_BTF is not set luyang@DESKTOP-DM1TKNP:~/WSL2-Linux-Kernel-linux-msft-wsl-5.10.102.1$ sudo make modules_install -j8 luyang@DESKTOP-DM1TKNP:~/WSL2-Linux-Kernel-linux-msft-wsl-5.10.102.1$ sudo make install -j8 luyang@DESKTOP-DM1TKNP:~/WSL2-Linux-Kernel-linux-msft-wsl-5.10.102.1$ cp vmlinux /mnt/c/Users/luyang/ powershell terminal\nwsl --shutdown 修改 Windows 下的 c/User/\u0026lt;username\u0026gt;/.wslconfig，没有该文件自己创建一个，内容如下：主要是kernel这一项\n[wsl2] kernel=C:\\\\Users\\\\luyang\\\\vmlinux memory=2GB restart wsl, 然后按照前边attash usb的方式挂载之后\nluyang@DESKTOP-DM1TKNP:~/WSL2-Linux-Kernel-linux-msft-wsl-5.10.102.1$ lsusb Bus 002 Device 002: ID 1058:25f3 Western Digital Technologies, Inc. Bus 002 Device 001: ID 1d6b:0003 Linux Foundation 3.0 root hub Bus 001 Device 001: ID 1d6b:0002 Linux Foundation 2.0 root hub # sdc 就是我要挂载的移动硬盘 luyang@DESKTOP-DM1TKNP:~/WSL2-Linux-Kernel-linux-msft-wsl-5.10.102.1$ lsblk NAME MAJ:MIN RM SIZE RO TYPE MOUNTPOINT sda 8:0 0 256G 0 disk sdb 8:16 0 256G 0 disk / sdc 8:32 0 476.9G 0 disk ├─sdc1 8:33 0 512M 0 part ├─sdc2 8:34 0 50G 0 part └─sdc3 8:35 0 426.4G 0 part 扩展 WSL 2 虚拟硬盘的大小 https://docs.microsoft.com/zh-cn/windows/wsl/vhd-size wsl —shutdown 查找发行版安装包名称 Get-AppxPackage -Name \u0026quot;*\u0026lt;distro\u0026gt;*\u0026quot; | Select PackageFamilyName 例如：Get-AppxPackage -Name \u0026quot;*Ubuntu*\u0026quot; | Select PackageFamilyName 使用生成的 PackageFamilyName 查找 WSL 2 安装使用的 VHD 文件 fullpath，这将是你的 pathToVHD。 若要查找完整路径： 在“开始”菜单中，输入“%LOCALAPPDATA%”并选择打开 %LOCALAPPDATA% 文件文件夹。 接下来，打开“Packages”文件夹并搜索分发版的 PackageFamilyName。 打开该文件夹（即 CanonicalGroupLimited.Ubuntu20.04onWindows_79xxxxx）。 在 PackageFamilyName 文件夹中，打开“LocalState”文件夹并找到 \u0026lt;disk\u0026gt;.vhdx 文件。 复制该文件的路劲个，它应如下所示：%LOCALAPPDATA%\\Packages\\\u0026lt;PackageFamilyName\u0026gt;\\LocalState\\\u0026lt;disk\u0026gt;.vhdx 例如，Ubuntu 20.04 的 \u0026lt;pathToVHD\u0026gt; 应如下所示：%LOCALAPPDATA%\\Packages\\CanonicalGroupLimited.Ubuntu20.04onWindows_79xxxx\\LocalState\\ext4.vhdx 通过完成以下命令调整 WSL 2 VHD 的大小 以管理员权限打开 Windows 命令提示，然后输入：\ndiskpart DISKPART\u0026gt; Select vdisk file=\u0026#34;\u0026lt;pathToVHD\u0026gt;\u0026#34; DISKPART\u0026gt; detail vdisk 检查 detail 命令的输出。 输出将包含虚拟大小的值。 这是当前的最大值。 将此值转换为兆字节。 如果如果“详细信息”输出显示“虚拟大小: 256 GB”，请将此转换为 256000 。\n你输入的新值必须大于此原始值。 例如，若要将上述虚拟大小翻倍，可输入值 512000。 确定要为新大小（以 MB 为单位）设置的数字后，在 Windows 命令提示符 diskpart 提示中输入以下命令：\nDISKPART\u0026gt; expand vdisk maximum=\u0026lt;sizeInMegaBytes\u0026gt; Exit diskpart\nDISKPART\u0026gt; exit 启动 WSL 发行版（例如 Ubuntu），确保它在 WSL 2 中运行（不支持 WSL 1）。 可以使用以下命令确认这一点：wsl.exe -l -v。\n通过从 WSL 分发版命令行运行以下命令，让 WSL 知道它可扩展其文件系统的大小。\nsudo mount -t devtmpfs none /dev mount | grep ext4 可能会看到以下消息，它响应第一个 mount 命令：“/dev: /dev 上未装载任何内容。”可以放心地忽略此消息。\n复制此项的名称，该名称类似于：/dev/sdX（X 表示任何其他字符）。 在下面的示例中，X 的值是 b：\nsudo resize2fs /dev/sdb \u0026lt;sizeInMegabytes\u0026gt;M 在上述示例中，我们将 vhd 大小更改为了 512000，因此命令将为 sudo resize2fs /dev/sdb 512000M。\n备注\n可能需要安装 resize2fs。 如果是这样，可以使用此命令进行安装：sudo apt install resize2fs。\n输出将类似于以下内容：\nresize2fs 1.44.1 (24-Mar-2021) Filesystem at /dev/sdb is mounted on /; on-line resizing required old_desc_blocks = 32, new_desc_blocks = 38 The filesystem on /dev/sdb is now 78643200 (4k) blocks long. 重要\n建议不要使用 Windows 工具或编辑器来修改、移动或访问 AppData 文件夹中与 WSL 相关的文件。 这样做可能会导致 Linux 分发版损坏。 如果要从 Windows 访问 Linux 文件，可通过路径 \\\\wsl$\\\u0026lt;distroName\u0026gt;\\ 进行访问。 打开 WSL 分发版，然后输入 explorer.exe . 来查看此文件夹。 若要了解详细信息，请查看博客文章：从 Windows 访问 Linux 文件。\nDISKPART\u0026gt; expand vdisk maximum=512000 虚拟磁盘服务错误: 连接虚拟磁盘时，无法执行请求的操作。 管理员权限运行 powershell\nWSL2 Error: 0x80370114 WIN11按照官方文档安装WSL2时出现error 0x80370114_半路杀出来的小黑同学的博客-CSDN博客\nPS C:\\Users\\luyang\u0026gt; wsl --install -d Ubuntu-20.04 Ubuntu 20.04 LTS is already installed. Launching Ubuntu 20.04 LTS... Installing, this may take a few minutes... WslRegisterDistribution failed with error: 0x80370114 Error: 0x80370114 The operation could not be started because a required feature is not installed. Windows 11 上打开“设置”-\u0026gt;“应用”-\u0026gt;“可选功能”\n“更多windows功能”选项\n将“适用于Linux的Windows子系统”打勾后，重启即可。\nwin11 默认支持直接挂载 ext4 根据文档，用户需要安装 Windows 11 Build 22000 版本及以上，就可以直接挂载 EXT4 等格式的 Linux 磁盘。\n关于在 WSL 2 中安装 Linux 磁盘的入门 | Microsoft Learn\n标识磁盘\n要列出 Windows 中的可用磁盘，请运行：\nGET-CimInstance -query \u0026#34;SELECT * from Win32_DiskDrive\u0026#34; 磁盘路径位于“DeviceID”列下。 通常采用 \\.\\PHYSICALDRIVE* 格式。\nPS C:\\Users\\luyang\u0026gt; GET-CimInstance -query \u0026#34;SELECT * from Win32_DiskDrive\u0026#34; DeviceID Caption Partitions Size Model -------- ------- ---------- ---- ----- \\\\.\\PHYSICALDRIVE2 WD Green SN350 1TB 1 1000202273280 WD Green SN350 1TB \\\\.\\PHYSICALDRIVE1 WDC WD40EJRX-89AKWY0 1 4000784417280 WDC WD40EJRX-89AKWY0 \\\\.\\PHYSICALDRIVE0 WDC WD10EZEX-08WN4A0 3 1000202273280 WDC WD10EZEX-08WN4A0 装载磁盘\n使用 PowerShell，可以使用上面发现的磁盘路径装载磁盘，请运行：\nwsl --mount \u0026lt;DiskPath\u0026gt; # --bare: wsl --mount \u0026lt;DiskPath\u0026gt; --bare wsl --help # mount 相关 --mount \u0026lt;Disk\u0026gt; 在所有 WSL 2 分发中附加并安装物理或虚拟磁盘。 选项: --vhd 指定 \u0026lt;Disk\u0026gt; 是指虚拟硬盘。 --bare 将磁盘附加到 WSL 2，但不进行安装。 --name \u0026lt;Name\u0026gt; 对安装点使用自定义名称安装磁盘。 --type \u0026lt;Type\u0026gt; 安装磁盘时要使用的文件系统，如果未指定，则默认为 ext4。 --options \u0026lt;Options\u0026gt; 其他安装选项。 --partition \u0026lt;Index\u0026gt; 要安装的分区索引，如果未指定，则默认为整个磁盘。 实际挂载 LUSK 加密的 WD 移动硬盘 - 需要管理员权限启动终端\nPS C:\\Windows\\system32\u0026gt; GET-CimInstance -query \u0026#34;SELECT * from Win32_DiskDrive\u0026#34; DeviceID Caption Partitions Size Model -------- ------- ---------- ---- ----- \\\\.\\PHYSICALDRIVE2 WD Green SN350 1TB 1 1000202273280 WD Green SN350 1TB \\\\.\\PHYSICALDRIVE1 WDC WD40EJRX-89AKWY0 1 4000784417280 WDC WD40EJRX-89AKWY0 \\\\.\\PHYSICALDRIVE0 WDC WD10EZEX-08WN4A0 3 1000202273280 WDC WD10EZEX-08WN4A0 \\\\.\\PHYSICALDRIVE3 WD My Passport 25F3 SCSI Disk Device 1 512073031680 WD My Passport 25F3 SCSI Disk Device PS C:\\Windows\\system32\u0026gt; wsl --mount \\\\.\\PHYSICALDRIVE3 --bare 操作成功完成。 之后通过 WSL ubuntu terminal 操作, 查看对应设备\nsudo fdisk -l Device Boot Start End Sectors Size Id Type /dev/sdc1 2048 1000148991 1000146944 476.9G 83 Linux sudo cryptsetup luksOpen /dev/sdc1 wd sudo mount /dev/mapper/wd ~/wd_udisk sudo umount ~/wd_udisk sudo cryptsetup luksClose wd 挂载机械硬盘\n# window terminal 管理员权限 # 1T wsl --mount \\\\.\\PHYSICALDRIVE0 --bare # 4T wsl --mount \\\\.\\PHYSICALDRIVE1 --bare # ubuntu terminal # 4T sudo mount -t ext4 /dev/sdf1 ~/HD_4T ","date":"9 February, 2023","id":31,"permalink":"/posts/windows10_wsl/","summary":"安装 WSL | Microsoft Docs","tags":"windows wsl linux ext4 usbipd","title":"windows10 WSL setup"},{"content":"黑芝麻平台交叉编译 openssl 前置条件 编译环境：黑芝麻 Linux23 Docker 开发环境，已经默认配置了交叉编译环境。\n源码下载 wget https://www.openssl.org/source/openssl-1.1.1k.tar.gz tar -xzvf openssl-1.1.1k.tar.gz cd openssl-1.1.1k 配置 准备目标文件安装目录：\nmkdir _INSTALL 查看帮助手册：\nroot@028337952dd7:/home/misc/openssl-1.1.1k# ./Configure Usage: Configure [no-\u0026lt;cipher\u0026gt; ...] [enable-\u0026lt;cipher\u0026gt; ...] [-Dxxx] [-lxxx] [-Lxxx] [-fxxx] [-Kxxx] [no-hw-xxx|no-hw] [[no-]threads] [[no-]shared] [[no-]zlib|zlib-dynamic] [no-asm] [no-egd] [sctp] [386] [--prefix=DIR] [--openssldir=OPENSSLDIR] [--with-xxx[=vvv]] [--config=FILE] os/compiler[:flags] pick os/compiler from: BS2000-OSD BSD-generic32 BSD-generic64 BSD-ia64 BSD-sparc64 BSD-sparcv8 BSD-x86 BSD-x86-elf BSD-x86_64 Cygwin Cygwin-i386 Cygwin-i486 Cygwin-i586 Cygwin-i686 Cygwin-x86 Cygwin-x86_64 DJGPP MPE/iX-gcc UEFI UWIN VC-CE VC-WIN32 VC-WIN32-ARM VC-WIN32-ONECORE VC-WIN64-ARM VC-WIN64A VC-WIN64A-ONECORE VC-WIN64A-masm VC-WIN64I aix-cc aix-gcc aix64-cc aix64-gcc android-arm android-arm64 android-armeabi android-mips android-mips64 android-x86 android-x86_64 android64 android64-aarch64 android64-mips64 android64-x86_64 bsdi-elf-gcc cc darwin-i386-cc darwin-ppc-cc darwin64-arm64-cc darwin64-ppc-cc darwin64-x86_64-cc gcc haiku-x86 haiku-x86_64 hpux-ia64-cc hpux-ia64-gcc hpux-parisc-cc hpux-parisc-gcc hpux-parisc1_1-cc hpux-parisc1_1-gcc hpux64-ia64-cc hpux64-ia64-gcc hpux64-parisc2-cc hpux64-parisc2-gcc hurd-x86 ios-cross ios-xcrun ios64-cross ios64-xcrun iossimulator-xcrun iphoneos-cross irix-mips3-cc irix-mips3-gcc irix64-mips4-cc irix64-mips4-gcc linux-aarch64 linux-alpha-gcc linux-aout linux-arm64ilp32 linux-armv4 linux-c64xplus linux-elf linux-generic32 linux-generic64 linux-ia64 linux-mips32 linux-mips64 linux-ppc linux-ppc64 linux-ppc64le linux-sparcv8 linux-sparcv9 linux-x32 linux-x86 linux-x86-clang linux-x86_64 linux-x86_64-clang linux32-s390x linux64-mips64 linux64-s390x linux64-sparcv9 mingw mingw64 nextstep nextstep3.3 sco5-cc sco5-gcc solaris-sparcv7-cc solaris-sparcv7-gcc solaris-sparcv8-cc solaris-sparcv8-gcc solaris-sparcv9-cc solaris-sparcv9-gcc solaris-x86-gcc solaris64-sparcv9-cc solaris64-sparcv9-gcc solaris64-x86_64-cc solaris64-x86_64-gcc tru64-alpha-cc tru64-alpha-gcc uClinux-dist uClinux-dist64 unixware-2.0 unixware-2.1 unixware-7 unixware-7-gcc vms-alpha vms-alpha-p32 vms-alpha-p64 vms-ia64 vms-ia64-p32 vms-ia64-p64 vos-gcc vxworks-mips vxworks-ppc405 vxworks-ppc60x vxworks-ppc750 vxworks-ppc750-debug vxworks-ppc860 vxworks-ppcgen vxworks-simlinux NOTE: If in doubt, on Unix-ish systems use \u0026#39;./config\u0026#39;. 上面提示如果编译 Unix-ish x86 平台目标文件，直接使用 ./config\n更多详细说明参考：INSTALL 文件。\n我们的需求是：编译黑芝麻嵌入式平台 aarh64 目标文件，安装到当前目录下的 _INSTALL 目录\nroot@028337952dd7:/home/misc/openssl-1.1.1k# ./Configure linux-aarch64 --prefix=/home/misc/openssl-1.1.1k_bst/openssl-1.1.1k/build Configuring OpenSSL version 1.1.1k (0x101010bfL) for linux-aarch64 Using os-specific seed configuration Creating configdata.pm Creating Makefile ********************************************************************** *** *** *** OpenSSL has been successfully configured *** *** *** *** If you encounter a problem while building, please open an *** *** issue on GitHub \u0026lt;https://github.com/openssl/openssl/issues\u0026gt; *** *** and include the output from the following command: *** *** *** *** perl configdata.pm --dump *** *** *** *** (If you are new to OpenSSL, you might want to consult the *** *** \u0026#39;Troubleshooting\u0026#39; section in the INSTALL file first) *** *** *** ********************************************************************** root@028337952dd7:/home/misc/openssl-1.1.1k# 注意如上语句中：Configuring OpenSSL version 1.1.1k (0x101010bfL) for linux-aarch64 目标平台很重要，如果指定错误可能导致编译失败。\n踩坑记录 1 - 编译器指定异常 按照上述配置完成之后，编译失败：\nroot@028337952dd7:/home/misc/openssl-1.1.1k# make -j /opt/bstos/linux-23/sysroots/x86_64-bstsdk-linux/usr/bin/perl.real \u0026#34;-I.\u0026#34; -Mconfigdata \u0026#34;util/dofile.pl\u0026#34; \\ \u0026#34;-oMakefile\u0026#34; include/crypto/bn_conf.h.in \u0026gt; include/crypto/bn_conf.h /opt/bstos/linux-23/sysroots/x86_64-bstsdk-linux/usr/bin/perl.real \u0026#34;-I.\u0026#34; -Mconfigdata \u0026#34;util/dofile.pl\u0026#34; \\ \u0026#34;-oMakefile\u0026#34; include/crypto/dso_conf.h.in \u0026gt; include/crypto/dso_conf.h /opt/bstos/linux-23/sysroots/x86_64-bstsdk-linux/usr/bin/perl.real \u0026#34;-I.\u0026#34; -Mconfigdata \u0026#34;util/dofile.pl\u0026#34; \\ \u0026#34;-oMakefile\u0026#34; include/openssl/opensslconf.h.in \u0026gt; include/openssl/opensslconf.h make depend \u0026amp;\u0026amp; make _all make[1]: Entering directory \u0026#39;/home/misc/openssl-1.1.1k\u0026#39; make[1]: Leaving directory \u0026#39;/home/misc/openssl-1.1.1k\u0026#39; make[1]: Entering directory \u0026#39;/home/misc/openssl-1.1.1k\u0026#39; aarch64-bst-linux-aarch64-bst-linux-gcc --sysroot=/opt/bstos/linux-23/sysroots/aarch64-bst-linux -I. -Iinclude -fPIC -pthread -O2 -pipe -g -feliminate-unused-debug-types -DOPENSSL_USE_NODELETE -DOPENSSL_PIC -DOPENSSL_CPUID_OBJ -DOPENSSL_BN_ASM_MONT -DSHA1_ASM -DSHA256_ASM -DSHA512_ASM -DKECCAK1600_ASM -DVPAES_ASM -DECP_NISTZ256_ASM -DPOLY1305_ASM -DOPENSSLDIR=\u0026#34;\\\u0026#34;/home/misc/openssl-1.1.1k_bst/openssl-1.1.1k/build/ssl\\\u0026#34;\u0026#34; -DENGINESDIR=\u0026#34;\\\u0026#34;/home/misc/openssl-1.1.1k_bst/openssl-1.1.1k/build/lib/engines-1.1\\\u0026#34;\u0026#34; -DNDEBUG -c -o apps/app_rand.o apps/app_rand.c aarch64-bst-linux-aarch64-bst-linux-gcc --sysroot=/opt/bstos/linux-23/sysroots/aarch64-bst-linux -I. -Iinclude -fPIC -pthread -O2 -pipe -g -feliminate-unused-debug-types -DOPENSSL_USE_NODELETE -DOPENSSL_PIC -DOPENSSL_CPUID_OBJ -DOPENSSL_BN_ASM_MONT -DSHA1_ASM -DSHA256_ASM -DSHA512_ASM -DKECCAK1600_ASM -DVPAES_ASM -DECP_NISTZ256_ASM -DPOLY1305_ASM -DOPENSSLDIR=\u0026#34;\\\u0026#34;/home/misc/openssl-1.1.1k_bst/openssl-1.1.1k/build/ssl\\\u0026#34;\u0026#34; -DENGINESDIR=\u0026#34;\\\u0026#34;/home/misc/openssl-1.1.1k_bst/openssl-1.1.1k/build/lib/engines-1.1\\\u0026#34;\u0026#34; -DNDEBUG -c -o apps/apps.o apps/apps.c aarch64-bst-linux-aarch64-bst-linux-gcc --sysroot=/opt/bstos/linux-23/sysroots/aarch64-bst-linux -I. -Iinclude -fPIC -pthread -O2 -pipe -g -feliminate-unused-debug-types -DOPENSSL_USE_NODELETE -DOPENSSL_PIC -DOPENSSL_CPUID_OBJ -DOPENSSL_BN_ASM_MONT -DSHA1_ASM -DSHA256_ASM -DSHA512_ASM -DKECCAK1600_ASM -DVPAES_ASM -DECP_NISTZ256_ASM -DPOLY1305_ASM -DOPENSSLDIR=\u0026#34;\\\u0026#34;/home/misc/openssl-1.1.1k_bst/openssl-1.1.1k/build/ssl\\\u0026#34;\u0026#34; -DENGINESDIR=\u0026#34;\\\u0026#34;/home/misc/openssl-1.1.1k_bst/openssl-1.1.1k/build/lib/engines-1.1\\\u0026#34;\u0026#34; -DNDEBUG -c -o apps/bf_prefix.o apps/bf_prefix.c aarch64-bst-linux-aarch64-bst-linux-gcc --sysroot=/opt/bstos/linux-23/sysroots/aarch64-bst-linux -I. -Iinclude -fPIC -pthread -O2 -pipe -g -feliminate-unused-debug-types -DOPENSSL_USE_NODELETE -DOPENSSL_PIC -DOPENSSL_CPUID_OBJ -DOPENSSL_BN_ASM_MONT -DSHA1_ASM -DSHA256_ASM -DSHA512_ASM -DKECCAK1600_ASM -DVPAES_ASM -DECP_NISTZ256_ASM -DPOLY1305_ASM -DOPENSSLDIR=\u0026#34;\\\u0026#34;/home/misc/openssl-1.1.1k_bst/openssl-1.1.1k/build/ssl\\\u0026#34;\u0026#34; -DENGINESDIR=\u0026#34;\\\u0026#34;/home/misc/openssl-1.1.1k_bst/openssl-1.1.1k/build/lib/engines-1.1\\\u0026#34;\u0026#34; -DNDEBUG -c -o apps/opt.o apps/opt.c /bin/sh: 1: aarch64-bst-linux-aarch64-bst-linux-gcc: not found /bin/sh: 1: Makefile:700: recipe for target \u0026#39;apps/app_rand.o\u0026#39; failed /bin/sh: 1: aarch64-bst-linux-aarch64-bst-linux-gcc: not foundaarch64-bst-linux-aarch64-bst-linux-gcc: not foundmake[1]: *** [apps/app_rand.o] Error 127 make[1]: *** Waiting for unfinished jobs.... Makefile:704: recipe for target \u0026#39;apps/bf_prefix.o\u0026#39; failed make[1]: *** [apps/bf_prefix.o] Error 127 /bin/sh: 1: aarch64-bst-linux-aarch64-bst-linux-gcc: not found Makefile:702: recipe for target \u0026#39;apps/apps.o\u0026#39; failed make[1]: *** [apps/apps.o] Error 127 Makefile:706: recipe for target \u0026#39;apps/opt.o\u0026#39; failed make[1]: *** [apps/opt.o] Error 127 make[1]: Leaving directory \u0026#39;/home/misc/openssl-1.1.1k\u0026#39; Makefile:172: recipe for target \u0026#39;all\u0026#39; failed make: *** [all] Error 2 关键错误信息： not foundaarch64-bst-linux-aarch64-bst-linux-gcc\n查看 Makefile 有如下内容：\nCROSS_COMPILE=aarch64-bst-linux- CC=$(CROSS_COMPILE)aarch64-bst-linux-gcc --sysroot=/opt/bstos/linux-23/sysroots/aarch64-bst-linux CXX=$(CROSS_COMPILE)aarch64-bst-linux-g++ --sysroot=/opt/bstos/linux-23/sysroots/aarch64-bst-linux 所以看出问题所在了，这里手动修改 Makefile 直接将 CROSS_COMPILE 不要赋值即可 CROSS_COMPILE=\n重新编译通过。\nmake -j make install 踩坑记录 2 - 平台配置失败 举一个失败的例子，使用 config 命令配置 linux-x86_64：\nroot@028337952dd7:/home/misc/openssl-1.1.1k# ./config --prefix=/home/misc/openssl-1.1.1k_bst/openssl-1.1.1k/build Operating system: x86_64-whatever-linux2 Configuring OpenSSL version 1.1.1k (0x101010bfL) for linux-x86_64 Using os-specific seed configuration Creating configdata.pm Creating Makefile ********************************************************************** *** *** *** OpenSSL has been successfully configured *** *** *** *** If you encounter a problem while building, please open an *** *** issue on GitHub \u0026lt;https://github.com/openssl/openssl/issues\u0026gt; *** *** and include the output from the following command: *** *** *** *** perl configdata.pm --dump *** *** *** *** (If you are new to OpenSSL, you might want to consult the *** *** \u0026#39;Troubleshooting\u0026#39; section in the INSTALL file first) *** *** *** ********************************************************************** 由于配置的平台是 x86_64 增加了 -m64 编译选项，但是交叉编译器不支持导致编译失败：\nroot@028337952dd7:/home/misc/openssl-1.1.1k# make -j /opt/bstos/linux-23/sysroots/x86_64-bstsdk-linux/usr/bin/perl.real \u0026#34;-I.\u0026#34; -Mconfigdata \u0026#34;util/dofile.pl\u0026#34; \\ \u0026#34;-oMakefile\u0026#34; include/crypto/bn_conf.h.in \u0026gt; include/crypto/bn_conf.h /opt/bstos/linux-23/sysroots/x86_64-bstsdk-linux/usr/bin/perl.real \u0026#34;-I.\u0026#34; -Mconfigdata \u0026#34;util/dofile.pl\u0026#34; \\ \u0026#34;-oMakefile\u0026#34; include/crypto/dso_conf.h.in \u0026gt; include/crypto/dso_conf.h /opt/bstos/linux-23/sysroots/x86_64-bstsdk-linux/usr/bin/perl.real \u0026#34;-I.\u0026#34; -Mconfigdata \u0026#34;util/dofile.pl\u0026#34; \\ \u0026#34;-oMakefile\u0026#34; include/openssl/opensslconf.h.in \u0026gt; include/openssl/opensslconf.h make depend \u0026amp;\u0026amp; make _all make[1]: Entering directory \u0026#39;/home/misc/openssl-1.1.1k\u0026#39; make[1]: Leaving directory \u0026#39;/home/misc/openssl-1.1.1k\u0026#39; make[1]: Entering directory \u0026#39;/home/misc/openssl-1.1.1k\u0026#39; aarch64-bst-linux-aarch64-bst-linux-gcc --sysroot=/opt/bstos/linux-23/sysroots/aarch64-bst-linux -I. -Iinclude -fPIC -pthread -m64 -O2 -pipe -g -feliminate-unused-debug-types -DOPENSSL_USE_NODELETE -DL_ENDIAN -DOPENSSL_PIC -DOPENSSL_CPUID_OBJ -DOPENSSL_IA32_SSE2 -DOPENSSL_BN_ASM_MONT -DOPENSSL_BN_ASM_MONT5 -DOPENSSL_BN_ASM_GF2m -DSHA1_ASM -DSHA256_ASM -DSHA512_ASM -DKECCAK1600_ASM -DRC4_ASM -DMD5_ASM -DAESNI_ASM -DVPAES_ASM -DGHASH_ASM -DECP_NISTZ256_ASM -DX25519_ASM -DPOLY1305_ASM -DOPENSSLDIR=\u0026#34;\\\u0026#34;/home/misc/openssl-1.1.1k_bst/openssl-1.1.1k/build/ssl\\\u0026#34;\u0026#34; -DENGINESDIR=\u0026#34;\\\u0026#34;/home/misc/openssl-1.1.1k_bst/openssl-1.1.1k/build/lib/engines-1.1\\\u0026#34;\u0026#34; -DNDEBUG -c -o apps/app_rand.o apps/app_rand.c aarch64-bst-linux-aarch64-bst-linux-gcc --sysroot=/opt/bstos/linux-23/sysroots/aarch64-bst-linux -I. -Iinclude -fPIC -pthread -m64 -O2 -pipe -g -feliminate-unused-debug-types -DOPENSSL_USE_NODELETE -DL_ENDIAN -DOPENSSL_PIC -DOPENSSL_CPUID_OBJ -DOPENSSL_IA32_SSE2 -DOPENSSL_BN_ASM_MONT -DOPENSSL_BN_ASM_MONT5 -DOPENSSL_BN_ASM_GF2m -DSHA1_ASM -DSHA256_ASM -DSHA512_ASM -DKECCAK1600_ASM -DRC4_ASM -DMD5_ASM -DAESNI_ASM -DVPAES_ASM -DGHASH_ASM -DECP_NISTZ256_ASM -DX25519_ASM -DPOLY1305_ASM -DOPENSSLDIR=\u0026#34;\\\u0026#34;/home/misc/openssl-1.1.1k_bst/openssl-1.1.1k/build/ssl\\\u0026#34;\u0026#34; -DENGINESDIR=\u0026#34;\\\u0026#34;/home/misc/openssl-1.1.1k_bst/openssl-1.1.1k/build/lib/engines-1.1\\\u0026#34;\u0026#34; -DNDEBUG -c -o apps/apps.o apps/apps.c aarch64-bst-linux-aarch64-bst-linux-gcc --sysroot=/opt/bstos/linux-23/sysroots/aarch64-bst-linux -I. -Iinclude -fPIC -pthread -m64 -O2 -pipe -g -feliminate-unused-debug-types -DOPENSSL_USE_NODELETE -DL_ENDIAN -DOPENSSL_PIC -DOPENSSL_CPUID_OBJ -DOPENSSL_IA32_SSE2 -DOPENSSL_BN_ASM_MONT -DOPENSSL_BN_ASM_MONT5 -DOPENSSL_BN_ASM_GF2m -DSHA1_ASM -DSHA256_ASM -DSHA512_ASM -DKECCAK1600_ASM -DRC4_ASM -DMD5_ASM -DAESNI_ASM -DVPAES_ASM -DGHASH_ASM -DECP_NISTZ256_ASM -DX25519_ASM -DPOLY1305_ASM -DOPENSSLDIR=\u0026#34;\\\u0026#34;/home/misc/openssl-1.1.1k_bst/openssl-1.1.1k/build/ssl\\\u0026#34;\u0026#34; -DENGINESDIR=\u0026#34;\\\u0026#34;/home/misc/openssl-1.1.1k_bst/openssl-1.1.1k/build/lib/engines-1.1\\\u0026#34;\u0026#34; -DNDEBUG -c -o apps/bf_prefix.o apps/bf_prefix.c /bin/sh: 1: aarch64-bst-linux-aarch64-bst-linux-gcc: not found Makefile:700: recipe for target \u0026#39;apps/app_rand.o\u0026#39; failed make[1]: *** [apps/app_rand.o] Error 127 make[1]: *** Waiting for unfinished jobs.... /bin/sh: 1: aarch64-bst-linux-aarch64-bst-linux-gcc: not found Makefile:702: recipe for target \u0026#39;apps/apps.o\u0026#39; failed make[1]: *** [apps/apps.o] Error 127 /bin/sh: 1: aarch64-bst-linux-aarch64-bst-linux-gcc: not found Makefile:704: recipe for target \u0026#39;apps/bf_prefix.o\u0026#39; failed make[1]: *** [apps/bf_prefix.o] Error 127 make[1]: Leaving directory \u0026#39;/home/misc/openssl-1.1.1k\u0026#39; Makefile:172: recipe for target \u0026#39;all\u0026#39; failed make: *** [all] Error 2 root@028337952dd7:/home/misc/openssl-1.1.1k# vim Makefile root@028337952dd7:/home/misc/openssl-1.1.1k# make -j make depend \u0026amp;\u0026amp; make _all make[1]: Entering directory \u0026#39;/home/misc/openssl-1.1.1k\u0026#39; make[1]: Leaving directory \u0026#39;/home/misc/openssl-1.1.1k\u0026#39; make[1]: Entering directory \u0026#39;/home/misc/openssl-1.1.1k\u0026#39; aarch64-bst-linux-gcc --sysroot=/opt/bstos/linux-23/sysroots/aarch64-bst-linux -I. -Iinclude -fPIC -pthread -m64 -O2 -pipe -g -feliminate-unused-debug-types -DOPENSSL_USE_NODELETE -DL_ENDIAN -DOPENSSL_PIC -DOPENSSL_CPUID_OBJ -DOPENSSL_IA32_SSE2 -DOPENSSL_BN_ASM_MONT -DOPENSSL_BN_ASM_MONT5 -DOPENSSL_BN_ASM_GF2m -DSHA1_ASM -DSHA256_ASM -DSHA512_ASM -DKECCAK1600_ASM -DRC4_ASM -DMD5_ASM -DAESNI_ASM -DVPAES_ASM -DGHASH_ASM -DECP_NISTZ256_ASM -DX25519_ASM -DPOLY1305_ASM -DOPENSSLDIR=\u0026#34;\\\u0026#34;/home/misc/openssl-1.1.1k_bst/openssl-1.1.1k/build/ssl\\\u0026#34;\u0026#34; -DENGINESDIR=\u0026#34;\\\u0026#34;/home/misc/openssl-1.1.1k_bst/openssl-1.1.1k/build/lib/engines-1.1\\\u0026#34;\u0026#34; -DNDEBUG -c -o apps/app_rand.o apps/app_rand.c aarch64-bst-linux-gcc --sysroot=/opt/bstos/linux-23/sysroots/aarch64-bst-linux -I. -Iinclude -fPIC -pthread -m64 -O2 -pipe -g -feliminate-unused-debug-types -DOPENSSL_USE_NODELETE -DL_ENDIAN -DOPENSSL_PIC -DOPENSSL_CPUID_OBJ -DOPENSSL_IA32_SSE2 -DOPENSSL_BN_ASM_MONT -DOPENSSL_BN_ASM_MONT5 -DOPENSSL_BN_ASM_GF2m -DSHA1_ASM -DSHA256_ASM -DSHA512_ASM -DKECCAK1600_ASM -DRC4_ASM -DMD5_ASM -DAESNI_ASM -DVPAES_ASM -DGHASH_ASM -DECP_NISTZ256_ASM -DX25519_ASM -DPOLY1305_ASM -DOPENSSLDIR=\u0026#34;\\\u0026#34;/home/misc/openssl-1.1.1k_bst/openssl-1.1.1k/build/ssl\\\u0026#34;\u0026#34; -DENGINESDIR=\u0026#34;\\\u0026#34;/home/misc/openssl-1.1.1k_bst/openssl-1.1.1k/build/lib/engines-1.1\\\u0026#34;\u0026#34; -DNDEBUG -c -o apps/apps.o apps/apps.c aarch64-bst-linux-gcc --sysroot=/opt/bstos/linux-23/sysroots/aarch64-bst-linux -I. -Iinclude -fPIC -pthread -m64 -O2 -pipe -g -feliminate-unused-debug-types -DOPENSSL_USE_NODELETE -DL_ENDIAN -DOPENSSL_PIC -DOPENSSL_CPUID_OBJ -DOPENSSL_IA32_SSE2 -DOPENSSL_BN_ASM_MONT -DOPENSSL_BN_ASM_MONT5 -DOPENSSL_BN_ASM_GF2m -DSHA1_ASM -DSHA256_ASM -DSHA512_ASM -DKECCAK1600_ASM -DRC4_ASM -DMD5_ASM -DAESNI_ASM -DVPAES_ASM -DGHASH_ASM -DECP_NISTZ256_ASM -DX25519_ASM -DPOLY1305_ASM -DOPENSSLDIR=\u0026#34;\\\u0026#34;/home/misc/openssl-1.1.1k_bst/openssl-1.1.1k/build/ssl\\\u0026#34;\u0026#34; -DENGINESDIR=\u0026#34;\\\u0026#34;/home/misc/openssl-1.1.1k_bst/openssl-1.1.1k/build/lib/engines-1.1\\\u0026#34;\u0026#34; -DNDEBUG -c -o apps/bf_prefix.o apps/bf_prefix.c aarch64-bst-linux-gcc --sysroot=/opt/bstos/linux-23/sysroots/aarch64-bst-linux -I. -Iinclude -fPIC -pthread -m64 -O2 -pipe -g -feliminate-unused-debug-types -DOPENSSL_USE_NODELETE -DL_ENDIAN -DOPENSSL_PIC -DOPENSSL_CPUID_OBJ -DOPENSSL_IA32_SSE2 -DOPENSSL_BN_ASM_MONT -DOPENSSL_BN_ASM_MONT5 -DOPENSSL_BN_ASM_GF2m -DSHA1_ASM -DSHA256_ASM -DSHA512_ASM -DKECCAK1600_ASM -DRC4_ASM -DMD5_ASM -DAESNI_ASM -DVPAES_ASM -DGHASH_ASM -DECP_NISTZ256_ASM -DX25519_ASM -DPOLY1305_ASM -DOPENSSLDIR=\u0026#34;\\\u0026#34;/home/misc/openssl-1.1.1k_bst/openssl-1.1.1k/build/ssl\\\u0026#34;\u0026#34; -DENGINESDIR=\u0026#34;\\\u0026#34;/home/misc/openssl-1.1.1k_bst/openssl-1.1.1k/build/lib/engines-1.1\\\u0026#34;\u0026#34; -DNDEBUG -c -o apps/opt.o apps/opt.c aarch64-bst-linux-gcc --sysroot=/opt/bstos/linux-23/sysroots/aarch64-bst-linux -I. -Iinclude -fPIC -pthread -m64 -O2 -pipe -g -feliminate-unused-debug-types -DOPENSSL_USE_NODELETE -DL_ENDIAN -DOPENSSL_PIC -DOPENSSL_CPUID_OBJ -DOPENSSL_IA32_SSE2 -DOPENSSL_BN_ASM_MONT -DOPENSSL_BN_ASM_MONT5 -DOPENSSL_BN_ASM_GF2m -DSHA1_ASM -DSHA256_ASM -DSHA512_ASM -DKECCAK1600_ASM -DRC4_ASM -DMD5_ASM -DAESNI_ASM -DVPAES_ASM -DGHASH_ASM -DECP_NISTZ256_ASM -DX25519_ASM -DPOLY1305_ASM -DOPENSSLDIR=\u0026#34;\\\u0026#34;/home/misc/openssl-1.1.1k_bst/openssl-1.1.1k/build/ssl\\\u0026#34;\u0026#34; -DENGINESDIR=\u0026#34;\\\u0026#34;/home/misc/openssl-1.1.1k_bst/openssl-1.1.1k/build/lib/engines-1.1\\\u0026#34;\u0026#34; -DNDEBUG -c -o apps/s_cb.o apps/s_cb.c aarch64-bst-linux-gcc --sysroot=/opt/bstos/linux-23/sysroots/aarch64-bst-linux -I. -Iinclude -fPIC -pthread -m64 -O2 -pipe -g -feliminate-unused-debug-types -DOPENSSL_USE_NODELETE -DL_ENDIAN -DOPENSSL_PIC -DOPENSSL_CPUID_OBJ -DOPENSSL_IA32_SSE2 -DOPENSSL_BN_ASM_MONT -DOPENSSL_BN_ASM_MONT5 -DOPENSSL_BN_ASM_GF2m -DSHA1_ASM -DSHA256_ASM -DSHA512_ASM -DKECCAK1600_ASM -DRC4_ASM -DMD5_ASM -DAESNI_ASM -DVPAES_ASM -DGHASH_ASM -DECP_NISTZ256_ASM -DX25519_ASM -DPOLY1305_ASM -DOPENSSLDIR=\u0026#34;\\\u0026#34;/home/misc/openssl-1.1.1k_bst/openssl-1.1.1k/build/ssl\\\u0026#34;\u0026#34; -DENGINESDIR=\u0026#34;\\\u0026#34;/home/misc/openssl-1.1.1k_bst/openssl-1.1.1k/build/lib/engines-1.1\\\u0026#34;\u0026#34; -DNDEBUG -c -o apps/s_socket.o apps/s_socket.c aarch64-bst-linux-gcc --sysroot=/opt/bstos/linux-23/sysroots/aarch64-bst-linux -I. -Iinclude -fPIC -pthread -m64 -O2 -pipe -g -feliminate-unused-debug-types -DOPENSSL_USE_NODELETE -DL_ENDIAN -DOPENSSL_PIC -DOPENSSL_CPUID_OBJ -DOPENSSL_IA32_SSE2 -DOPENSSL_BN_ASM_MONT -DOPENSSL_BN_ASM_MONT5 -DOPENSSL_BN_ASM_GF2m -DSHA1_ASM -DSHA256_ASM -DSHA512_ASM -DKECCAK1600_ASM -DRC4_ASM -DMD5_ASM -DAESNI_ASM -DVPAES_ASM -DGHASH_ASM -DECP_NISTZ256_ASM -DX25519_ASM -DPOLY1305_ASM -DOPENSSLDIR=\u0026#34;\\\u0026#34;/home/misc/openssl-1.1.1k_bst/openssl-1.1.1k/build/ssl\\\u0026#34;\u0026#34; -DENGINESDIR=\u0026#34;\\\u0026#34;/home/misc/openssl-1.1.1k_bst/openssl-1.1.1k/build/lib/engines-1.1\\\u0026#34;\u0026#34; -DNDEBUG -c -o crypto/aes/aes_cbc.o crypto/aes/aes_cbc.c aarch64-bst-linux-gcc --sysroot=/opt/bstos/linux-23/sysroots/aarch64-bst-linux -I. -Iinclude -fPIC -pthread -m64 -O2 -pipe -g -feliminate-unused-debug-types -DOPENSSL_USE_NODELETE -DL_ENDIAN -DOPENSSL_PIC -DOPENSSL_CPUID_OBJ -DOPENSSL_IA32_SSE2 -DOPENSSL_BN_ASM_MONT -DOPENSSL_BN_ASM_MONT5 -DOPENSSL_BN_ASM_GF2m -DSHA1_ASM -DSHA256_ASM -DSHA512_ASM -DKECCAK1600_ASM -DRC4_ASM -DMD5_ASM -DAESNI_ASM -DVPAES_ASM -DGHASH_ASM -DECP_NISTZ256_ASM -DX25519_ASM -DPOLY1305_ASM -DOPENSSLDIR=\u0026#34;\\\u0026#34;/home/misc/openssl-1.1.1k_bst/openssl-1.1.1k/build/ssl\\\u0026#34;\u0026#34; -DENGINESDIR=\u0026#34;\\\u0026#34;/home/misc/openssl-1.1.1k_bst/openssl-1.1.1k/build/lib/engines-1.1\\\u0026#34;\u0026#34; -DNDEBUG -c -o crypto/aes/aes_cfb.o crypto/aes/aes_cfb.c aarch64-bst-linux-gcc --sysroot=/opt/bstos/linux-23/sysroots/aarch64-bst-linux -I. -Iinclude -fPIC -pthread -m64 -O2 -pipe -g -feliminate-unused-debug-types -DOPENSSL_USE_NODELETE -DL_ENDIAN -DOPENSSL_PIC -DOPENSSL_CPUID_OBJ -DOPENSSL_IA32_SSE2 -DOPENSSL_BN_ASM_MONT -DOPENSSL_BN_ASM_MONT5 -DOPENSSL_BN_ASM_GF2m -DSHA1_ASM -DSHA256_ASM -DSHA512_ASM -DKECCAK1600_ASM -DRC4_ASM -DMD5_ASM -DAESNI_ASM -DVPAES_ASM -DGHASH_ASM -DECP_NISTZ256_ASM -DX25519_ASM -DPOLY1305_ASM -DOPENSSLDIR=\u0026#34;\\\u0026#34;/home/misc/openssl-1.1.1k_bst/openssl-1.1.1k/build/ssl\\\u0026#34;\u0026#34; -DENGINESDIR=\u0026#34;\\\u0026#34;/home/misc/openssl-1.1.1k_bst/openssl-1.1.1k/build/lib/engines-1.1\\\u0026#34;\u0026#34; -DNDEBUG -c -o crypto/aes/aes_core.o crypto/aes/aes_core.c aarch64-bst-linux-gcc --sysroot=/opt/bstos/linux-23/sysroots/aarch64-bst-linux -I. -Iinclude -fPIC -pthread -m64 -O2 -pipe -g -feliminate-unused-debug-types -DOPENSSL_USE_NODELETE -DL_ENDIAN -DOPENSSL_PIC -DOPENSSL_CPUID_OBJ -DOPENSSL_IA32_SSE2 -DOPENSSL_BN_ASM_MONT -DOPENSSL_BN_ASM_MONT5 -DOPENSSL_BN_ASM_GF2m -DSHA1_ASM -DSHA256_ASM -DSHA512_ASM -DKECCAK1600_ASM -DRC4_ASM -DMD5_ASM -DAESNI_ASM -DVPAES_ASM -DGHASH_ASM -DECP_NISTZ256_ASM -DX25519_ASM -DPOLY1305_ASM -DOPENSSLDIR=\u0026#34;\\\u0026#34;/home/misc/openssl-1.1.1k_bst/openssl-1.1.1k/build/ssl\\\u0026#34;\u0026#34; -DENGINESDIR=\u0026#34;\\\u0026#34;/home/misc/openssl-1.1.1k_bst/openssl-1.1.1k/build/lib/engines-1.1\\\u0026#34;\u0026#34; -DNDEBUG -c -o crypto/aes/aes_ecb.o crypto/aes/aes_ecb.c aarch64-bst-linux-gcc --sysroot=/opt/bstos/linux-23/sysroots/aarch64-bst-linux -I. -Iinclude -fPIC -pthread -m64 -O2 -pipe -g -feliminate-unused-debug-types -DOPENSSL_USE_NODELETE -DL_ENDIAN -DOPENSSL_PIC -DOPENSSL_CPUID_OBJ -DOPENSSL_IA32_SSE2 -DOPENSSL_BN_ASM_MONT -DOPENSSL_BN_ASM_MONT5 -DOPENSSL_BN_ASM_GF2m -DSHA1_ASM -DSHA256_ASM -DSHA512_ASM -DKECCAK1600_ASM -DRC4_ASM -DMD5_ASM -DAESNI_ASM -DVPAES_ASM -DGHASH_ASM -DECP_NISTZ256_ASM -DX25519_ASM -DPOLY1305_ASM -DOPENSSLDIR=\u0026#34;\\\u0026#34;/home/misc/openssl-1.1.1k_bst/openssl-1.1.1k/build/ssl\\\u0026#34;\u0026#34; -DENGINESDIR=\u0026#34;\\\u0026#34;/home/misc/openssl-1.1.1k_bst/openssl-1.1.1k/build/lib/engines-1.1\\\u0026#34;\u0026#34; -DNDEBUG -c -o crypto/aes/aes_ige.o crypto/aes/aes_ige.c aarch64-bst-linux-gcc: error: unrecognized command line option \u0026#39;-m64\u0026#39; aarch64-bst-linux-gcc: error: unrecognized command line option \u0026#39;-m64\u0026#39; aarch64-bst-linux-gcc: error: unrecognized command line option \u0026#39;-m64\u0026#39; aarch64-bst-linux-gcc --sysroot=/opt/bstos/linux-23/sysroots/aarch64-bst-linux -I. -Iinclude -fPIC -pthread -m64 -O2 -pipe -g -feliminate-unused-debug-types -DOPENSSL_USE_NODELETE -DL_ENDIAN -DOPENSSL_PIC -DOPENSSL_CPUID_OBJ -DOPENSSL_IA32_SSE2 -DOPENSSL_BN_ASM_MONT -DOPENSSL_BN_ASM_MONT5 -DOPENSSL_BN_ASM_GF2m -DSHA1_ASM -DSHA256_ASM -DSHA512_ASM -DKECCAK1600_ASM -DRC4_ASM -DMD5_ASM -DAESNI_ASM -DVPAES_ASM -DGHASH_ASM -DECP_NISTZ256_ASM -DX25519_ASM -DPOLY1305_ASM -DOPENSSLDIR=\u0026#34;\\\u0026#34;/home/misc/openssl-1.1.1k_bst/openssl-1.1.1k/build/ssl\\\u0026#34;\u0026#34; -DENGINESDIR=\u0026#34;\\\u0026#34;/home/misc/openssl-1.1.1k_bst/openssl-1.1.1k/build/lib/engines-1.1\\\u0026#34;\u0026#34; -DNDEBUG -c -o crypto/aes/aes_misc.o crypto/aes/aes_misc.c aarch64-bst-linux-gcc: error: unrecognized command line option \u0026#39;-m64\u0026#39; Makefile:700: recipe for target \u0026#39;apps/app_rand.o\u0026#39; failed make[1]: *** [apps/app_rand.o] Error 1 make[1]: *** Waiting for unfinished jobs.... Makefile:702: recipe for target \u0026#39;apps/apps.o\u0026#39; failed make[1]: *** [apps/apps.o] Error 1 Makefile:704: recipe for target \u0026#39;apps/bf_prefix.o\u0026#39; failed make[1]: *** [apps/bf_prefix.o] Error 1 Makefile:706: recipe for target \u0026#39;apps/opt.o\u0026#39; failed make[1]: *** [apps/opt.o] Error 1 aarch64-bst-linux-gcc: error: unrecognized command line option \u0026#39;-m64\u0026#39; aarch64-bst-linux-gcc: error: unrecognized command line option \u0026#39;-m64\u0026#39; aarch64-bst-linux-gcc: error: unrecognized command line option \u0026#39;-m64\u0026#39; Makefile:708: recipe for target \u0026#39;apps/s_cb.o\u0026#39; failed make[1]: *** [apps/s_cb.o] Error 1 aarch64-bst-linux-gcc: error: unrecognized command line option \u0026#39;-m64\u0026#39; Makefile:724: recipe for target \u0026#39;crypto/aes/aes_cfb.o\u0026#39; failed make[1]: *** [crypto/aes/aes_cfb.o] Error 1 aarch64-bst-linux-gcc: error: unrecognized command line option \u0026#39;-m64\u0026#39; aarch64-bst-linux-gcc: error: unrecognized command line option \u0026#39;-m64\u0026#39; Makefile:710: recipe for target \u0026#39;apps/s_socket.o\u0026#39; failed aarch64-bst-linux-gcc: error: unrecognized command line option \u0026#39;-m64\u0026#39; make[1]: *** [apps/s_socket.o] Error 1 Makefile:722: recipe for target \u0026#39;crypto/aes/aes_cbc.o\u0026#39; failed make[1]: *** [crypto/aes/aes_cbc.o] Error 1 Makefile:726: recipe for target \u0026#39;crypto/aes/aes_core.o\u0026#39; failed make[1]: *** [crypto/aes/aes_core.o] Error 1 Makefile:730: recipe for target \u0026#39;crypto/aes/aes_ige.o\u0026#39; failed make[1]: *** [crypto/aes/aes_ige.o] Error 1 Makefile:728: recipe for target \u0026#39;crypto/aes/aes_ecb.o\u0026#39; failed make[1]: *** [crypto/aes/aes_ecb.o] Error 1 aarch64-bst-linux-gcc: error: unrecognized command line option \u0026#39;-m64\u0026#39; Makefile:732: recipe for target \u0026#39;crypto/aes/aes_misc.o\u0026#39; failed make[1]: *** [crypto/aes/aes_misc.o] Error 1 make[1]: Leaving directory \u0026#39;/home/misc/openssl-1.1.1k\u0026#39; Makefile:172: recipe for target \u0026#39;all\u0026#39; failed make: *** [all] Error 2 ","date":"9 February, 2023","id":32,"permalink":"/posts/%E9%BB%91%E8%8A%9D%E9%BA%BB%E5%B9%B3%E5%8F%B0%E4%BA%A4%E5%8F%89%E7%BC%96%E8%AF%91-openssl/","summary":"编译环境：黑芝麻 Linux23 Docker 开发环境，已经默认配置了交叉编译环境。","tags":"linux bst openssl","title":"黑芝麻平台交叉编译 openssl"},{"content":"I2C 寄存器读写命令 探测设备 i2cdetect HELLO@WORLD:~# i2cdetect Error: No i2c-bus specified! Usage: i2cdetect [-y] [-a] [-q|-r] I2CBUS [FIRST LAST] i2cdetect -F I2CBUS i2cdetect -l I2CBUS is an integer or an I2C bus name If provided, FIRST and LAST limit the probing range. # I2CBUS: 0 1 2 ... # Notice: -r 参数很重要，不带 -r 参数有些设备探测不到 i2cdetect -y -r \u0026lt;I2CBUS\u0026gt; 对于8bit的reg, value 可以使用 i2cget / i2cset i2cget HELLO@WORLD:~# i2cget Usage: i2cget [-f] [-y] I2CBUS CHIP-ADDRESS [DATA-ADDRESS [MODE]] I2CBUS is an integer or an I2C bus name ADDRESS is an integer (0x03 - 0x77) MODE is one of: b (read byte data, default) w (read word data) c (write byte/read byte) Append p for SMBus PEC # SLAVE_ADDRESS: 使用i2cdetect 出来的结果 i2cget -y -f \u0026lt;I2CBUS\u0026gt; \u0026lt;SLAVE_ADDRESS\u0026gt; \u0026lt;REG\u0026gt; i2cset HELLO@WORLD:~# i2cset Usage: i2cset [-f] [-y] [-m MASK] [-r] I2CBUS CHIP-ADDRESS DATA-ADDRESS [VALUE] ... [MODE] I2CBUS is an integer or an I2C bus name ADDRESS is an integer (0x03 - 0x77) MODE is one of: c (byte, no value) b (byte data, default) w (word data) i (I2C block data) s (SMBus block data) Append p for SMBus PEC i2cset -y -f \u0026lt;I2CBUS\u0026gt; \u0026lt;SLAVE_ADDRESS\u0026gt; \u0026lt;REG\u0026gt; \u0026lt;VALUE\u0026gt; 对于16bit+的reg, value 需要使用 i2ctransfer i2ctransfer root@J3Pilot-B:~# i2ctransfer Usage: i2ctransfer [-f] [-y] [-v] [-V] I2CBUS DESC [DATA] [DESC [DATA]]... I2CBUS is an integer or an I2C bus name DESC describes the transfer in the form: {r|w}LENGTH[@address] 1) read/write-flag 2) LENGTH (range 0-65535) 3) I2C address (use last one if omitted) DATA are LENGTH bytes for a write message. They can be shortened by a suffix: = (keep value constant until LENGTH) + (increase value by 1 until LENGTH) - (decrease value by 1 until LENGTH) p (use pseudo random generator until LENGTH with value as seed) Example (bus 0, read 8 byte at offset 0x64 from EEPROM at 0x50): # i2ctransfer 0 w1@0x50 0x64 r8 Example (same EEPROM, at offset 0x42 write 0xff 0xfe ... 0xf0): # i2ctransfer 0 w17@0x50 0x42 0xff- # W3 写三个参数 16bit 寄存器 （2 Bytes）+ value（1 Byte） # i2c bus 0 # slave address 0x36 i2ctransfer -y -f 0 w3@0x33 0x3B 0x9D 0x01 # w2 （16bit寄存器）写两个参数 0x4F 0x0C 寄存器（0x4F0C）到 0x36 slave address # i2c bus 总线 0 # 读取 i2c 总线 0 的 slave address 为 0x36 的设备的寄存器 0x4F0C, 读一个 char # 0x36 是 ovx3c 的 slave address （7bit i2c address） i2ctransfer -y -f 0 w2@0x36 0x4F 0x0C r1 dump 寄存器 00~FF i2cdump HELLO@WORLD:~# i2cdump Error: No i2c-bus specified! Usage: i2cdump [-f] [-y] [-r first-last] I2CBUS ADDRESS [MODE [BANK [BANKREG]]] I2CBUS is an integer or an I2C bus name ADDRESS is an integer (0x03 - 0x77) MODE is one of: b (byte, default) w (word) W (word on even register addresses) s (SMBus block) i (I2C block) c (consecutive byte) Append p for SMBus PEC i2cdump -f -y \u0026lt;I2CBUS\u0026gt; \u0026lt;SLAVE_ADDRESS\u0026gt; ","date":"7 February, 2023","id":33,"permalink":"/posts/i2c_cmd/","summary":"","tags":"I2C Linux","title":"I2C command"},{"content":"DDR 压测命令 测试之前可以使用 free -m 查看内存使用情况。\n» free total used free shared buff/cache available Mem: 16193884 1268028 13921020 6528 1004836 14587148 Swap: 4194304 0 4194304 » free -m total used free shared buff/cache available Mem: 15814 1231 13598 6 984 14252 根据 available 至设置 DDR 压测内存大小。\nstressapptest 安装 stressapptest stressapptest - stress test application for simulating high load situations\nsudo apt install stressapptest stressapptest help » stressapptest -h Stats: SAT revision 1.0.6_autoconf, 64 bit binary Log: buildd @ lgw01-amd64-029 on Sun Mar 22 18:14:26 UTC 2020 from open source release Usage: ./sat(32|64) [options] -M mbytes megabytes of ram to test -H mbytes minimum megabytes of hugepages to require -s seconds number of seconds to run -m threads number of memory copy threads to run -i threads number of memory invert threads to run -C threads number of memory CPU stress threads to run --findfiles find locations to do disk IO automatically -d device add a direct write disk thread with block device (or file) \u0026#39;device\u0026#39; -f filename add a disk thread with tempfile \u0026#39;filename\u0026#39; -l logfile log output to file \u0026#39;logfile\u0026#39; --max_errors n exit early after finding \u0026#39;n\u0026#39; errors -v level verbosity (0-20), default is 8 -W Use more CPU-stressful memory copy -A run in degraded mode on incompatible systems -p pagesize size in bytes of memory chunks --filesize size size of disk IO tempfiles -n ipaddr add a network thread connecting to system at \u0026#39;ipaddr\u0026#39; --listen run a thread to listen for and respond to network threads. --no_errors run without checking for ECC or other errors --force_errors inject false errors to test error handling --force_errors_like_crazy inject a lot of false errors to test error handling -F don\u0026#39;t result check each transaction --stop_on_errors Stop after finding the first error. --read-block-size size of block for reading (-d) --write-block-size size of block for writing (-d). If not defined, the size of block for writing will be defined as the size of block for reading --segment-size size of segments to split disk into (-d) --cache-size size of disk cache (-d) --blocks-per-segment number of blocks to read/write per segment per iteration (-d) --read-threshold maximum time (in us) a block read should take (-d) --write-threshold maximum time (in us) a block write should take (-d) --random-threads number of random threads for each disk write thread (-d) --destructive write/wipe disk partition (-d) --monitor_mode only do ECC error polling, no stress load. --cc_test do the cache coherency testing --cc_inc_count number of times to increment the cacheline\u0026#39;s member --cc_line_count number of cache line sized datastructures to allocate for the cache coherency threads to operate --paddr_base allocate memory starting from this address --pause_delay delay (in seconds) between power spikes --pause_duration duration (in seconds) of each pause --local_numa choose memory regions associated with each CPU to be tested by that CPU --remote_numa choose memory regions not associated with each CPU to be tested by that CPU --interleave_size bytes size in bytes of each channel\u0026#39;s data as interleaved between memory channels --channel_width bits width in bits of each memory channel --memory_channel u1,u2 defines a comma-separated list of names for dram packages in a memory channel. Use multiple times to define multiple channels. ./stressapptest -M 14200 -s 36000 -m 8 -i 8 -C 8 -l /data/stressapptest.log 参数说明 -M 14200: 测试内存大小 14200M -s 36000: 测试时常10h，压力测试建议不小于1h -m threads：这个参数用于指定运行内存拷贝线程的数量。内存拷贝线程是执行内存数据复制操作的线程，增加线程数量可以增加内存操作的并发度，从而增加对系统的内存压力。 -i threads：这个参数用于指定运行内存反转（invert）线程的数量。内存反转线程通常是指执行内存数据位反转操作的线程，这也是一种压力测试，可以用于测试内存的写入和读取性能。 -C threads：表示启动的 CPU 压力测试线程的数量。增加这个数字可以增加 CPU 的负载，从而测试 CPU 在高压力下的性能表现。 若测试通过，则终端会打印：Status: PASS – please verify no corrected errors。\nbw_mem ./bw_mem 128M rdwr ","date":"3 February, 2023","id":34,"permalink":"/posts/ddr-%E5%8E%8B%E6%B5%8B%E5%91%BD%E4%BB%A4/","summary":"测试之前可以使用 free -m 查看内存使用情况。","tags":"DDR stress","title":"DDR 压测命令"},{"content":"tar xvf e2fsprogs-1.42.8.tar.gz cd e2fsprogs-1.42.8 mkdir build cd build/ ../configure make sudo make install 问题：\nubuntu20.04 编译报错 undefined reference to 'makedev'\n解决方法: vim \u0026lt;path-to-e2fsprogs-1.42.8\u0026gt;/lib/blkid/devname.c 添加头文件 #include \u0026lt;sys/sysmacros.h\n","date":"3 February, 2023","id":35,"permalink":"/posts/e2fsprogs-1/","summary":"问题：","tags":"e2fs","title":"e2fsprogs-1.42.8 源码编译安装"},{"content":"flowchart LR root[\u0026#34;微积分基础到傅里叶变换学习路径🧠\u0026#34;] %% 一级节点 root --\u0026gt; prereq[\u0026#34;预备知识 📘\u0026#34;] root --\u0026gt; calc1[\u0026#34;一元微积分 📐\u0026#34;] root --\u0026gt; calcn[\u0026#34;多元微积分 ⛳\u0026#34;] root --\u0026gt; ode[\u0026#34;常微分方程 📏\u0026#34;] root --\u0026gt; series[\u0026#34;级数理论 📊\u0026#34;] root --\u0026gt; ft[\u0026#34;傅里叶变换（CFT） 🎛️\u0026#34;] root --\u0026gt; dftfft[\u0026#34;DFT 与 FFT 📈\u0026#34;] root --\u0026gt; app[\u0026#34;应用与实践 💡\u0026#34;] root --\u0026gt; res[\u0026#34;学习资源 🧰\u0026#34;] %% 预备知识二级节点 prereq --\u0026gt; algebra[\u0026#34;基础代数与函数\u0026#34;] prereq --\u0026gt; analytic_geo[\u0026#34;解析几何\u0026#34;] algebra --\u0026gt; real_complex[\u0026#34;实数与复数运算\u0026#34;] algebra --\u0026gt; func_graph[\u0026#34;函数图像与定义域\u0026#34;] algebra --\u0026gt; func_prop[\u0026#34;函数性质：奇偶、周期、连续\u0026#34;] algebra --\u0026gt; target1[\u0026#34;📌 目标：理解基本函数行为，为微积分打下基础\u0026#34;] analytic_geo --\u0026gt; plane_geo[\u0026#34;平面几何：直线、圆、二次曲线\u0026#34;] analytic_geo --\u0026gt; vector_geo[\u0026#34;向量与空间几何：模、点积、叉积\u0026#34;] analytic_geo --\u0026gt; target2[\u0026#34;📌 目标：掌握正交概念，为后续傅里叶展开准备\u0026#34;] %% 一元微积分二级节点 calc1 --\u0026gt; limit_cont[\u0026#34;极限与连续\u0026#34;] calc1 --\u0026gt; deriv_diff[\u0026#34;导数与微分\u0026#34;] calc1 --\u0026gt; integral[\u0026#34;积分学\u0026#34;] limit_cont --\u0026gt; limit_concept[\u0026#34;极限概念、左右极限\u0026#34;] limit_cont --\u0026gt; continuity[\u0026#34;连续性与间断点\u0026#34;] limit_cont --\u0026gt; target3[\u0026#34;📌 目标：能判断函数极限与连续性\u0026#34;] deriv_diff --\u0026gt; deriv_def[\u0026#34;导数定义（斜率）\u0026#34;] deriv_diff --\u0026gt; deriv_rules[\u0026#34;求导规则、链式法则\u0026#34;] deriv_diff --\u0026gt; high_deriv[\u0026#34;高阶导数与物理意义\u0026#34;] deriv_diff --\u0026gt; target4[\u0026#34;📌 目标：掌握导数定义及常用求导技巧\u0026#34;] integral --\u0026gt; indefinite[\u0026#34;不定积分与换元法\u0026#34;] integral --\u0026gt; definite[\u0026#34;定积分几何应用\u0026#34;] integral --\u0026gt; target5[\u0026#34;📌 目标：能计算面积/体积，理解积分与导数互逆\u0026#34;] %% 多元微积分二级节点 calcn --\u0026gt; partial_diff[\u0026#34;偏导数与全微分\u0026#34;] calcn --\u0026gt; multiple_integral[\u0026#34;重积分\u0026#34;] partial_diff --\u0026gt; multivar_graph[\u0026#34;多元函数图像\u0026#34;] partial_diff --\u0026gt; partial_gradient[\u0026#34;偏导、全微分、梯度\u0026#34;] partial_diff --\u0026gt; target6[\u0026#34;📌 目标：掌握多变量函数变化率\u0026#34;] multiple_integral --\u0026gt; double_integral[\u0026#34;二重积分、极坐标变换\u0026#34;] multiple_integral --\u0026gt; region_symmetry[\u0026#34;区域划分与对称性\u0026#34;] multiple_integral --\u0026gt; target7[\u0026#34;📌 目标：能计算二重积分、应用于体积求解\u0026#34;] %% 常微分方程二级节点 ode --\u0026gt; ode1st[\u0026#34;一阶微分方程\u0026#34;] ode --\u0026gt; ode2nd[\u0026#34;二阶线性方程\u0026#34;] ode --\u0026gt; ode_fourier[\u0026#34;与傅里叶的联系\u0026#34;] ode1st --\u0026gt; sep_var[\u0026#34;分离变量法、齐次、线性微分方程\u0026#34;] ode1st --\u0026gt; target8[\u0026#34;📌 目标：掌握常见一阶微分方程求解方法\u0026#34;] ode2nd --\u0026gt; char_eq[\u0026#34;特征方程法（实根/复根/重根）\u0026#34;] ode2nd --\u0026gt; non_homo[\u0026#34;非齐次解：待定系数法\u0026#34;] ode2nd --\u0026gt; target9[\u0026#34;📌 目标：能求解二阶微分方程，理解系统响应\u0026#34;] ode_fourier --\u0026gt; diff_to_alg[\u0026#34;微分方程变换为代数方程\u0026#34;] ode_fourier --\u0026gt; target10[\u0026#34;📌 目标：了解频域解微分方程的优势\u0026#34;] %% 级数理论二级节点 series --\u0026gt; num_series[\u0026#34;数项级数\u0026#34;] series --\u0026gt; power_series[\u0026#34;幂级数\u0026#34;] series --\u0026gt; fourier_series[\u0026#34;傅里叶级数 🔁\u0026#34;] num_series --\u0026gt; conv_tests[\u0026#34;收敛判别法：比值、比较、交错级数\u0026#34;] num_series --\u0026gt; target11[\u0026#34;📌 目标：判断级数是否收敛\u0026#34;] power_series --\u0026gt; taylor_exp[\u0026#34;泰勒展开、收敛半径、逐项微积分\u0026#34;] power_series --\u0026gt; target12[\u0026#34;📌 目标：将函数展开为幂级数近似\u0026#34;] fourier_series --\u0026gt; trig_exp[\u0026#34;三角级数展开\u0026#34;] fourier_series --\u0026gt; orthogonality[\u0026#34;正交性与傅里叶系数计算\u0026#34;] fourier_series --\u0026gt; periodic_ext[\u0026#34;周期延拓与一般周期函数\u0026#34;] fourier_series --\u0026gt; target13[\u0026#34;📌 目标：理解周期函数的频率分解\u0026#34;] %% 傅里叶变换（CFT）二级节点 ft --\u0026gt; series_to_transform[\u0026#34;从级数到变换\u0026#34;] ft --\u0026gt; definition_inverse[\u0026#34;定义与逆变换\u0026#34;] ft --\u0026gt; core_properties[\u0026#34;核心性质 ⭐\u0026#34;] ft --\u0026gt; common_pairs[\u0026#34;常用变换对 🧮\u0026#34;] series_to_transform --\u0026gt; period_limit[\u0026#34;周期极限 → 非周期函数\u0026#34;] series_to_transform --\u0026gt; discrete_freq[\u0026#34;离散频率 → 连续频率\u0026#34;] series_to_transform --\u0026gt; target14[\u0026#34;📌 目标：建立傅里叶变换直觉\u0026#34;] definition_inverse --\u0026gt; forward_inverse[\u0026#34;正变换/逆变换公式\u0026#34;] definition_inverse --\u0026gt; complex_exp[\u0026#34;复指数表示优势\u0026#34;] definition_inverse --\u0026gt; target15[\u0026#34;📌 目标：掌握 CFT 定义及运算\u0026#34;] core_properties --\u0026gt; linearity[\u0026#34;线性、时移频移\u0026#34;] core_properties --\u0026gt; diff_integral[\u0026#34;微分与积分性质\u0026#34;] core_properties --\u0026gt; energy_conservation[\u0026#34;能量守恒（帕塞瓦尔）\u0026#34;] core_properties --\u0026gt; target16[\u0026#34;📌 目标：通过性质简化变换运算\u0026#34;] common_pairs --\u0026gt; rect_sinc[\u0026#34;矩形窗 → sinc\u0026#34;] common_pairs --\u0026gt; delta_exp[\u0026#34;冲激函数 δ，指数函数\u0026#34;] common_pairs --\u0026gt; target17[\u0026#34;📌 目标：熟记常见函数的变换对\u0026#34;] %% DFT 与 FFT 二级节点 dftfft --\u0026gt; discrete_background[\u0026#34;离散化背景\u0026#34;] dftfft --\u0026gt; dft_def[\u0026#34;DFT 定义\u0026#34;] dftfft --\u0026gt; fft[\u0026#34;快速傅里叶变换\u0026#34;] discrete_background --\u0026gt; sampling_theorem[\u0026#34;采样定理（奈奎斯特频率）\u0026#34;] discrete_background --\u0026gt; target18[\u0026#34;📌 目标：理解信号数字化过程\u0026#34;] dft_def --\u0026gt; discrete_mapping[\u0026#34;时域 ↔ 频域的离散映射\u0026#34;] dft_def --\u0026gt; target19[\u0026#34;📌 目标：掌握离散变换计算流程\u0026#34;] fft --\u0026gt; divide_conquer[\u0026#34;分治法，复杂度 O(N log N)\u0026#34;] fft --\u0026gt; target20[\u0026#34;📌 目标：掌握 FFT 原理与实用意义\u0026#34;] %% 应用与实践二级节点 app --\u0026gt; signal_proc[\u0026#34;信号处理 🎧\u0026#34;] app --\u0026gt; image_proc[\u0026#34;图像处理 🖼️\u0026#34;] app --\u0026gt; pde[\u0026#34;偏微分方程求解\u0026#34;] signal_proc --\u0026gt; spectrum_analysis[\u0026#34;频谱分析、滤波器设计（低通/高通）\u0026#34;] signal_proc --\u0026gt; conv_mult[\u0026#34;卷积变频域乘法\u0026#34;] signal_proc --\u0026gt; target21[\u0026#34;📌 目标：能用 FFT 实际处理信号\u0026#34;] image_proc --\u0026gt; noise_removal[\u0026#34;去周期噪声、边缘检测\u0026#34;] image_proc --\u0026gt; target22[\u0026#34;📌 目标：理解图像频率信息\u0026#34;] pde --\u0026gt; heat_wave[\u0026#34;解热传导 / 波动方程\u0026#34;] pde --\u0026gt; target23[\u0026#34;📌 目标：掌握变换方法在 PDE 中的应用\u0026#34;] %% 学习资源二级节点 res --\u0026gt; textbooks[\u0026#34;教材推荐 📚\u0026#34;] res --\u0026gt; online_courses[\u0026#34;在线课程 🎓\u0026#34;] res --\u0026gt; tools_practice[\u0026#34;工具与练习 🛠️\u0026#34;] res --\u0026gt; target24[\u0026#34;📌 目标：搭配练习和可视化工具，提升理解效率\u0026#34;] textbooks --\u0026gt; tongji[\u0026#34;高等数学（同济第七版）第1-6章：函数、导数、积分\u0026#34;] textbooks --\u0026gt; oppenheim_ss[\u0026#34;《信号与系统》Oppenheim：第3、4章傅里叶分析\u0026#34;] textbooks --\u0026gt; oppenheim_fs[\u0026#34;《傅里叶级数与积分变换》（奥本海姆）\u0026#34;] online_courses --\u0026gt; coursera_calc[\u0026#34;Coursera《Calculus for Everyone》[链接](https://www.coursera.org/learn/calculus1)\u0026#34;] online_courses --\u0026gt; mit_signals[\u0026#34;edX MIT《Signals and Systems》[链接](https://ocw.mit.edu/courses/6-003-signals-and-systems-spring-2010/)\u0026#34;] online_courses --\u0026gt; khan_academy[\u0026#34;Khan Academy：微积分 + 傅里叶变换\u0026#34;] tools_practice --\u0026gt; python_fft[\u0026#34;Python：numpy.fft，scipy.signal\u0026#34;] tools_practice --\u0026gt; matlab_fft[\u0026#34;Matlab：fft, freqz\u0026#34;] tools_practice --\u0026gt; desmos[\u0026#34;Desmos：函数图像可视化\u0026#34;] tools_practice --\u0026gt; math_se[\u0026#34;Math Stack Exchange：高质量问题解答\u0026#34;] ","date":"3 February, 2023","id":36,"permalink":"/posts/math/","summary":"","tags":"math","title":"math"},{"content":"python2.7 环境及包管理 sudo apt install python2.7 curl https://bootstrap.pypa.io/pip/2.7/get-pip.py --output get-pip.py sudo python2.7 get-pip.py pip2 install simplejson ","date":"3 February, 2023","id":37,"permalink":"/posts/python2/","summary":"","tags":"Python","title":"python2.7 环境及包管理"},{"content":"vscode remote-ssh 免密登录 环境声明 win10 vscode + remote-ssh + virtualbox (ubuntu 20.04)\nwindows 配置 安装 vscode，remote-ssh 插件 生成 ssh key：ssh-keygen.exe -t rsa 然后一路回车 用户目录下会生成 id_rsa id_rsa.pub 两个文件 服务器 ubuntu 配置 安装 ssh server: sudo apt install openssh-server\n启动 ssh: sudo service sshd start\n此时 windows 就可以通过终端工具 ssh 登录服务器\n生成 ssh key：ssh-keygen.exe -t rsa 然后一路回车\nsudo vim /etc/ssh/sshd_config 取消注释 PubkeyAuthentication yes\n将 windows 生成的 id_rsa.pub 文件的内容加入服务器 ~/.ssh/authorized_keys 文件中，如果该文件不存在就创建一个\nsudo service sshd restart\nwindows 配置 修改用户目录下的配置文件：C:\\Users\\Administrator\\.ssh\\config，内容如下：\nHost 127.0.0.1 HostName 127.0.0.1 User luyang Port 22 Host：别名随便起 HostName: ubuntu 服务器 IP User: ubuntu 登录用户 Port：ssh 登录端口 至此 vscode remote-ssh 便可以免密码登录服务器\n","date":"3 February, 2023","id":38,"permalink":"/posts/vscode_remote-ssh_%E5%85%8D%E5%AF%86%E7%99%BB%E5%BD%95%E9%85%8D%E7%BD%AE/","summary":"win10 vscode + remote-ssh + virtualbox (ubuntu 20.04)","tags":"vscode ssh","title":"vscode remote-ssh 免密登录配置"},{"content":"交叉编译 glibc-2.35 glibc-2.35 更新需要同步用新版本的交叉编译器，这里直接在 Linaro 官网下载了最新的 gcc-linaro-7.5.0-2019.12-x86_64_arm-linux-gnueabihf\nexport PATH=\u0026#34;/code/gcc-linaro-7.5.0-2019.12-x86_64_armlinux-gnueabihf/bin\u0026#34;:$PATH export CROSS_COMPILE=arm-linux-gnueabihf- mkdir build_out; cd build_out ../configure --prefix=/code/glibc-2.35/build_out \\ --host=arm-linux-gnueabihf make make install ","date":"3 February, 2023","id":39,"permalink":"/posts/%E4%BA%A4%E5%8F%89%E7%BC%96%E8%AF%91-glibc-2/","summary":"glibc-2.35 更新需要同步用新版本的交叉编译器，这里直接在 Linaro 官网下载了最新的 gcc-linaro-7.5.0-2019.12-x86_64_arm-linux-gnueabihf","tags":"glibc","title":"交叉编译 glibc-2.35"},{"content":"交叉编译 libxml2-2.9.10 依赖 zlib 源码编译出来的目标文件，请先参考如何交叉编译 zlib 完成之后再来编译。\nexport PATH=\u0026#34;\u0026lt;path-to-gcc-linaro-5.3-2016.02-x86_64_arm-linuxgnueabihf\u0026gt;/bin\u0026#34;:$PATH export CROSS_COMPILE=arm-linux-gnueabihf mkdir build_out ./configure --prefix=/code/libxml2-2.9.10/build_out \\ --disable-static \\ --with-python=no \\ --host=arm-linux-gnueabihf \\ --with-zlib=/code/zlib-1.2.12/build_out make make install ","date":"3 February, 2023","id":40,"permalink":"/posts/%E4%BA%A4%E5%8F%89%E7%BC%96%E8%AF%91-libxml2-2/","summary":"依赖 zlib 源码编译出来的目标文件，请先参考如何交叉编译 zlib 完成之后再来编译。","tags":"libxml","title":"交叉编译 libxml2-2.9.10"},{"content":"交叉编译 Python-2.7.16 需要在代码的根路径新建一个 config.sit，内容参考如下： --enable-shared﻿ 生成动态链接库\nexport PATH=\u0026#34;\u0026lt;path-to-gcc-linaro-5.3-2016.02-x86_64_arm-linuxgnueabihf\u0026gt;/bin\u0026#34;:$PATH export CROSS_COMPILE=arm-linux-gnueabihf export CONFIG_SITE=./config.site # config.site 文件内容如下： cat config.site ac_cv_file__dev_ptmx=no ac_cv_file__dev_ptc=no ./configure --prefix=/code/Python-2.7.16/build_out \\ --host=arm-linux-gnueabihf \\ --build=x86_64 \\ --disable-ipv6 \\ --enable-shared make make install ","date":"3 February, 2023","id":41,"permalink":"/posts/%E4%BA%A4%E5%8F%89%E7%BC%96%E8%AF%91-python-2/","summary":"","tags":"Python","title":"交叉编译 Python-2.7.16"},{"content":"交叉编译 tcpdump-4.99.1 tcp dump 主页 tcpdump-4.99.1.tar.gz libpcap-1.10.1.tar.gz 参考：https://blog.csdn.net/onlyshi/article/details/81081707 tcpdump 依赖 libpcap，需要先编译 libcap。 #!/bin/bash export LIBCAP=/code/libpcap-1.10.1 export TCPDUMP=/code/tcpdump-4.99.1 export CROSS_COMPILETOOL=aarch64-bst-linux cd $LIBCAP mkdir -p install ./configure --prefix=./install --host=arm-linux-gnueabihf --with-pcap=linux make make install cd $TCPDUMP mkdir -p install ./configure --prefix=./install --host=arm-linux-gnueabihf make make install ","date":"3 February, 2023","id":42,"permalink":"/posts/%E4%BA%A4%E5%8F%89%E7%BC%96%E8%AF%91-tcpdump-4/","summary":"","tags":"tcpdump","title":"交叉编译 tcpdump-4.99.1"},{"content":"交叉编译 zlib-1.2.12 export PATH=\u0026#34;\u0026lt;path-to-gcc-linaro-5.3-2016.02-x86_64_arm-linux-gnueabihf\u0026gt;/bin\u0026#34;:$PATH export CROSS_COMPILE=arm-linux-gnueabihf export HOST=arm-linux-gnueabihf mkdir build_out ./configure --prefix=/code/zlib-1.2.12/build_out make make install ","date":"3 February, 2023","id":43,"permalink":"/posts/%E4%BA%A4%E5%8F%89%E7%BC%96%E8%AF%91-zlib-1/","summary":"","tags":"zlib","title":"交叉编译 zlib-1.2.12"},{"content":"痛点说明 当前板子集成的是 busybox dmesg，打印内核日志不支持 CST 时间戳格式，无法与应用层日志时间对齐\nroot@qualcomm:~# busybox dmesg --help BusyBox v1.29.2 (2021-07-28 06:25:45 UTC) multi-call binary. Usage: dmesg [-c] [-n LEVEL] [-s SIZE] Print or control the kernel ring buffer -c Clear ring buffer after printing -n LEVEL Set console logging level -s SIZE Buffer size -r Print raw message buffer 时间戳格式\n[ 74.247018] overflow FE mux_index 4 [ 74.269371] overflow FE mux_index 4 [ 74.294086] overflow FE mux_index 4 交叉编译 dmesg@util-linux git clone https://github.com/util-linux/util-linux.git sudo apt install autopoint autoconf automake libtool mkdir build ./tools/config-gen all # --prefix 必须是绝对路径 export PATH=$PATH:\u0026lt;path-to-cross-compile\u0026gt; ./configure --host=aarch64-linux-gnu --prefix=/home/luyang/code/tt/util-linux/build make dmesg -j8 $ file dmesg dmesg: ELF 64-bit LSB executable, ARM aarch64, version 1 (SYSV), dynamically linked, interpreter /lib/ld-linux-aarch64.so.1, for GNU/Linux 3.14.0, BuildID[sha1]=64098e1379e47231f4f3b1578fa842bc3d1d1251, with debug_info, not strippedfile dmesg 编译报错及解决方案\nfatal error: sys/random.h: No such file or directory `vim lib/randutils.c +30` 修改前：`# include \u0026lt;sys/random.h\u0026gt;` 修改后：`# include \u0026lt;/usr/include/linux/random.h\u0026gt;` 结果验证 把 dmesg 推到板子的 /userdata 目录下，然后登录板子进入 /userdata 目录\nroot@qualcomm:/userdata# while true; do ./dmesg; ./dmesg --time-format iso -c; echo; date; sleep 1; done Sat Jan 1 00:01:03 CST 2000 [ 74.247018] overflow FE mux_index 4 [ 74.269371] overflow FE mux_index 4 [ 74.294086] overflow FE mux_index 4 [ 74.294564] overflow FE mux_index 4 [ 74.295046] FE overflow 16 mux_index 4 temp_flow 0x10 [ 74.295709] FE overflow 0 mux_index 4 temp_flow 0x0 [ 74.231740] overflow FE mux_index 4 [ 74.247018] overflow FE mux_index 4 [ 74.269371] overflow FE mux_index 4 [ 74.294086] overflow FE mux_index 4 [ 74.294564] overflow FE mux_index 4 [ 74.295046] FE overflow 16 mux_index 4 temp_flow 0x10 [ 74.295709] FE overflow 0 mux_index 4 temp_flow 0x0 2000-01-01T00:01:03,774136+08:00 overflow FE mux_index 4 2000-01-01T00:01:03,789414+08:00 overflow FE mux_index 4 2000-01-01T00:01:03,811767+08:00 overflow FE mux_index 4 2000-01-01T00:01:03,836482+08:00 overflow FE mux_index 4 2000-01-01T00:01:03,836960+08:00 overflow FE mux_index 4 2000-01-01T00:01:03,837442+08:00 FE overflow 16 mux_index 4 temp_flow 0x10 2000-01-01T00:01:03,838105+08:00 FE overflow 0 mux_index 4 temp_flow 0x0 ","date":"1 February, 2023","id":44,"permalink":"/posts/dmesg_support_iso_timestamp/","summary":"当前板子集成的是 busybox dmesg，打印内核日志不支持 CST 时间戳格式，无法与应用层日志时间对齐","tags":"linux dmesg","title":"dmesg use CST timestamp"},{"content":"关于 MIPI CSI-2 clock 模式 MIPI_CSI-2_Specification_v1\n7 Physical Layer 7 物理层\nThe CSI-2 uses the MIPI Alliance Standard for D-PHY [2] physical layer.\nCSI - 2 使用 MIPI 联盟的 D - PHY [2] 物理层标准。\nThe physical layer for a CSI-2 implementation is composed of between one and four unidirectional data Lanes and one clock Lane.\nCSI - 2 实现的物理层由一到四个单向数据通道和一个时钟通道组成。\nAll CSI-2 transmitters and receivers shall support continuous clock behavior on the Clock Lane, and optionally may support non-continuous clock behavior.\n所有 CSI - 2 发送器和接收器应在时钟通道上支持连续时钟行为，并且可选择支持非连续时钟行为。\nFor [[continuous]] clock behavior the Clock Lane remains in high-speed mode generating active clock signals between the transmission of data packets.\n对于[[连续]]时钟行为，时钟通道在数据包传输之间保持在高速模式，生成有效时钟信号。\nFor [[non-continuous]] clock behavior the Clock Lane enters the LP-11 state between the transmission of data packets.\n对于[[非连续]]时钟行为，时钟通道在数据包传输之间进入 LP - 11 状态。\nThe minimum physical layer requirement for a CSI-2 transmitter is\nCSI - 2 发送器的最低物理层要求是\nData Lane Module: Unidirectional master, HS-TX, LP-TX and a CIL-MUYN function\n数据通道#模块：单向主设备，高速发送（HS - TX），低速发送（LP - TX）以及 CIL - MUYN 功能\nClock Lane Module: Unidirectional master, HS-TX. LP-TX and a CIL-MCNN function\n时钟通道#模块：单向主设备，高速发送（HS - TX），低速发送（LP - TX）以及 CIL - MCNN 功能\nThe minimum physical layer requirement for a CSI-2 receiver is\nCSI - 2 接收器的最低物理层要求是\nData Lane Module: Unidirectional slave, HS-RX, LP-RX, and a CIL-SUYN function\n数据通道#模块：单向从设备，高速接收（HS - RX），低速接收（LP - RX）以及 CIL - SUYN 功能\nClock Lane Module: All unidirectional slave, HS-RX, LP-RX, and a CIL-SCNN function\n时钟通道#模块：所有单向从设备，高速接收（HS - RX），低速接收（LP - RX）以及 CIL - SCNN 功能\nAll CSI-2 implementations shall support forward escape ULPM on all Data Lanes.\n所有 CSI - 2 实现应在所有数据通道上支持前向逃逸超低功耗模式（ULPM）。\n连续模式 在连续模式下，MIPI 时钟会持续运行，不间断地提供时钟信号。这意味着时钟信号在任何时候都是可用的，使得数据可以在任何时间点进行传输。连续模式的优点在于其稳定性和可预测性，因为它确保了时钟信号的连续性和一致性。然而，连续模式也可能导致更高的功耗，因为时钟信号始终在运行，即使在没有数据传输的时候也是如此。\n非连续模式 相比之下，非连续模式的 MIPI 时钟会在没有数据传输需求时停止运行，从而节省功耗。在非连续模式下，时钟信号只在需要时进行提供，这意味着在没有数据传输时，时钟信号会处于休眠状态。这种模式对于需要延长电池寿命的移动设备来说非常有用，因为它可以减少不必要的功耗。然而，非连续模式可能会导致一些延迟，因为每次需要传输数据时都需要重新启动时钟信号。\n","date":"30 January, 2023","id":45,"permalink":"/posts/gmsl2_csi2_clk/","summary":"MIPI_CSI-2_Specification_v1","tags":"","title":"GMSL2 CSI-2 clock"},{"content":"ubuntu 20.04\nsudo apt install gcc perl curl wget git vim build-essential make cmake bison flex android-sdk-ext4-utils mtd-utils zlib1g-dev lzop python2 curl https://bootstrap.pypa.io/pip/2.7/get-pip.py --output get-pip.py sudo python2 get-pip.py $ pip --version pip 20.3.4 from /home/luyang/.local/lib/python2.7/site-packages/pip (python 2.7) pip install networkx==1.8.1 pip install xlrd==0.9.3 pip install simplejson==3.17.6 pip install numpy==1.16.5 ","date":"30 January, 2023","id":46,"permalink":"/posts/hobotbuildenv/","summary":"ubuntu 20.04","tags":"","title":"Hobot 编译环境"},{"content":"ROS app project 新建一个空目录作为项目顶层目录： mkdir catkin_ws; cd catkin_ws\ncatkin_ws 目录下新建 src 目录：mkdir src\ncatkin_make Notice:\nbash 下操作 必须创建 src 目录 执行完 catkin_make 之后目录下就创建了一堆文件：\nluyang@KFC:~/catkin_ws$ tree -L 2 . ├── build │ ├── CATKIN_IGNORE │ ├── CMakeCache.txt │ ├── CMakeFiles │ ├── CTestConfiguration.ini │ ├── CTestCustom.cmake │ ├── CTestTestfile.cmake │ ├── Makefile │ ├── atomic_configure │ ├── bin │ ├── catkin │ ├── catkin_generated │ ├── catkin_make.cache │ ├── cmake_install.cmake │ ├── gtest │ └── test_results ├── devel │ ├── _setup_util.py │ ├── env.sh │ ├── lib │ ├── local_setup.bash │ ├── local_setup.fish │ ├── local_setup.sh │ ├── local_setup.zsh │ ├── setup.bash │ ├── setup.fish │ ├── setup.sh │ └── setup.zsh └── src └── CMakeLists.txt -\u0026gt; /opt/ros/noetic/share/catkin/cmake/toplevel.cmake 11 directories, 19 files cd src git clone https://github.com/ros/ros_tutorials.git 编译 demo\ncd ../ catkin_ws$ source devel/setup.bash catkin_ws$ catkin_make luyang@KFC:~/catkin_ws$ ls src/ros_tutorials/ ros_tutorials roscpp_tutorials rospy_tutorials turtlesim luyang@KFC:~//catkin_ws$ ls src/ros_tutorials/turtlesim/ CHANGELOG.rst CMakeLists.txt images include launch msg package.xml src srv tutorials 运行小乌龟：\n# 终端 A roscore # 终端 B rosrun turtlesim turtlesim_node ","date":"30 January, 2023","id":47,"permalink":"/posts/ros/","summary":"新建一个空目录作为项目顶层目录： mkdir catkin_ws; cd catkin_ws","tags":"","title":"ROS"},{"content":"td ubuntu 18.04\nsudo apt-get install -y wget zip openssh-server sshfs expect gcc python2.7 python3 xz-utils git make vim android-tools-adb android-tools-fastboot libyaml-dev libssl-dev bc u-boot-tools nfs-common gawk rsync rdiff android-tools-fsutils sudo apt-get install libncurses5-dev libncursesw5-dev libelf-dev libgmp-dev libmpc-dev ","date":"30 January, 2023","id":48,"permalink":"/posts/%E8%80%81%E9%BB%91%E7%BC%96%E8%AF%91%E7%8E%AF%E5%A2%83/","summary":"","tags":"","title":"老黑编译环境"},{"content":"Anaconda 安装 https://github.com/akfamily/akshare/blob/main/docs/topic/anaconda/anaconda-00.md\nResources akshare wiki PyCharm Jupyter notebook support ","date":"26 June, 2021","id":49,"permalink":"/posts/stock/","summary":"https://github.com/akfamily/akshare/blob/main/docs/topic/anaconda/anaconda-00.md","tags":"Python stock akshare","title":"akshare\r 学习笔记"},{"content":"https://www.analog.com/media/en/technical-documentation/user-guides/gmsl2-general-user-guide.pdf\nhttps://www.analog.com/media/en/technical-documentation/data-sheets/max96752.pdf\nhttps://www.analog.com/media/en/technical-documentation/data-sheets/max9295d.pdf\nGMSL2 General User Guide Key Features • Four-wire main (connects to remote peripheral) or four-wire subordinate (connects to µC/SoC).\n• Remote-side SPI bus supports SPI modes 0 or 3; local-side SPI bus supports SPI mode 0.\n• Device filtering on (multiple SPI interfaces with different SPI IDs) or off (point-to-point SPI interface).\n• Subordinate Select active low or high.\n• 600kHz to 25MHz or 50MHz SPI clock (depending on device).\n• MSB first (for control commands).\n• Pin or I2C control of RO and BNE input/output.\n18.Serial Peripheral Interface 18.3.3.1 SPI Burst Write Set RO. Send 0xA0 (Set SPI Target = 0, optional if only one device). Send 0xA4/A5 (Assert SS1/SS2). Clear RO. Send Cmd Byte (Read/Write and Address MS bit). Send Addrs Byte. Send Write Byte. Set RO. Wait for BNE = 1. Send 0xA6/Read Byte (Discard). Clear RO. Repeat 7 - 11 until all data is written. Set RO. Wait for BNE = 1. Send 0xA6/Read Byte (Discard) (Clear SS). Send 0xA6/Read Byte (Discard) (Clear SS). 18.3.3.2 SPI Burst Read Set RO. Send 0xA0 (Set SPI Target = 0, optional if only one device). Send 0xA4/A5 (Assert SS1/SS2). Clear RO. Send Cmd Byte (Read/Write and Address MS bit). Send Addrs Byte. Set RO. Wait for BNE = 1. Send 0xA7/Read Byte (Read Data) (Discard first two reads, remaining are valid). Repeat Steps 8 - 9 until all but two bytes are read. Wait for BNE = 1. Send 0xA6/Read Byte (Valid Data) (Clear SS). Send 0xA6/Read Byte (Last Valid Data) (Clear SS). 硬件框图 SPI 初始化 详细寄存器描述可以参考官网提供的 DataSheet\nIndex Device Reg Value Desc 1 MAX9295D 0x173 0xFA 2 MAX9295D 0x174 0xFA SCK 600KHz 3 MAX9295D 0x175 0xFA SCK 600KHz 4 MAX9295D 0x176 0x0C 5 MAX96752 0x4E6 0x03 0x4E6 0x4F6 6 MAX96752 0x4E9 0x00 0x4E9 0x4F9 7 MAX9295D 0x172 0x00 #SPI mode 0 8 MAX96752 0x4E0 0x09 0x4E0 0x4F0 9 MAX9295D 0X170 0X0B SPI mode 0 的波形 SPI mode 3 配置 0x172 设置 0x0C OK 错误的配置：0x172 设置 0x04 ","date":"1 January, 1970","id":50,"permalink":"/posts/adi_gmsl2_serdes_spi/","summary":"https://www.analog.com/media/en/technical-documentation/user-guides/gmsl2-general-user-guide.pdf","tags":"ADI MAXIM SERDES GMSL MIPI SPI","title":"ADI GMSL2 SERDES SPI"},{"content":"下载jdk 1.7\nhttps://repo.huaweicloud.com/java/jdk/7u80-b15/jdk-7u80-linux-x64.tar.gz\n解压\ntar xzvf jdk-7u80-linux-x64.tar.gz\nandroid 18.04 jdk1.7 android 7.1 安装\nsudo mv jdk1.7.0_80 /usr/lib/\nswitchjdk7.sh 文件内容如下，该文件放在代码顶层目录：\n# add JDK7 cofig ---- export JAVA_HOME=/usr/lib/jdk1.7.0_80/ export JRE_HOME=${JAVA_HOME}/jre export CLASSPATH=.:${JAVA_HOME}/lib:${JRE_HOME}/lib export PATH=${JAVA_HOME}/bin:$PATH # add JDK7 cofig ---- 执行如下命令切换java 1.7，仅当前终端有效\nsource switchjdk7.sh\nhttps://repo.huaweicloud.com/java/jdk/6u45-b06/\nhttps://repo.huaweicloud.com/java/jdk/7u80-b15/\nhttps://www.oracle.com/java/technologies/javase/javase-jdk8-downloads.html\n","date":"1 January, 1970","id":51,"permalink":"/posts/androidjava-/","summary":"下载jdk 1.7","tags":"android java","title":"Android Java 1.7 环境配置"},{"content":"工具 AndroidStudio 信息 Android Studio 默认设置\nSDK Folder: \u0026ldquo;%APPDATA%\\Local\\Android\\Sdk\u0026rdquo; JDK Folder: \u0026ldquo;C:\\Program Files\\Android\\Android Studio\\jre\u0026rdquo; 问题解决 安装完Android Studio首次启动报错 Unable to access Android SDK add-on list 选择cancel\ngradle 下载环境配置 For Windows\nC:\\Users\\luyang\\.gradle\\init.gradle 如果没有该文件就自己新建一个，内容如下\nallprojects{ repositories { def ALIYUN_REPOSITORY_URL = \u0026#39;https://maven.aliyun.com/repository/public/\u0026#39; def ALIYUN_JCENTER_URL = \u0026#39;https://maven.aliyun.com/repository/jcenter/\u0026#39; def ALIYUN_GOOGLE_URL = \u0026#39;https://maven.aliyun.com/repository/google/\u0026#39; def ALIYUN_GRADLE_PLUGIN_URL = \u0026#39;https://maven.aliyun.com/repository/gradle-plugin/\u0026#39; all { ArtifactRepository repo -\u0026gt; if(repo instanceof MavenArtifactRepository){ def url = repo.url.toString() if (url.startsWith(\u0026#39;https://repo1.maven.org/maven2/\u0026#39;)) { project.logger.lifecycle \u0026#34;Repository ${repo.url} replaced by $ALIYUN_REPOSITORY_URL.\u0026#34; remove repo } if (url.startsWith(\u0026#39;https://jcenter.bintray.com/\u0026#39;)) { project.logger.lifecycle \u0026#34;Repository ${repo.url} replaced by $ALIYUN_JCENTER_URL.\u0026#34; remove repo } if (url.startsWith(\u0026#39;https://dl.google.com/dl/android/maven2/\u0026#39;)) { project.logger.lifecycle \u0026#34;Repository ${repo.url} replaced by $ALIYUN_GOOGLE_URL.\u0026#34; remove repo } if (url.startsWith(\u0026#39;https://plugins.gradle.org/m2/\u0026#39;)) { project.logger.lifecycle \u0026#34;Repository ${repo.url} replaced by $ALIYUN_GRADLE_PLUGIN_URL.\u0026#34; remove repo } } } maven { url ALIYUN_REPOSITORY_URL } maven { url ALIYUN_JCENTER_URL } maven { url ALIYUN_GOOGLE_URL } maven { url ALIYUN_GRADLE_PLUGIN_URL } } } ubuntu android studio system entry Android Studio -\u0026gt; Tools -\u0026gt; Create Desktop Entry\n","date":"1 January, 1970","id":52,"permalink":"/posts/androidstudioenv/","summary":"Android Studio 默认设置","tags":"android AndroidStudio","title":"Android Studio Env"},{"content":"am 命令说明 am start -n 命令是 Android 调试桥（ADB）工具的一部分，用于在 Android 设备上启动一个活动。以下是该命令及其组成部分的详细解释：\nam: 代表 Activity Manager（活动管理器）。它是一个命令行工具，可以用于在 Android 设备上执行各种与活动、服务和广播相关的操作。 start: 这个子命令用于启动一个活动。活动表示一个带有用户界面的单个屏幕，启动活动意味着打开一个特定的应用程序界面。 -n: 该选项指定你想要启动的活动的组件名称。组件名称由两部分组成： 应用程序的 包名（例如 com.android.gallery3d）。 你想要启动的活动的 完整类名（例如 .app.GalleryActivity）。 组件名称的格式为 package_name/.ActivityName。\n使用示例 启动图库应用的主活动：\nadb shell am start -n com.android.gallery3d/.app.GalleryActivity adb shell: 在设备上打开一个命令行界面。 am start -n: 启动指定的活动。 com.android.gallery3d/.app.GalleryActivity: 指定要启动的包名和活动。 其他选项 --display \u0026lt;display_id\u0026gt;: 如果设备有多个显示屏，可以指定使用哪个显示屏。 -d \u0026lt;data_uri\u0026gt;: 指定一个数据 URI（例如文件路径或网页链接），活动在启动时可以使用这个 URI。 -a \u0026lt;action\u0026gt;: 指定要执行的操作，例如 android.intent.action.VIEW。 实际示例 如果你想在显示屏 3 上打开图库应用中的特定图片：\nadb shell am start -n com.android.gallery3d/.app.GalleryActivity --display 3 这个命令将在显示屏 3 上打开图库应用的 GalleryActivity。\n如何获取 package_name 以及 activity_name pm list packages 命令获取当前系统中的所有 package。\n130|console:/ # pm list packages ...... package:com.android.internal.systemui.navbar.gestural package:com.android.gallery3d package:com.android.providers.userdictionary ...... 以 gallery3d com.android.gallery3d 为例：\nconsole:/ # dumpsys package com.android.gallery3d | grep -A 1 \u0026#39;MAIN\u0026#39; android.intent.action.MAIN:[ 1080.400705] servicemanager: Since \u0026#39;artd\u0026#39; could not be found, trying to start it as a lazy AIDL service. (if it\u0026#39;s not configured to be a lazy service, it may be stuck starting or still starting). c99ebe com.android.gallery3d/.app.GalleryActivity filter 92aab1f Action: \u0026#34;android.intent.action.MAIN\u0026#34; Category: \u0026#34;android.intent.category.DEFAULT\u0026#34; -- Action: \u0026#34;android.intent.action.MAIN\u0026#34; be96ced com.andro[ 1080.418995] init: starting service \u0026#39;artd\u0026#39;... id.gallery3d/.app.Gallery filter de1c722 Action: \u0026#34;android.intent.action.MAIN\u0026#34; Category: \u0026#34;android.intent.category.DEFAULT\u0026#34; -- Action: \u0026#34;android.intent.action.MAIN\u0026#34; Category: \u0026#34;android.intent.category.DEFAULT\u0026#34; -- [ 1080.446599] init: ... started service \u0026#39;artd\u0026#39; has pid 2312 [ 1080.458298] BpBinder: onLastStrongRef automatically unlinking death recipients: privateFlags=[ PRIVATE_FLAG_ACTIVITIES_RESIZE_MODE_RESIZEABLE_VIA_SDK_VERSION PRIVATE_FLAG_REQUEST_LEGACY_EXTERNAL_STORAGE HAS_DOMAIN_URLS PRODUCT PRIVATE_FLAG_ALLOW_NATIVE_HEAP_POINTER_TAGGING ] forceQueryable=false -- privatePkgFlags=[ PRI[ 1080.472553] init: Control message: Processed ctl.interface_start for \u0026#39;aidl/artd\u0026#39; from pid: 248 (/system/bin/servicemanager) VATE_FLAG_ACTIVITIES_RESIZE_MODE_RESIZEABLE_VIA_SDK_VERSION PRIVATE_FLAG_REQUEST_LEGACY_EXTERNAL_STORAGE HAS_DOMAIN_URLS PRODUCT PRIVATE_FLAG_ALLOW_NATIVE_HEAP_POINTER_TAGGING ] apexModuleName=null 关键信息：c99ebe com.android.gallery3d/.app.GalleryActivity filter 92aab1f\n对应的 package and activity name 组合：com.android.gallery3d/.app.GalleryActivity\n套用到 am 命令中就是：\nam start -n com.android.gallery3d/.app.GalleryActivity --display 3 ","date":"1 January, 1970","id":53,"permalink":"/posts/android%E4%BD%BF%E7%94%A8am%E5%91%BD%E4%BB%A4%E5%90%AF%E5%8A%A8%E4%B8%80%E4%B8%AA%E6%B4%BB%E5%8A%A8%E7%BB%84%E4%BB%B6/","summary":"am start -n 命令是 Android 调试桥（ADB）工具的一部分，用于在 Android 设备上启动一个活动。以下是该命令及其组成部分的详细解释：","tags":"android adb am pm activity","title":"Android 使用 am 命令启动一个活动组件"},{"content":"Android10的基线代码google已经将prebuilt的ccache移除,但是保留了相关功能选项\ncommit 326e7e2cbd95fc2b1a1f858fb29904c9d3974843 Author: Dan Willemsen \u0026lt;dwillemsen@google.com\u0026gt; Date: Thu Apr 5 15:48:16 2018 -0700 Remove our binary of ccache This version is rather old, and has many known bugs. The build system is no longer providing ccache, but preserving the option to use your own at your own risk. Bug: 32748498 Test: cs/ccache Change-Id: I894a11445127bf8cb3a7ac5a119c500f2c572fb9 安卓10之前配置\nexport USE_CCACHE=true export CCACHE_DIR=$HOME/.cache prebuilts/misc/linux-x86/ccache/ccache -M 10G 安卓10+通过使用的HOST操作系统安装对应的ccache软件包\nexport USE_CCACHE=true export CCACHE_EXEC=/usr/bin/ccache export CCACHE_DIR=$HOME/.cache ${CCACHE_EXEC} -M 50G 可以通过如下命令查询cache状态 ccache -s\n","date":"1 January, 1970","id":54,"permalink":"/posts/android10%E7%BC%96%E8%AF%91%E5%BC%80%E5%90%AFccache/","summary":"Android10的基线代码google已经将prebuilt的ccache移除,但是保留了相关功能选项","tags":"windows android ccache","title":"Android10编译开启ccache"},{"content":"Window10 Beyond Compare BCompare-4.2.4.22795 key key\nH1bJTd2SauPv5Garuaq0Ig43uqq5NJOEw94wxdZTpU-pFB9GmyPk677gJ vC1Ro6sbAvKR4pVwtxdCfuoZDb6hJ5bVQKqlfihJfSYZt-xVrVU27+0Ja hFbqTmYskatMTgPyjvv99CF2Te8ec+Ys2SPxyZAF0YwOCNOWmsyqN5y9t q2Kw2pjoiDs5gIH-uw5U49JzOB6otS7kThBJE-H9A76u4uUvR8DKb+VcB rWu5qSJGEnbsXNfJdq5L2D8QgRdV-sXHp2A-7j1X2n4WIISvU1V9koIyS NisHFBTcWJS0sC5BTFwrtfLEE9lEwz2bxHQpWJiu12ZeKpi+7oUSqebX+ 如果运行Beyond Compare报错\nThis license key has been revoked ..... C:\\Users\\\u0026lt;username\u0026gt;\\AppData\\Roaming\\Scooter Software\\ 目录下的内容全部删除重新启动BeyondCompare即可。\nfix windows 右键菜单中没有beyond compare选项 Explorer Shell Extension\n","date":"1 January, 1970","id":55,"permalink":"/posts/beyondcompare/","summary":"key","tags":"BeyondCompare","title":"BeyondCompare"},{"content":"Crystal Oscillator 晶体振荡器\n无源晶振 晶振本身并不能起振，需要借助外部振荡电路。因此在实际电路中需要IC上电正常后晶振才能起振。 此时才能测量出晶振波形。 常见晶振频率 晶振常用的频率为 4MHz ~ 50MHz\n网络PHY常见 25MHz GMSL SERDES常见 25MHz 电子钟表常见 32.768MHz 常见无源晶振pin脚定义 无源晶振的频率pin脚不分正负极\n两pin脚无源晶振：一个pin脚为频率输出pin脚，另外一个pin脚是频率输入pin脚。即使反过来，晶振依旧正常工作。 三pin脚晶振：两侧引脚为频率输出pin脚与频率输入pin脚，中间引脚接地。除了注意让这个接地pin脚去接地(GND)，两侧引脚的用法与两脚晶振无异。 四脚贴片无源晶振：pin 1和pin 3为频率输入引脚及频率输出引脚，其余两个pin脚均为接地引脚，即使把它旋转180度，也只是pin 1和pin 3互换位置，即输入pin脚变成了输出pin脚，而输出pin脚则变成输入pin脚，晶振依旧可以正常工作，不会导致任何性能及功能差异。 无源晶振两边加谐振电容 无源晶振的标称频率指在测试时有一个“负载电容”的条件—在晶振工作时满足这个条件， 振荡频率才可能与频率标称值一致（只有在合适的外接电容值满足无源晶振的起振要求时，晶振才能正常工作）。\n无源晶振的实际输出频率并不是完全固定的，而是可以在一定范围内微调，起微调作用的就是这两个外接电容。\n切记: 谐振电容一定要按照芯片参考设计来，搞错了不起振，爱因斯坦可不负责, 高尔基血的教训\nAWR2243 40MHz 晶振起振后波形 ","date":"1 January, 1970","id":56,"permalink":"/posts/crystal/","summary":"Crystal Oscillator 晶体振荡器","tags":"electronic crystal 反相器 皮尔斯振荡器 石英晶体谐振器 爱因斯坦","title":"crystal"},{"content":" Linux debian 4.9.0-6-amd64 #1 SMP Debian 4.9.82-1+deb9u3 (2018-03-02) x86_64\nkk@debian:~$ cat /etc/network/interfaces\n# This file describes the network interfaces available on your system # and how to activate them. For more information, see interfaces(5). source /etc/network/interfaces.d/* # The loopback network interface auto lo iface lo inet loopback 修改后\n# This file describes the network interfaces available on your system # and how to activate them. For more information, see interfaces(5). source /etc/network/interfaces.d/* # The loopback network interface auto lo enp0s3 iface lo inet loopback iface enp0s3 inet static address 192.168.20.103 netmask 255.255.255.0 gateway 192.168.20.1 dns-nameservers 114.114.114.114 kk@debian:~$ /sbin/ifconfig\nenp0s3: flags=4163\u0026lt;UP,BROADCAST,RUNNING,MULTICAST\u0026gt; mtu 1500 inet 192.168.20.103 netmask 255.255.255.0 broadcast 192.168.20.255 inet6 fe80::a00:27ff:fe30:e855 prefixlen 64 scopeid 0x20\u0026lt;link\u0026gt; ether 08:00:27:30:e8:55 txqueuelen 1000 (Ethernet) RX packets 87 bytes 8538 (8.3 KiB) RX errors 0 dropped 0 overruns 0 frame 0 TX packets 155 bytes 21027 (20.5 KiB) TX errors 0 dropped 0 overruns 0 carrier 0 collisions 0 lo: flags=73\u0026lt;UP,LOOPBACK,RUNNING\u0026gt; mtu 65536 inet 127.0.0.1 netmask 255.0.0.0 inet6 ::1 prefixlen 128 scopeid 0x10\u0026lt;host\u0026gt; loop txqueuelen 1 (Local Loopback) RX packets 0 bytes 0 (0.0 B) RX errors 0 dropped 0 overruns 0 frame 0 TX packets 0 bytes 0 (0.0 B) TX errors 0 dropped 0 overruns 0 carrier 0 collisions 0 重启网络服务\nsudo /etc/init.d/networking restart\n这样修改之后, 内网可以 ssh 登陆虚拟机, 但是虚拟机无法连接外网.\n修改方案:\nsudo vim /etc/resolv.conf\n默认该文件是空, 添加如下行:\nnameserver 114.114.114.114 重启网络服务\nsudo /etc/init.d/networking restart\n","date":"1 January, 1970","id":57,"permalink":"/posts/debian4/","summary":"Linux debian 4.9.0-6-amd64 #1 SMP Debian 4.9.82-1+deb9u3 (2018-03-02) x86_64","tags":"debian network","title":"Debian 4.9 Config Static Ip.md"},{"content":"关于 Dokuwiki 详细信息, 请访问官网.\n安装配置 本教程基于 ubuntu 17.10 x64\n参考 DokuWiki Installation 安装 apache php apt-get install apache2 apt-get install php7.1 libapache2-mod-php7.1 php7.1-xml 配置 apache php 修改文件 apache2/sites-available/000-default.conf 配置 apache2 document root 为 dokuwiki 根目录 - DocumentRoot /var/www/html + DocumentRoot /var/www/wikihub 修改文件 /etc/apache2/apache2.conf 配置 apache security \u0026lt;Directory /\u0026gt; Options FollowSymLinks - AllowOverride none + AllowOverride All Require all denied \u0026lt;/Directory\u0026gt; \u0026lt;Directory /usr/share\u0026gt; AllowOverride None Require all granted \u0026lt;/Directory\u0026gt; \u0026lt;Directory /var/www/\u0026gt; Options Indexes FollowSymLinks - AllowOverride none + AllowOverride All Require all granted \u0026lt;/Directory\u0026gt; Activate the \u0026lsquo;mod_rewrite\u0026rsquo; in apache2 to enable .htaccess sudo a2enmod rewrite \u0026amp;\u0026amp; sudo service apache2 restart 安装 dokuwiki 从 dokuwiki 官方下载页面 下载最新版的安装包.\n解压缩下载的压缩包, 并上传/复制到你的网站空间中.\n注意这里一定要将 dokuwiki 的根目录修改为与前边 apache 的配置一致\n我的目录结构如下\nroot@jerry-VirtualBox:/var/www/wikihub# ll total 96 drwxr-xr-x 9 www-data www-data 4096 10月 30 13:30 ./ drwxr-xr-x 3 root root 4096 10月 30 13:29 ../ drwxr-xr-x 2 www-data www-data 4096 10月 30 13:30 bin/ drwxr-xr-x 2 www-data www-data 4096 10月 30 13:30 conf/ -rw-r--r-- 1 www-data www-data 18092 10月 30 13:30 COPYING drwxr-xr-x 12 www-data www-data 4096 10月 30 13:30 data/ -rw-r--r-- 1 www-data www-data 3692 10月 30 13:30 doku.php -rw-r--r-- 1 www-data www-data 19374 10月 30 13:30 feed.php drwxr-xr-x 8 www-data www-data 4096 10月 30 13:35 .git/ -rw-r--r-- 1 www-data www-data 1744 10月 30 13:30 .htaccess.dist drwxr-xr-x 6 www-data www-data 4096 10月 30 13:30 inc/ -rw-r--r-- 1 www-data www-data 2097 10月 30 13:30 index.php drwxr-xr-x 8 www-data www-data 4096 10月 30 13:30 lib/ -rw-r--r-- 1 www-data www-data 306 10月 30 13:30 README drwxr-xr-x 8 www-data www-data 4096 10月 30 13:30 vendor/ -rw-r--r-- 1 www-data www-data 33 10月 30 13:30 VERSION 修改文件权限(否则可能因为权限问题导致访问失败)\nsudo chown -R www-data:www-data /var/www/wikihub 通过浏览器访问 http://localhost/install.php, 并按照页面给出的提示进行安装. 相关填写项描述如下\n维基名称：你wiki的名字，比如我的是wikihub 启用ACL（推荐）：即启用权限控制，这个保持默认（选中状态） 超级用户：输入超级用户的用户名 全名：超级用户的全名，和上一个一样就行 E-Mail：超级用户的电子邮件地址 密码：超级用户的密码 请再输一次：再次输入密码 初始的ACL政策：全局权限控制策略，在下拉列表中选择一个合适的 开放的维基（任何人都有读、写、上传的权限） 公开的维基（任何人都有读的权限，只有注册用户才有写和上传的权限） 关闭的维基（只有注册用户才有读、写、上传的权限） 填写完成后按 保存 完成安装. 为了安全, 最好删除目录下的 install.php 文件. 虽然 Dokuwiki 自身也有保护, install.php 已经不能再次运行, 不过还是以防万一吧.\n通过浏览器访问 http://localhost/dokuwiki.php, 就可以用之前注册的账户登陆进行 wiki 的撰写了.\n常用插件 vshare Plugin to easily embed videos from various video sharing sites into DokuWiki\n","date":"1 January, 1970","id":58,"permalink":"/posts/dokuwiki/","summary":"关于 Dokuwiki 详细信息, 请访问官网.","tags":"dokuwiki wiki","title":"dokuwiki"},{"content":"Flutter 学习笔记 Windows Flutter SDK 安装 Download the Flutter archive from your mirror site. In your preferred browser, go to Flutter SDK archive. https://docs.flutter.cn/release/archive?tab=windows\n20240726 当前最新版本： Flutter 版本： 3.22.3 Dart 版本：3.4.4 https://storage.flutter-io.cn/flutter_infra_release/releases/stable/windows/flutter_windows_3.22.3-stable.zip\n将 flutter_windows_3.22.3-stable.zip sdk 解压到任意位置(根据个人喜好放置)\n\u0026lt;path-to-flutter_windows_3.22.3-stable\u0026gt;\\flutter\n添加环境变量：\n\u0026lt;path-to-flutter_windows_3.22.3-stable\u0026gt;\\flutter\\bin 添加到环境变量 PATH\n验证安装是否成功 重新打开一个新的 Powershell 终端执行：flutter doctor 出现如下界面，说明SDK 安装成功\nPS C:\\Users\\max_h\u0026gt; flutter doctor Doctor summary (to see all details, run flutter doctor -v): [√] Flutter (Channel stable, 3.22.3, on Microsoft Windows [版本 10.0.22631.3880], locale zh-CN) [√] Windows Version (Installed version of Windows is version 10 or higher) [√] Android toolchain - develop for Android devices (Android SDK version 34.0.0) [√] Chrome - develop for the web [√] Visual Studio - develop Windows apps (Visual Studio Community 2022 17.9.6) [√] Android Studio (version 2024.1) [√] VS Code (version 1.87.2) [√] Connected device (3 available) [√] Network resources • No issues found! 配置国内镜像源 Tsinghua University TUNA Association maintains the mirrors.tuna.tsinghua.edu.cn mirror. It includes the Flutter SDK and pub packages.\nTo set your machine to use this mirror, use these commands.\nOn macOS, Linux, or ChromeOS:\nexport PUB_HOSTED_URL=https://mirrors.tuna.tsinghua.edu.cn/dart-pub; export FLUTTER_STORAGE_BASE_URL=https://mirrors.tuna.tsinghua.edu.cn/fluttercontent_copy On Windows:\n$env:PUB_HOSTED_URL=\u0026#34;https://mirrors.tuna.tsinghua.edu.cn/dart-pub\u0026#34;; $env:FLUTTER_STORAGE_BASE_URL=\u0026#34;https://mirrors.tuna.tsinghua.edu.cn/flutter\u0026#34; Using Flutter in China\nhttps://docs.flutter.dev/community/china\n","date":"1 January, 1970","id":59,"permalink":"/posts/flutter/","summary":"将 flutter_windows_3.22.3-stable.zip sdk 解压到任意位置(根据个人喜好放置)","tags":"flutter dart","title":"Flutter"},{"content":" 使用 git clone 命令来克隆主仓库： git clone \u0026lt;主仓库 URL\u0026gt; 进入主仓库所在的根目录，并使用 git submodule init 命令来初始化 submodule： cd \u0026lt;主仓库目录\u0026gt; git submodule init 使用 git submodule update 命令来更新 submodule 中的内容： git submodule update 这个命令会从 submodule 的远程仓库中拉取代码，并将其合并到本地代码中。\n","date":"1 January, 1970","id":60,"permalink":"/posts/git_clone%E5%8C%85%E5%90%ABsubmodule%E7%9A%84%E4%BB%93%E5%BA%93/","summary":"这个命令会从 submodule 的远程仓库中拉取代码，并将其合并到本地代码中。","tags":"git submodule github","title":"git clone 包含 submodule 的仓库"},{"content":"Git 提供了以下两种方式来指定使用哪个 SSH Key 进行认证：\n使用 Git Config 命令 使用 git config 命令来配置 Git 的全局或本地参数。在这个命令中，可以使用 core.sshCommand 参数来指定使用哪个 SSH Key 进行认证。\n例如：\n# 全局范围内使用 SSH Key $ git config --global core.sshCommand \u0026#34;ssh -i ~/.ssh/my_private_key\u0026#34; # 仅对当前仓库使用 SSH Key $ git config core.sshCommand \u0026#34;ssh -i ~/.ssh/my_private_key\u0026#34; 上面的命令会告诉 Git，使用 ~/.ssh/my_private_key 文件作为 SSH 私钥进行认证。\n使用 Git Clone 命令 在使用 git clone 命令克隆项目时，可以通过 -c 或 --config 参数来指定使用哪个 SSH Key 进行认证。示例如下：\n$ git clone -c core.sshCommand=\u0026#34;ssh -i ~/.ssh/my_private_key\u0026#34; git@github.com:user/repo.git 上面的命令将会使用 -i ~/.ssh/my_private_key 指定的 SSH Key 进行认证。\ngit push 使用指定的ssh private key 在使用 Git 上传代码时，可以通过指定 ssh private key 来进行身份验证而非输入用户名和密码。\n打开终端（命令行），并进入到 Git 本地仓库所在目录。 输入以下命令来配置 Git 使用指定的 ssh private key：\n# 如果不执行该指令，ssh-add 可能会报错：Could not open a connection to your authentication agent. eval $(ssh-agent -s) # 其中 /path/to/private/key 替换成你的私钥文件路径。 ssh-add /path/to/private/key 确认已将 private key 加入 ssh-agent 后，在命令行中输入以下命令来测试连接： ssh -T git@github.com # 如果连接成功，则会显示如下信息：\u0026#34;Hi {your username}! You\u0026#39;ve successfully authenticated, but GitHub does not provide shell access.\u0026#34; 执行 Git Push 操作 git push origin master 注意事项 使用 SSH Key 进行认证时，私钥文件必须设置正确的权限（一般是 0600），否则会导致认证失败。\n","date":"1 January, 1970","id":61,"permalink":"/posts/git%E4%BD%BF%E7%94%A8%E6%8C%87%E5%AE%9A%E7%9A%84ssh_key/","summary":"Git 提供了以下两种方式来指定使用哪个 SSH Key 进行认证：","tags":"git ssh github","title":"git 使用指定的 ssh key"},{"content":"nvm node npm curl -o- https://raw.githubusercontent.com/creationix/nvm/v0.33.6/install.sh | bash source ~/.zshrc nvm install node npm config set registry https://registry.npm.taobao.org gitbook npm install gitbook-cli -g gitbook 常见命令 List installed versions:\ngitbook ls List available versions on NPM:\ngitbook ls-remote Install a specific version:\ngitbook fetch 2.1.0 # or a pre-release gitbook fetch beta Update to the latest version\ngitbook update Uninstall a specific version\ngitbook uninstall 2.0.1 使用 gitbook init gitbook serve (该命令首先会执行 gitbook build 编译书籍, 完成以后会打开一个 web 服务器, 监听在本地的 4000 端口) plugin 安装方法 在 git book 项目的根目录下执行\nnpm install \u0026lt;plugin_name\u0026gt; 常用 plugins 列表 gitbook-plugin-page-toc install this plugin npm install gitbook-plugin-page-toc add below code to book.json under the root dir of your git book repo { \u0026#34;plugins\u0026#34;: [ \u0026#34;page-toc\u0026#34; ], \u0026#34;pluginsConfig\u0026#34;: { } } gitbook-plugin-todo install this plugin npm install --save gitbook-plugin-todo add below code to book.json under the root dir of your git book repo { \u0026#34;plugins\u0026#34;: [\u0026#34;todo\u0026#34;] } gitbook-plugin-toggle-chapters install this plugin npm install gitbook-plugin-toggle-chapters add below code to book.json under the root dir of your git book repo { \u0026#34;plugins\u0026#34;: [\u0026#34;toggle-chapters\u0026#34;] } gitbook-plugin-youtubex install this plugin git clone https://github.com/ymcatar/gitbook-plugin-youtubex node_modules/gitbook-plugin-youtubex add below code to book.json under the root dir of your git book repo \u0026#34;plugins\u0026#34;: [\u0026#34;youtubex\u0026#34;] \u0026#34;pluginsConfig\u0026#34;: { \u0026#34;youtubex\u0026#34;: { \u0026#34;embedDescription\u0026#34;: { \u0026#34;en\u0026#34;: \u0026#34;Watch this video!\u0026#34;, \u0026#34;de\u0026#34;: \u0026#34;Eingebettetes video:\u0026#34; } } } jadu/gitbook-theme clone theme project git clone https://github.com/jadu/gitbook-theme.git cp -r gitbook-theme/assets node_modules/ add below code to book.json under the root dir of your git book repo \u0026#34;styles\u0026#34;:{ \u0026#34;website\u0026#34;: \u0026#34;assets/continuum/cxm.css\u0026#34; } 执行命令 gitbook install 生成 pdf epub 在gitbook中实现多级导航栏的支持 ","date":"1 January, 1970","id":62,"permalink":"/posts/gitbook/","summary":"List installed versions:","tags":"gitbook","title":"gitbook"},{"content":"MAX96724 MAX96724 相关资源 product overview MAX96724/F/R 英文数据手册 Rev.4 MAX96724/F/R Users Guide GMSL2 Channel Specification User Guide Rev 1 MAX96717F: CSI-2 to GMSL2 Serializer Data Sheet (Rev. 5) MAX96724 MAX9295D pipes and csi2 GMSL2 forward link and reverse link In GMSL2, the [[forward link]] transmits data from the serializer (e.g., a camera) to the deserializer (e.g., a display or processor), while the [[[reverse link]]] transmits data in the opposite direction, from the deserializer to the serializer.\nGMSL2 uses a full-duplex, bidirectional architecture, meaning both channels operate simultaneously.\nForward Channel Transmits video and other data from the serializer to the deserializer. Operates at a fixed data rate of either 3 Gbps or 6 Gbps.\nReverse Channel Transmits control signals, status information, and sometimes audio data from the deserializer to the serializer. Operates at a fixed data rate of 187.5 Mbps.\n如何确认 DEV_ID 0xD 如何配置并确认 GMSL mode 和 GMSL RX rate 0x6 0x10 0x11 0x18 如何确认 GMSL Link Lock Status 配置流程：\nmax96724fr-user-guide.pdf\ngmsl2-general-user-guide.pdf\n实际调试中，系统开机内核初始化 serdes 之后，通过脚本去修改 GMSL2 link rate 为 6G\n参考 gmsl2-general-user-guide.pdf 描述的流程：\n修改 serializer and deserializer 为 6G 对 seserializer 执行一次 GMSL link one-shot reset 即可 (我的实验中通过对 deser GMSL link 做了一次 one-shot reset，因此对 ser 或者 deser 其中之一做一次 GMSL Link one-shot reset 即可) gmsl2-general-user-guide.pdf 如何确认serializer 是否收到了mipi 数据以及 mipi 数据量是否超过了 GMSL 的带宽 https://www.analog.com/media/en/technical-documentation/data-sheets/max96717f.pdf\nMAX96717 有 1 个 pipe line: pipe Z, 其他 serdes 自行查看相应数据手册。 VID_TX Z 包含的寄存器就是关于 PIPE Z 的寄存器。\nBIT 7: PCLKDET 用于标识是否收到 mipi 数据，如果该位为 1，表示收到了 mipi 数据。\nBIT 5: OVERFLOW 用于标识 mipi 数据量是否超过了 GMSL 带宽，如果该位为 1，表示收到了 mipi 数据量超过了 GMSL 带宽。\n如果当前 GMSL 带宽配置为 3G 则可以尝试调试 GMSL 为 6G。 如果 GMSL 已经为 6G 就只能优化 mipi 带宽或调整方案。 e.g. MAX9295D 为例：\ni2ctransfer -y -f 0 w2@\u0026lt;slave address\u0026gt; 0x01 0x02 r1 i2ctransfer -y -f 0 w2@\u0026lt;slave address\u0026gt; 0x01 0x0A r1 i2ctransfer -y -f 0 w2@\u0026lt;slave address\u0026gt; 0x01 0x12 r1 i2ctransfer -y -f 0 w2@\u0026lt;slave address\u0026gt; 0x01 0x1A r1 没数据返回结果：0x0A 有数据返回结果：0x8A\n关于解串器别名摄像头 MAX96717 提供了两组别名寄存器，请注意这些寄存器 bit0 reserved\nreg description 0x42 SRC_A[6:0] 0x43 DST_A[6:0] 0x44 SRC_B[6:0] 0x45 DST_B[6:0] 注意： SRC \u0026mdash; ALIAS ADDR, DST \u0026mdash; ORIGIN ADDR\nWhen an 12c transaction across the GiISLlink has a device address ma!ching 1zcSRc A the dewce address as seen on theremote side is replaced by the deviceaddress in 12C DSTA\n# i2ctransfer -y -f 0 w2@0x44 0x00 0x42 r1 0xa8 = 0x54 \u0026lt;\u0026lt; 1 # i2ctransfer -y -f 0 w2@0x44 0x00 0x43 r1 0x52 = 0x29 \u0026lt;\u0026lt; 1 # i2ctransfer -y -f 0 w2@0x44 0x00 0x44 r1 0xaa = 0x55 \u0026lt;\u0026lt; 1 # i2ctransfer -y -f 0 w2@0x44 0x00 0x45 r1 0x50 = 0x28 \u0026lt;\u0026lt; 1 手动控制 SER MFP 对外输出高低电平 MAX96717 MFP ctrl register\n// MFP0 ~ MFP16 static uint16_t max96717_mfp_ctrl_regs[] = { 0x02BE, 0x02C1, 0x02C4, 0x02C7, 0x02CA, 0x02CD, 0x02D0, 0x02D3, 0x02D6, 0x02D9, 0x02DC, 0x02DF, 0x02E2, 0x02E5, 0x02E8, 0x02EB, 0x2EE}; 输出低电平，value 设置为 0x80\n输出高电平，value 设置为 0x90\nserializer device i2c address （如果已经别名请使用alias i2c address）\n命令格式：\ni2ctransfer -y -f \u0026lt;i2c_bus\u0026gt; w3@\u0026lt;i2c_addr\u0026gt; \u0026lt;reg_high_8bit\u0026gt; \u0026lt;reg_low_8bit\u0026gt; \u0026lt;value\u0026gt; 假设 i2c bus 0, i2c alias address 0x44，MFP6, MFP7 输出低电平\ni2ctransfer -y -f 0 w3@0x44 0x02 0xD0 0x80 i2ctransfer -y -f 0 w3@0x44 0x02 0xD3 0x80 假设 i2c bus 0, i2c alias address 0x44，MFP6, MFP7 输出高电平\ni2ctransfer -y -f 0 w3@0x44 0x02 0xD0 0x90 i2ctransfer -y -f 0 w3@0x44 0x02 0xD3 0x90 MAX96724 MAX96717 I2C 速率配置 Fast-mode Plus\n#!/bin/bash # DES i2ctransfer -y -f 0 w3@0x05 0x06 0x40 0x06 i2ctransfer -y -f 0 w3@0x05 0x06 0x41 0x76 # SER i2ctransfer -y -f 0 w3@0x44 0x00 0x40 0x06 i2ctransfer -y -f 0 w3@0x44 0x00 0x41 0x76 MAX96724 ![[Pasted image 20240827225310.png]] ![[Pasted image 20240827225321.png]] ![[Pasted image 20240827225333.png]]\nMAX96717 ![[Pasted image 20240827225457.png]] ![[Pasted image 20240827225505.png]] ![[Pasted image 20240827225513.png]]\n关于 GMSL2 Soft DataType definition 像素格式代码 描述 0x10 GENERIC8 0x11 GENERIC8 0x12 EMBEDDED 0x1E YUV422 8-bit 0x1F YUV422 10-bit 0x22 RGB565 0x23 RGB666 0x24 RGB888 0x2A RAW8 0x2B RAW10 0x2C RAW12 0x2D RAW14 0x2E RAW16 0x2F RAW20 0x30 YUV422 12-bit 0x31 UDP8 0x32 UDP8 0x33 UDP8 0x34 UDP8 0x35 UDP8 0x36 UDP8 0x37 UDP8 ","date":"1 January, 1970","id":63,"permalink":"/posts/adi_serdes/","summary":"In GMSL2, the [[forward link]] transmits data from the serializer (e.g., a camera) to the deserializer (e.g., a display or processor), while the [[[reverse link]]] transmits data in the opposite direction, from the deserializer to the serializer.","tags":"ADI MAXIM SERDES GMSL MIPI","title":"GMSL SERDES 笔记"},{"content":"HPM OpenHarmony HPM 指的是 “Harmony Package Manager”\nHPM Part Module level HPM Part：用于实现模块或 Part 的复用。分发的内容可以是源码或二进制文件。通常，这样的 HPM Part 对应着一个代码仓库，是代码仓库的一个版本。\nDistribution-level HPM Part：用于描述操作系统发行版。它由一系列依赖部件和用于构建发行版的脚本组成。该发行版包含完整操作系统的各种组件（如驱动程序、内核、框架和应用程序）。构建后生成的镜像可用于烧录。\nHPM Part 由两种类型的文件组成：描述文件和内容文件。\n图 1 部件/模块级 HPM 部件与分布级 HPM 部件之间的关系\nOpenHarmony Package Manager （HPM） 是一个连接 consumers 和 providers 的开放式协作平台。HPM 部件是由 HPM 管理的对象。\n通过 HPM 平台，提供商可以发布 HPM Parts，消费者可以下载和使用 HPM Parts。\nProviders 声明 HPM 部件的属性并将其发布到平台。 Consumer 在指定版本的 HPM Part 中声明依赖，获取所需的资源。 HPM 包括以下内容 hpm-cli：@ohos/hpm-cli 发布的跨平台命令行工具 hpm-cli 工具提供了一系列用于创建、构建、安装、打包、运行和发布 HPM 部件的命令。您可以使用这些命令来管理 HPM 部件的生命周期。\nDevEco Marketplace：服务器上的资源仓库 在 DevEco Marketplace 上，您可以按类别注册、存储和搜索 HPM Part。每个 HPM Part 都有一个页面，可以访问其自述文件、依赖项、历史版本、更改历史记录、许可证、下载量和源代码存储库地址。您可以将 HPM Parts 发布到此资源存储库。\n","date":"1 January, 1970","id":64,"permalink":"/posts/harmony-hpm-%E5%8C%85%E7%AE%A1%E7%90%86%E5%99%A8/","summary":"OpenHarmony HPM 指的是 “Harmony Package Manager”","tags":"OpenHarmony","title":"Harmony HPM 包管理器"},{"content":"hugo\ntheme: next\ninstall hugo create a new site hugo new site \u0026lt;sitename\u0026gt; add theme Usage of next theme download theme file: git clone https://github.com/xtfly/hugo-theme-next.git next copy next directory to themes directory in your hugo site move config.toml to the root directory in your hugo site, and modify it to the actual information for your site. create some markdown files in directory(content/post), like https://github.com/xtfly/xtfly.github.io/tree/hugo/content start hugo server in root directory: hugo server open browser: http://localhost:1313/ start server hugo server --bind 0.0.0.0 --baseURL http://10.0.0.7:1313 框架 [blog]$ ls archetypes config.toml content data layouts public resources static themes 博客内容 将你写的博客内容markdown文档所在目录链接到 content 目录，链接文件命名为 post 将你的about目录链接到 content 目录，链接文件名为 about [blog]$ tree content/ content/ ├── about -\u0026gt; /home/lv/post/about └── post -\u0026gt; /home/lv/post 博客发布 将博客发布内容路径链接为 hugo 的根目录， 链接文件命名为 public\nhugo markdown 插入图片 e.g.\n图片名字：nescafe.png hugo 工程 content/post/hello.md content/post/ 目录下创建 markdown 文档同名文件夹 hello 将图片 nescafe.png 放入 content/post/hello/ 目录下 markdown 文件 hello.md 中引用方法：![](nescafe.png) Q\u0026amp;A https://discourse.gohugo.io/t/binding-server-to-local-ip-or-0-0-0-0-does-not-work/18999 https://wefox.me/docs/create_blog_on_github_by_hugo/ ","date":"1 January, 1970","id":65,"permalink":"/posts/hugo/","summary":"hugo","tags":"hugo blog","title":"hugo"},{"content":"100BASE-TX\niPerf- The ultimate speed test tool for TCP, UDP and SCTP\nTest the limits of your network + Internet neutrality test 编译安装 iperf windows 端直接下载二进制文件\niPerf 3.1.3 (8 jun 2016 - 1.3 MiB for Windows Vista 64bits to Windows 10 64bits) 嵌入式平台需要从源码[[交叉编译]]安装\niPerf C++ source |iPerf 3.1.3|8 jun 2016|537 KiB| 交叉编译安装 export PATH=\u0026#34;/code/gcc-linaro-7.5.0-2019.12-x86_64_armlinux-gnueabihf/bin\u0026#34;:$PATH export CROSS_COMPILE=arm-linux-gnueabihf- mkdir build_out; cd build_out ../configure --prefix=/code/glibc-2.35/build_out \\ --host=arm-linux-gnueabihf make make install 测试 嵌入式客户端 root@nxp:/# iperf3 -c 192.168.3.229 -i 10 -t 60 -u -b 1000M -A 2 Connecting to host 192.168.3.229, port 5201 [ 4] local 192.168.3.250 port 42474 connected to 192.168.3.229 port 5201 [ ID] Interval Transfer Bandwidth Total Datagrams [ 4] 0.00-10.00 sec 1.12 GBytes 958 Mbits/sec 146184 [ 4] 10.00-20.00 sec 1.12 GBytes 958 Mbits/sec 146232 [ 4] 20.00-30.00 sec 1.12 GBytes 958 Mbits/sec 146205 [ 4] 30.00-40.00 sec 1.12 GBytes 958 Mbits/sec 146232 [ 4] 40.00-50.00 sec 1.12 GBytes 958 Mbits/sec 146232 [ 4] 50.00-60.00 sec 1.12 GBytes 958 Mbits/sec 146235 - - - - - - - - - - - - - - - - - - - - - - - - - [ ID] Interval Transfer Bandwidth Jitter Lost/Total Datagrams [ 4] 0.00-60.00 sec 6.69 GBytes 958 Mbits/sec 637732049.574 ms 389951/389962 (1e+02%) [ 4] Sent 389962 datagrams iperf Done. 测试概要：\n测试工具： iperf3 测试时间： 60 秒 客户端 IP： 192.168.3.250 服务器 IP： 192.168.3.229 带宽测试结果：\n传输量（Transfer）： 在测试期间共传输了 6.69 GBytes 的数据。 带宽（Bandwidth）： 平均带宽约为 958 Mbits/秒。 抖动（Jitter）： 抖动非常高，平均达到了 637,732,049.574 毫秒。 丢包率（Lost/Total Datagrams）： 共丢失了 389,951 个数据包中的 389,951 个（丢包率达到了 100%）。 测试详细信息：\n带宽测试开始后，平均带宽稳定在约 958 Mbits/秒。 抖动（Jitter）非常高，每个测试间隔都显示非常大的抖动值，可能表明网络连接不稳定。 丢包率达到了 100%，所有的数据包都丢失了，这也是网络连接不稳定的表现。 结论：\n根据测试结果，可以得出以下结论：\n测试中的带宽表现良好，平均带宽约为 958 Mbits/秒，这表示在某些方面网络连接是高速的。 高抖动值表明网络连接不稳定，导致数据包传输的不一致性。 丢包率达到了 100%，所有的数据包都丢失了，这也是网络连接不稳定的表现。 建议进一步分析和排除网络问题，以改善网络性能和稳定性。网络连接的高带宽潜力可能受到抖动和丢包的影响，因此优化网络连接以减少这些问题可能会提高性能。在执行网络性能测试时，低抖动和低丢包率通常是期望的结果，可以提供更稳定和高速的网络连接。\nwindows server PS C:\\Users\\vc++6.0\\Downloads\\iperf-3.1.3-win64\\iperf-3.1.3-win64\u0026gt; .\\iperf3.exe -s ----------------------------------------------------------- Server listening on 5201 ----------------------------------------------------------- Accepted connection from 192.168.3.250, port 60790 [ 5] local 192.168.3.229 port 5201 connected to 192.168.3.250 port 55010 [ ID] Interval Transfer Bandwidth Jitter Lost/Total Datagrams [ 5] 0.00-1.01 sec 184 KBytes 1.49 Mbits/sec 301187251.198 ms 0/23 (0%) [ 5] 1.01-2.01 sec 0.00 Bytes 0.00 bits/sec 301187251.198 ms 0/0 (0%) [ 5] 2.01-3.01 sec 0.00 Bytes 0.00 bits/sec 301187251.198 ms 0/0 (0%) [ 5] 3.01-4.00 sec 0.00 Bytes 0.00 bits/sec 301187251.198 ms 0/0 (0%) [ 5] 4.00-5.01 sec 0.00 Bytes 0.00 bits/sec 301187251.198 ms 0/0 (0%) [ 5] 5.01-6.00 sec 0.00 Bytes 0.00 bits/sec 301187251.198 ms 0/0 (0%) [ 5] 6.00-7.00 sec 0.00 Bytes 0.00 bits/sec 301187251.198 ms 0/0 (0%) [ 5] 7.00-8.00 sec 0.00 Bytes 0.00 bits/sec 301187251.198 ms 0/0 (0%) [ 5] 8.00-9.00 sec 0.00 Bytes 0.00 bits/sec 301187251.198 ms 0/0 (0%) [ 5] 9.00-10.01 sec 0.00 Bytes 0.00 bits/sec 301187251.198 ms 0/0 (0%) [ 5] 10.01-11.01 sec 0.00 Bytes 0.00 bits/sec 301187251.198 ms 0/0 (0%) [ 5] 11.01-12.00 sec 0.00 Bytes 0.00 bits/sec 301187251.198 ms 0/0 (0%) [ 5] 12.00-13.00 sec 0.00 Bytes 0.00 bits/sec 301187251.198 ms 0/0 (0%) [ 5] 13.00-14.00 sec 0.00 Bytes 0.00 bits/sec 301187251.198 ms 0/0 (0%) [ 5] 14.00-15.00 sec 0.00 Bytes 0.00 bits/sec 301187251.198 ms 0/0 (0%) [ 5] 15.00-16.00 sec 0.00 Bytes 0.00 bits/sec 301187251.198 ms 0/0 (0%) [ 5] 16.00-17.01 sec 0.00 Bytes 0.00 bits/sec 301187251.198 ms 0/0 (0%) [ 5] 17.01-18.00 sec 0.00 Bytes 0.00 bits/sec 301187251.198 ms 0/0 (0%) [ 5] 18.00-19.00 sec 120 KBytes 986 Kbits/sec 114394655.053 ms 274384/274399 (1e+02%) [ 5] 19.00-20.00 sec 0.00 Bytes 0.00 bits/sec 114394655.053 ms 0/0 (0%) [ 5] 20.00-21.00 sec 0.00 Bytes 0.00 bits/sec 114394655.053 ms 0/0 (0%) [ 5] 21.00-22.00 sec 0.00 Bytes 0.00 bits/sec 114394655.053 ms 0/0 (0%) [ 5] 22.00-23.01 sec 0.00 Bytes 0.00 bits/sec 114394655.053 ms 0/0 (0%) [ 5] 23.01-24.01 sec 0.00 Bytes 0.00 bits/sec 114394655.053 ms 0/0 (0%) [ 5] 24.01-25.00 sec 0.00 Bytes 0.00 bits/sec 114394655.053 ms 0/0 (0%) [ 5] 25.00-26.01 sec 0.00 Bytes 0.00 bits/sec 114394655.053 ms 0/0 (0%) [ 5] 26.01-27.01 sec 0.00 Bytes 0.00 bits/sec 114394655.053 ms 0/0 (0%) [ 5] 27.01-28.01 sec 0.00 Bytes 0.00 bits/sec 114394655.053 ms 0/0 (0%) [ 5] 28.01-29.01 sec 128 KBytes 1.05 Mbits/sec 40732978.068 ms 146944/146960 (1e+02%) [ 5] 29.01-30.01 sec 0.00 Bytes 0.00 bits/sec 40732978.068 ms 0/0 (0%) [ 5] 30.01-31.01 sec 0.00 Bytes 0.00 bits/sec 40732978.068 ms 0/0 (0%) [ 5] 31.01-32.00 sec 0.00 Bytes 0.00 bits/sec 40732978.068 ms 0/0 (0%) [ 5] 32.00-33.00 sec 0.00 Bytes 0.00 bits/sec 40732978.068 ms 0/0 (0%) [ 5] 33.00-34.00 sec 0.00 Bytes 0.00 bits/sec 40732978.068 ms 0/0 (0%) [ 5] 33.00-34.00 sec 0.00 Bytes 0.00 bits/sec 40732978.068 ms 0/0 (0%) - - - - - - - - - - - - - - - - - - - - - - - - - [ ID] Interval Transfer Bandwidth Jitter Lost/Total Datagrams [ 5] 0.00-34.00 sec 0.00 Bytes 0.00 bits/sec 40732978.068 ms 421328/421382 (1e+02%) 测试概要：\n测试工具： iperf3 测试时间： 34 秒 服务器 IP： 192.168.3.229 客户端 IP： 192.168.3.250 带宽测试结果：\n传输量（Transfer）： 在测试期间共传输了 184 KBytes 的数据。 带宽（Bandwidth）： 平均带宽约为 1.49 Mbits/秒。 抖动（Jitter）： 抖动非常高，平均达到了 301,187,251.198 毫秒。 丢包率（Lost/Total Datagrams）： 共丢失了 421,328 个数据包中的 421,328 个（丢包率达到了 100%）。 测试详细信息：\n测试开始后，带宽在测试的前几秒内表现得非常低，平均带宽只有 1.49 Mbits/秒。 抖动（Jitter）非常高，每个测试间隔都显示非常大的抖动值，可能表明网络连接不稳定。 在测试的中间阶段，带宽测试结果显示了一些数据包的传输，但仍然非常低。 在测试的最后，带宽略有增加，但仍然很低，且丢包率高达 100%。 结论：\n根据测试结果，可以得出以下结论：\n测试中的带宽非常低，平均值约为 1.49 Mbits/秒，这可能表明存在网络性能问题。 高抖动值表明网络连接不稳定，导致数据包传输的不一致性。 丢包率达到了 100%，所有的数据包都丢失了，这也是网络连接不稳定的表现。 建议进一步分析和排除网络问题，以改善网络性能和稳定性。这可以包括检查网络硬件、减少网络拥塞、优化网络配置等措施。在执行网络性能测试时，低抖动和低丢包率通常是期望的结果，可以提供更稳定和高速的网络连接。\n","date":"1 January, 1970","id":66,"permalink":"/posts/iperf-%E6%B5%8B%E8%AF%95%E7%BD%91%E7%BB%9C%E5%B8%A6%E5%AE%BD/","summary":"100BASE-TX","tags":"iperf network BandWidth","title":"iperf 测试网络带宽"},{"content":"关键命令 # 清空文件系统缓存, 测试读写命令之前需要执行该命令 sudo sh -c \u0026#34;sync \u0026amp;\u0026amp; echo 3 \u0026gt; /proc/sys/vm/drop_caches\u0026#34; # dd 写入速度测试 dd if=/dev/zero of=./test_write count=200 bs=1024k # dd 读取速度测试 dd if=./test_write of=/dev/null bs=1024k 测试脚本 #!/bin/bash # 检查是否提供了足够的参数 if [ $# -lt 1 ]; then echo \u0026#34;Usage: $0 test_count\u0026#34; exit 1 fi # ANSI颜色码 green_color=\u0026#34;\\e[32m\u0026#34; # 绿色 red_color=\u0026#34;\\e[31m\u0026#34; # 红色 reset_color=\u0026#34;\\e[0m\u0026#34; # 重置颜色 total_iterations=$1 # 初始化计数器 write_success_count=0 write_failure_count=0 read_success_count=0 read_failure_count=0 echo \u0026#34;Total number of iterations: $total_iterations\u0026#34; for ((i=1; i\u0026lt;=$total_iterations; i++)); do # 清空文件系统缓存 sudo sh -c \u0026#34;sync \u0026amp;\u0026amp; echo 3 \u0026gt; /proc/sys/vm/drop_caches\u0026#34; # 执行dd写入测试 if dd if=/dev/zero of=./test_write count=200 bs=1024k 2\u0026gt;\u0026amp;1 | grep -q \u0026#34;records in\u0026#34;; then write_speed=$(dd if=./test_write of=/dev/null bs=1024k 2\u0026gt;\u0026amp;1 | awk \u0026#39;/copied/ {print $(NF-1), $NF}\u0026#39;) echo \u0026#34;write speed: $write_speed\u0026#34; ((write_success_count++)) else echo \u0026#34;write failed\u0026#34; ((write_failure_count++)) fi # 再次清空文件系统缓存 sudo sh -c \u0026#34;sync \u0026amp;\u0026amp; echo 3 \u0026gt; /proc/sys/vm/drop_caches\u0026#34; # 执行dd读取测试 if dd if=./test_write of=/dev/null bs=1024k 2\u0026gt;\u0026amp;1 | grep -q \u0026#34;records in\u0026#34;; then read_speed=$(dd if=./test_write of=/dev/null bs=1024k 2\u0026gt;\u0026amp;1 | awk \u0026#39;/copied/ {print $(NF-1), $NF}\u0026#39;) echo \u0026#34;read speed: $read_speed\u0026#34; ((read_success_count++)) else echo \u0026#34;read failed\u0026#34; ((read_failed_count++)) fi echo \u0026#34;----------------\u0026#34; done # 输出总的测试次数、成功次数和失败次数 echo \u0026#34;Total number of tests: $total_iterations\u0026#34; echo -e \u0026#34;${green_color}Number of write successful tests: $write_success_count${reset_color}\u0026#34; echo -e \u0026#34;${green_color}Number of read successful tests: $read_success_count${reset_color}\u0026#34; echo -e \u0026#34;${red_color}Number of write failed tests: $write_failure_count${reset_color}\u0026#34; echo -e \u0026#34;${red_color}Number of read failed tests: $read_failure_count${reset_color}\u0026#34; ","date":"1 January, 1970","id":67,"permalink":"/posts/linux_test_disk_i_o_with_dd/","summary":"","tags":"linux dd disk performance","title":"Linux Test Disk with dd command"},{"content":"系统基本信息 [baihao@vstation ~]$ screenfetch ██████████████████ ████████ baihao@vstation ██████████████████ ████████ OS: Manjaro 20.2.1 Nibia ██████████████████ ████████ Kernel: x86_64 Linux 5.9.16-1-MANJARO ██████████████████ ████████ Uptime: 17m ████████ ████████ Packages: 1220 ████████ ████████ ████████ Shell: bash 5.1.0 ████████ ████████ ████████ Resolution: 1920x951 ████████ ████████ ████████ DE: Xfce4 ████████ ████████ ████████ WM: Xfwm4 ████████ ████████ ████████ WM Theme: Matcha-sea ████████ ████████ ████████ GTK Theme: Matcha-sea [GTK2] ████████ ████████ ████████ Icon Theme: Papirus-Maia ████████ ████████ ████████ Font: Noto Sans 10 ████████ ████████ ████████ Disk: 241G / 674G (37%) CPU: Intel Core i7-10510U @ 2x 2.304GHz GPU: llvmpipe (LLVM 11.0.0, 256 bits) RAM: 2134MiB / 3935MiB wps + fcitx5 无法输入中文 参考\n在wps中使用fcitx5 WPS for Linux 无法使用fcitx中文输入法问题的解决方案 修改如下：\n[baihao@vstation ~]$ head /usr/bin/wps #!/bin/bash gOpt= +export GTK_IM_MODULE=fcitx +export QT_IM_MODULE=fcitx5 +export XMODIFIERS=@im=fcitx #gOptExt=-multiply [baihao@vstation ~]$ head /usr/bin/et #!/bin/bash gOpt= +export GTK_IM_MODULE=fcitx +export QT_IM_MODULE=fcitx5 +export XMODIFIERS=@im=fcitx #gOptExt=-multiply gTemplateExt=(\u0026#34;ett\u0026#34; \u0026#34;xlt\u0026#34; \u0026#34;xltx\u0026#34; \u0026#34;xltm\u0026#34;) [baihao@vstation ~]$ head /usr/bin/wpp #!/bin/bash gOpt= +export GTK_IM_MODULE=fcitx +export QT_IM_MODULE=fcitx5 +export XMODIFIERS=@im=fcitx #gOptExt=-multiply gTemplateExt=(\u0026#34;dpt\u0026#34; \u0026#34;pot\u0026#34; \u0026#34;potx\u0026#34; \u0026#34;potm\u0026#34;) ","date":"1 January, 1970","id":68,"permalink":"/posts/manjaro/","summary":"参考","tags":"manjaro","title":"manjaro"},{"content":"nlohmann json Modern C++ JSON lib 摘要 本文档全面介绍了 nlohmann/json，一个广受欢迎的现代C++ JSON库。我们将从其起源与发展入手，探讨其在C++生态系统中的地位，并与其他主流C++ JSON库进行比较。随后，深入剖析 nlohmann/json 的架构与设计哲学，揭示其简洁易用的特点。最后，文档将详细阐述 nlohmann/json 在C++项目中的具体应用，包括安装、基本语法、核心API以及高级用法，旨在为C++开发者提供一份权威、实用的参考指南。\n关键词: C++, JSON, nlohmann/json, 数据序列化, 反序列化, 开源库\n1. nlohmann/json 简介 1.1 nlohmann的起源与发展 nlohmann/json 库由Niels Lohmann于2013年启动开发，其设计初衷是为C++提供一个现代、直观且功能完备的JSON处理解决方案。在JSON成为Web应用和数据交换事实标准的背景下，C++社区对一个易于使用且性能良好的JSON库的需求日益增长。早期的C++ JSON库往往存在API复杂、学习曲线陡峭或依赖外部库过多的问题。nlohmann/json 的出现，以其仅头文件、无需编译、API设计与标准库容器（如 std::vector 和 std::map）高度契合的特点，迅速获得了C++开发者的青睐。\n自发布以来，nlohmann/json 持续迭代，不断完善功能、提升性能并修复潜在问题。它在GitHub上拥有庞大的社区支持和活跃的开发，已成为C++生态系统中处理JSON数据的首选库之一，广泛应用于各种项目，包括嵌入式系统、高性能服务器、桌面应用等。\n1.2 与其他C++ JSON库的比较 C++社区拥有多种JSON处理库，各有优劣。下表对 nlohmann/json 与其他几个主流C++ JSON库进行了比较：\n特性/库 nlohmann/json RapidJSON Boost.PropertyTree jsoncpp API设计 直观，类似STL容器操作 DOM/SAX，性能导向 树形结构，通用数据 DOM，传统C++风格 易用性 极高，学习曲线平缓 中等，需要理解DOM/SAX模型 中等，需要理解属性树概念 中等，较为传统 性能 良好，满足大多数应用 极高，注重解析和序列化速度 中等，通用性带来的开销 中等 依赖 仅头文件，无外部依赖 仅头文件，无外部依赖 Boost库，依赖较重 需编译，无外部依赖 功能完备性 完备，支持各种JSON操作 完备，支持各种JSON操作 完备，但JSON仅是其一种格式 完备 内存效率 良好，但可能不如RapidJSON极致 极高，池分配器优化 中等 中等 编译时间 快速（仅头文件） 快速（仅头文件） 较慢（Boost库） 较慢（需编译） 总结:\nnlohmann/json: 适用于追求开发效率、代码简洁性和易用性的项目。其API设计哲学使得C++开发者能够以自然的方式操作JSON数据。 RapidJSON: 适用于对性能有极致要求的场景，如大数据处理、高并发服务器等。但其API相对底层，学习成本较高。 Boost.PropertyTree: 提供更通用的树状数据结构处理能力，JSON只是其支持的一种序列化格式。适用于需要处理多种配置或数据格式的复杂系统。 jsoncpp: 一个成熟但相对传统的C++ JSON库，其API风格可能不如 nlohmann/json 现代和直观。 1.3 nlohmann的架构与设计理念 nlohmann/json 的核心设计理念是**“像使用标准库容器一样使用JSON”**。它通过重载运算符和提供类似STL的接口，使得JSON对象的创建、访问和修改变得异常直观。\n其架构主要基于一个 basic_json 模板类，该类可以根据需要进行特化，以支持不同类型和自定义的分配器。默认的 json 类型是 basic_json\u0026lt;std::map, std::vector, std::string, bool, int64_t, uint64_t, double, std::allocator\u0026gt; 的别名，它代表了JSON数据模型中的六种基本类型：null、布尔值、数字（整数和浮点数）、字符串、数组和对象。\n设计原则:\n仅头文件 (Header-Only): nlohmann/json 仅由一个头文件 (json.hpp) 组成，无需编译即可直接包含到项目中，极大地简化了集成过程。 强类型安全 (Strong Type Safety): 尽管JSON本身是无模式的，但 nlohmann/json 在运行时提供了类型检查机制。尝试以错误类型访问JSON值会抛出异常，有助于在开发阶段发现问题。 直观的API: 借鉴C++标准库的设计思想，通过重载 operator[]、operator=、push_back 等，使得JSON操作与C++容器操作保持一致性。 异常安全 (Exception Safety): 库在发生错误时（如类型不匹配、键不存在等）会抛出 json::exception 或其派生类，允许开发者使用 try-catch 机制进行错误处理。 透明的序列化/反序列化 (Transparent Serialization/Deserialization): 通过集成 operator\u0026lt;\u0026lt; 和 operator\u0026gt;\u0026gt;，使得JSON数据的I/O操作与C++流操作无缝衔接。 支持自定义类型 (Support for Custom Types): 提供了 to_json 和 from_json 机制，允许开发者轻松地将自定义C++对象序列化为JSON，以及将JSON反序列化为自定义对象。 C++11及更高版本兼容: 充分利用C++11及后续标准的新特性，如右值引用、auto 关键字、列表初始化等，使得代码更加现代和高效。 2. nlohmann在C++中的应用 2.1 nlohmann的安装与引用 由于 nlohmann/json 是一个仅头文件的库，其安装和引用过程非常简单。\n2.1.1 安装 手动下载 直接从GitHub仓库下载最新的 json.hpp 文件：https://github.com/nlohmann/json/releases\n将其放置在您的C++项目可以找到的某个包含路径下。\nCMake 如果您的项目使用CMake，可以通过 FetchContent 或 add_subdirectory 来集成。\n使用 FetchContent (推荐):\ninclude(FetchContent) FetchContent_Declare( nlohmann_json GIT_REPOSITORY https://github.com/nlohmann/json.git GIT_TAG v3.11.2 # 或其他最新版本 ) FetchContent_MakeAvailable(nlohmann_json) # 在您的目标中链接 target_link_libraries(YourProject PRIVATE nlohmann_json::nlohmann_json) 包管理器 Conan: 在 conanfile.txt 或 conanfile.py 中添加 nlohmann_json/x.y.z。 vcpkg: vcpkg install nlohmann-json Homebrew (macOS/Linux): brew install nlohmann-json 2.1.2 引用 在C++源文件中，只需简单地包含 json.hpp 头文件即可：\n#include \u0026lt;iostream\u0026gt; #include \u0026#34;json.hpp\u0026#34; // 如果json.hpp在项目根目录或指定包含路径下 // 或者 #include \u0026lt;nlohmann/json.hpp\u0026gt; 如果通过CMake或包管理器安装 为了方便使用 nlohmann::json 类型，通常会使用 using 声明：\nusing json = nlohmann::json; 2.2 基本语法 nlohmann/json 提供了与C++标准库容器相似的直观API，使得JSON数据的操作变得非常自然。\n2.2.1 JSON对象的创建与初始化\n#include \u0026lt;iostream\u0026gt; #include \u0026#34;json.hpp\u0026#34; using json = nlohmann::json; int main() { // 1. 空JSON对象 json j_empty_object = json::object(); json j_empty_object_alt = {}; // 使用列表初始化创建空对象 // 2. 空JSON数组 json j_empty_array = json::array(); json j_empty_array_alt = json::parse(\u0026#34;[]\u0026#34;); // 从字符串解析空数组 // 3. 直接初始化JSON对象 json j_object = { {\u0026#34;name\u0026#34;, \u0026#34;Alice\u0026#34;}, {\u0026#34;age\u0026#34;, 30}, {\u0026#34;isStudent\u0026#34;, false}, {\u0026#34;courses\u0026#34;, {\u0026#34;Math\u0026#34;, \u0026#34;Physics\u0026#34;, \u0026#34;Chemistry\u0026#34;}}, {\u0026#34;address\u0026#34;, { {\u0026#34;street\u0026#34;, \u0026#34;123 Main St\u0026#34;}, {\u0026#34;city\u0026#34;, \u0026#34;Anytown\u0026#34;} }} }; std::cout \u0026lt;\u0026lt; \u0026#34;Initialized JSON Object:\\n\u0026#34; \u0026lt;\u0026lt; j_object.dump(4) \u0026lt;\u0026lt; std::endl; // 4. 直接初始化JSON数组 json j_array = {\u0026#34;apple\u0026#34;, 123, true, 3.14, nullptr}; std::cout \u0026lt;\u0026lt; \u0026#34;\\nInitialized JSON Array:\\n\u0026#34; \u0026lt;\u0026lt; j_array.dump(4) \u0026lt;\u0026lt; std::endl; return 0; } 2.2.2 访问JSON元素\n通过键名访问 (对象): 使用 operator[] 或 at()。at() 在键不存在时会抛出异常，而 operator[] 会创建新键。 通过索引访问 (数组): 使用 operator[] 或 at()。 类型检查: is_string(), is_number(), is_boolean(), is_array(), is_object(), is_null()。 类型转换: 使用 get\u0026lt;T\u0026gt;() 或隐式转换。 #include \u0026lt;iostream\u0026gt; #include \u0026#34;json.hpp\u0026#34; using json = nlohmann::json; int main() { json data = { {\u0026#34;name\u0026#34;, \u0026#34;Bob\u0026#34;}, {\u0026#34;age\u0026#34;, 25}, {\u0026#34;city\u0026#34;, \u0026#34;New York\u0026#34;}, {\u0026#34;interests\u0026#34;, {\u0026#34;coding\u0026#34;, \u0026#34;reading\u0026#34;, \u0026#34;hiking\u0026#34;}}, {\u0026#34;details\u0026#34;, { {\u0026#34;is_active\u0026#34;, true}, {\u0026#34;member_since\u0026#34;, 2020} }}, {\u0026#34;null_value\u0026#34;, nullptr} }; // 访问对象元素 std::cout \u0026lt;\u0026lt; \u0026#34;Name: \u0026#34; \u0026lt;\u0026lt; data[\u0026#34;name\u0026#34;] \u0026lt;\u0026lt; std::endl; // Bob std::cout \u0026lt;\u0026lt; \u0026#34;Age: \u0026#34; \u0026lt;\u0026lt; data.at(\u0026#34;age\u0026#34;) \u0026lt;\u0026lt; std::endl; // 25 // 访问数组元素 std::cout \u0026lt;\u0026lt; \u0026#34;First interest: \u0026#34; \u0026lt;\u0026lt; data[\u0026#34;interests\u0026#34;][0] \u0026lt;\u0026lt; std::endl; // coding std::cout \u0026lt;\u0026lt; \u0026#34;Second interest (using at()): \u0026#34; \u0026lt;\u0026lt; data.at(\u0026#34;interests\u0026#34;).at(1) \u0026lt;\u0026lt; std::endl; // reading // 访问嵌套元素 std::cout \u0026lt;\u0026lt; \u0026#34;Is active: \u0026#34; \u0026lt;\u0026lt; data[\u0026#34;details\u0026#34;][\u0026#34;is_active\u0026#34;] \u0026lt;\u0026lt; std::endl; // true // 类型检查 if (data[\u0026#34;age\u0026#34;].is_number()) { std::cout \u0026lt;\u0026lt; \u0026#34;Age is a number.\u0026#34; \u0026lt;\u0026lt; std::endl; } if (data[\u0026#34;interests\u0026#34;].is_array()) { std::cout \u0026lt;\u0026lt; \u0026#34;Interests is an array.\u0026#34; \u0026lt;\u0026lt; std::endl; } if (data[\u0026#34;null_value\u0026#34;].is_null()) { std::cout \u0026lt;\u0026lt; \u0026#34;Null value is null.\u0026#34; \u0026lt;\u0026lt; std::endl; } // 类型转换 std::string name = data[\u0026#34;name\u0026#34;].get\u0026lt;std::string\u0026gt;(); int age = data[\u0026#34;age\u0026#34;]; // 隐式转换 bool isActive = data[\u0026#34;details\u0026#34;][\u0026#34;is_active\u0026#34;]; std::cout \u0026lt;\u0026lt; \u0026#34;Name (converted): \u0026#34; \u0026lt;\u0026lt; name \u0026lt;\u0026lt; std::endl; std::cout \u0026lt;\u0026lt; \u0026#34;Age (converted): \u0026#34; \u0026lt;\u0026lt; age \u0026lt;\u0026lt; std::endl; std::cout \u0026lt;\u0026lt; \u0026#34;Is active (converted): \u0026#34; \u0026lt;\u0026lt; isActive \u0026lt;\u0026lt; std::endl; // 访问不存在的键 (operator[] 会创建，at() 会抛异常) std::cout \u0026lt;\u0026lt; \u0026#34;Trying to access non-existent key (operator[]): \u0026#34; \u0026lt;\u0026lt; data[\u0026#34;non_existent_key\u0026#34;] \u0026lt;\u0026lt; std::endl; // std::cout \u0026lt;\u0026lt; data.at(\u0026#34;another_non_existent_key\u0026#34;) \u0026lt;\u0026lt; std::endl; // 这会抛出 json::out_of_range 异常 return 0; } 2.2.3 修改JSON元素\n#include \u0026lt;iostream\u0026gt; #include \u0026#34;json.hpp\u0026#34; using json = nlohmann::json; int main() { json profile = { {\u0026#34;name\u0026#34;, \u0026#34;Charlie\u0026#34;}, {\u0026#34;age\u0026#34;, 28}, {\u0026#34;email\u0026#34;, \u0026#34;charlie@example.com\u0026#34;} }; std::cout \u0026lt;\u0026lt; \u0026#34;Original profile:\\n\u0026#34; \u0026lt;\u0026lt; profile.dump(4) \u0026lt;\u0026lt; std::endl; // 修改现有值 profile[\u0026#34;age\u0026#34;] = 29; profile[\u0026#34;email\u0026#34;] = \u0026#34;charlie.new@example.com\u0026#34;; // 添加新键值对 profile[\u0026#34;occupation\u0026#34;] = \u0026#34;Software Engineer\u0026#34;; // 添加新数组元素 profile[\u0026#34;skills\u0026#34;] = {\u0026#34;C++\u0026#34;, \u0026#34;Python\u0026#34;, \u0026#34;JavaScript\u0026#34;}; profile[\u0026#34;skills\u0026#34;].push_back(\u0026#34;Go\u0026#34;); // 修改嵌套对象 profile[\u0026#34;address\u0026#34;] = { {\u0026#34;street\u0026#34;, \u0026#34;456 Oak Ave\u0026#34;}, {\u0026#34;zip\u0026#34;, \u0026#34;10001\u0026#34;} }; profile[\u0026#34;address\u0026#34;][\u0026#34;city\u0026#34;] = \u0026#34;San Francisco\u0026#34;; std::cout \u0026lt;\u0026lt; \u0026#34;\\nModified profile:\\n\u0026#34; \u0026lt;\u0026lt; profile.dump(4) \u0026lt;\u0026lt; std::endl; return 0; } 2.2.4 遍历JSON\nnlohmann/json 支持基于范围的 for 循环遍历JSON对象和数组。\n#include \u0026lt;iostream\u0026gt; #include \u0026#34;json.hpp\u0026#34; using json = nlohmann::json; int main() { json data = { {\u0026#34;id\u0026#34;, 101}, {\u0026#34;title\u0026#34;, \u0026#34;Sample Document\u0026#34;}, {\u0026#34;tags\u0026#34;, {\u0026#34;programming\u0026#34;, \u0026#34;json\u0026#34;, \u0026#34;c++\u0026#34;}}, {\u0026#34;contributors\u0026#34;, { {\u0026#34;name\u0026#34;, \u0026#34;Alice\u0026#34;}, {\u0026#34;id\u0026#34;, 1} }}, {\u0026#34;contributors\u0026#34;, { {\u0026#34;name\u0026#34;, \u0026#34;Bob\u0026#34;}, {\u0026#34;id\u0026#34;, 2} }} }; std::cout \u0026lt;\u0026lt; \u0026#34;Iterating over JSON object (key-value pairs):\\n\u0026#34;; for (json::iterator it = data.begin(); it != data.end(); ++it) { std::cout \u0026lt;\u0026lt; \u0026#34; Key: \u0026#34; \u0026lt;\u0026lt; it.key() \u0026lt;\u0026lt; \u0026#34;, Value: \u0026#34; \u0026lt;\u0026lt; it.value() \u0026lt;\u0026lt; std::endl; } // 或者使用基于范围的 for 循环 (更简洁) // for (auto const\u0026amp; [key, val] : data.items()) { // C++17 结构化绑定 // std::cout \u0026lt;\u0026lt; \u0026#34; Key: \u0026#34; \u0026lt;\u0026lt; key \u0026lt;\u0026lt; \u0026#34;, Value: \u0026#34; \u0026lt;\u0026lt; val \u0026lt;\u0026lt; std::endl; // } std::cout \u0026lt;\u0026lt; \u0026#34;\\nIterating over JSON array (tags):\\n\u0026#34;; for (const auto\u0026amp; tag : data[\u0026#34;tags\u0026#34;]) { std::cout \u0026lt;\u0026lt; \u0026#34; Tag: \u0026#34; \u0026lt;\u0026lt; tag \u0026lt;\u0026lt; std::endl; } std::cout \u0026lt;\u0026lt; \u0026#34;\\nIterating over array of objects (contributors):\\n\u0026#34;; // 注意：如果\u0026#34;contributors\u0026#34;是对象，则第二次赋值会覆盖第一次。 // 这里假设它是一个数组，演示迭代数组中的对象 // 重新构建data，确保contributors是数组 json actual_data = { {\u0026#34;id\u0026#34;, 101}, {\u0026#34;title\u0026#34;, \u0026#34;Sample Document\u0026#34;}, {\u0026#34;tags\u0026#34;, {\u0026#34;programming\u0026#34;, \u0026#34;json\u0026#34;, \u0026#34;c++\u0026#34;}}, {\u0026#34;contributors\u0026#34;, json::array({ {{\u0026#34;name\u0026#34;, \u0026#34;Alice\u0026#34;}, {\u0026#34;id\u0026#34;, 1}}, {{\u0026#34;name\u0026#34;, \u0026#34;Bob\u0026#34;}, {\u0026#34;id\u0026#34;, 2}} })} }; for (const auto\u0026amp; contributor : actual_data[\u0026#34;contributors\u0026#34;]) { std::cout \u0026lt;\u0026lt; \u0026#34; Contributor Name: \u0026#34; \u0026lt;\u0026lt; contributor[\u0026#34;name\u0026#34;] \u0026lt;\u0026lt; \u0026#34;, ID: \u0026#34; \u0026lt;\u0026lt; contributor[\u0026#34;id\u0026#34;] \u0026lt;\u0026lt; std::endl; } return 0; } 2.3 核心 API nlohmann/json 提供了丰富的核心API，用于JSON数据的解析、序列化、查询、操作和类型转换。\n2.3.1 解析与序列化\n解析 (Parsing): 从字符串、文件流等解析JSON数据。 json::parse(source): 从字符串或输入流解析。 json::accept(source): 检查字符串是否是有效的JSON而无需完整解析。 序列化 (Serialization): 将JSON数据转换为字符串。 dump(indent = -1, indent_char = ' ', ensure_ascii = false): 将JSON序列化为字符串。indent 参数用于美化输出，-1 表示不美化。 #include \u0026lt;iostream\u0026gt; #include \u0026lt;fstream\u0026gt; #include \u0026#34;json.hpp\u0026#34; using json = nlohmann::json; int main() { // 从字符串解析 std::string json_str = R\u0026#34;({\u0026#34;product\u0026#34;: \u0026#34;Laptop\u0026#34;, \u0026#34;price\u0026#34;: 1200.50, \u0026#34;inStock\u0026#34;: true})\u0026#34;; json product_data = json::parse(json_str); std::cout \u0026lt;\u0026lt; \u0026#34;Parsed from string:\\n\u0026#34; \u0026lt;\u0026lt; product_data.dump(4) \u0026lt;\u0026lt; std::endl; // 从文件解析 // 假设存在一个名为 \u0026#34;config.json\u0026#34; 的文件 // {\u0026#34;setting1\u0026#34;: \u0026#34;value1\u0026#34;, \u0026#34;setting2\u0026#34;: 123} std::ofstream ofs(\u0026#34;config.json\u0026#34;); ofs \u0026lt;\u0026lt; R\u0026#34;({\u0026#34;setting1\u0026#34;: \u0026#34;value1\u0026#34;, \u0026#34;setting2\u0026#34;: 123})\u0026#34;; ofs.close(); std::ifstream ifs(\u0026#34;config.json\u0026#34;); if (ifs.is_open()) { json config; ifs \u0026gt;\u0026gt; config; // 使用运算符重载进行解析 std::cout \u0026lt;\u0026lt; \u0026#34;\\nParsed from file:\\n\u0026#34; \u0026lt;\u0026lt; config.dump(4) \u0026lt;\u0026lt; std::endl; ifs.close(); } else { std::cerr \u0026lt;\u0026lt; \u0026#34;Error: Could not open config.json\u0026#34; \u0026lt;\u0026lt; std::endl; } // 序列化为字符串 (美化输出) std::string pretty_json = product_data.dump(2); // 2个空格缩进 std::cout \u0026lt;\u0026lt; \u0026#34;\\nPretty JSON:\\n\u0026#34; \u0026lt;\u0026lt; pretty_json \u0026lt;\u0026lt; std::endl; // 序列化为紧凑字符串 (无缩进) std::string compact_json = product_data.dump(); // 默认无缩进 (indent = -1) std::cout \u0026lt;\u0026lt; \u0026#34;\\nCompact JSON:\\n\u0026#34; \u0026lt;\u0026lt; compact_json \u0026lt;\u0026lt; std::endl; return 0; } 2.3.2 查找与查询\ncount(key): 检查JSON对象中是否存在某个键。 contains(key): 检查JSON对象中是否存在某个键 (C++20)。 find(key): 返回指向键值对的迭代器，如果不存在则返回 end()。 value(key, default_value): 安全地获取某个键的值，如果键不存在则返回默认值。 #include \u0026lt;iostream\u0026gt; #include \u0026#34;json.hpp\u0026#34; using json = nlohmann::json; int main() { json user = { {\u0026#34;id\u0026#34;, 1001}, {\u0026#34;username\u0026#34;, \u0026#34;johndoe\u0026#34;}, {\u0026#34;email\u0026#34;, \u0026#34;john@example.com\u0026#34;}, {\u0026#34;roles\u0026#34;, {\u0026#34;admin\u0026#34;, \u0026#34;editor\u0026#34;}} }; // 检查键是否存在 if (user.count(\u0026#34;username\u0026#34;)) { std::cout \u0026lt;\u0026lt; \u0026#34;Username exists: \u0026#34; \u0026lt;\u0026lt; user[\u0026#34;username\u0026#34;] \u0026lt;\u0026lt; std::endl; } if (user.contains(\u0026#34;email\u0026#34;)) { // C++20 及以上版本可用 std::cout \u0026lt;\u0026lt; \u0026#34;Email exists: \u0026#34; \u0026lt;\u0026lt; user[\u0026#34;email\u0026#34;] \u0026lt;\u0026lt; std::endl; } // 使用 find() auto it = user.find(\u0026#34;roles\u0026#34;); if (it != user.end()) { std::cout \u0026lt;\u0026lt; \u0026#34;Roles found: \u0026#34; \u0026lt;\u0026lt; *it \u0026lt;\u0026lt; std::endl; } else { std::cout \u0026lt;\u0026lt; \u0026#34;Roles not found.\u0026#34; \u0026lt;\u0026lt; std::endl; } auto non_existent_it = user.find(\u0026#34;password\u0026#34;); if (non_existent_it == user.end()) { std::cout \u0026lt;\u0026lt; \u0026#34;Password not found (as expected).\u0026#34; \u0026lt;\u0026lt; std::endl; } // 使用 value() 安全获取 std::string city = user.value(\u0026#34;city\u0026#34;, \u0026#34;Unknown\u0026#34;); // city不存在，返回\u0026#34;Unknown\u0026#34; std::cout \u0026lt;\u0026lt; \u0026#34;User\u0026#39;s city: \u0026#34; \u0026lt;\u0026lt; city \u0026lt;\u0026lt; std::endl; std::string username = user.value(\u0026#34;username\u0026#34;, \u0026#34;Guest\u0026#34;); // username存在，返回实际值 std::cout \u0026lt;\u0026lt; \u0026#34;User\u0026#39;s username: \u0026#34; \u0026lt;\u0026lt; username \u0026lt;\u0026lt; std::endl; return 0; } 2.3.3 修改与删除\nclear(): 清空JSON对象或数组。 erase(): 删除元素。 push_back(): 向数组添加元素。 emplace(): 在对象中插入元素。 update(): 合并或更新JSON对象。 #include \u0026lt;iostream\u0026gt; #include \u0026#34;json.hpp\u0026#34; using json = nlohmann::json; int main() { json settings = { {\u0026#34;theme\u0026#34;, \u0026#34;dark\u0026#34;}, {\u0026#34;fontSize\u0026#34;, 14}, {\u0026#34;notifications\u0026#34;, true}, {\u0026#34;features\u0026#34;, {\u0026#34;darkMode\u0026#34;, \u0026#34;autoSave\u0026#34;}} }; std::cout \u0026lt;\u0026lt; \u0026#34;Original settings:\\n\u0026#34; \u0026lt;\u0026lt; settings.dump(4) \u0026lt;\u0026lt; std::endl; // 修改值 settings[\u0026#34;fontSize\u0026#34;] = 16; // 添加新键值对 settings[\u0026#34;language\u0026#34;] = \u0026#34;en-US\u0026#34;; // 删除键值对 settings.erase(\u0026#34;notifications\u0026#34;); // 按键删除 // 或者 settings.erase(settings.find(\u0026#34;notifications\u0026#34;)); // 按迭代器删除 // 向数组添加元素 settings[\u0026#34;features\u0026#34;].push_back(\u0026#34;spellCheck\u0026#34;); settings[\u0026#34;features\u0026#34;].insert(settings[\u0026#34;features\u0026#34;].begin(), \u0026#34;hotReload\u0026#34;); // 插入到开头 // 清空数组 // settings[\u0026#34;features\u0026#34;].clear(); std::cout \u0026lt;\u0026lt; \u0026#34;\\nModified settings:\\n\u0026#34; \u0026lt;\u0026lt; settings.dump(4) \u0026lt;\u0026lt; std::endl; // update() 合并对象 json new_defaults = { {\u0026#34;language\u0026#34;, \u0026#34;zh-CN\u0026#34;}, // 会覆盖 {\u0026#34;defaultFolder\u0026#34;, \u0026#34;/home/user/docs\u0026#34;}, // 会添加 {\u0026#34;fontSize\u0026#34;, 12} // 会覆盖 }; settings.update(new_defaults); std::cout \u0026lt;\u0026lt; \u0026#34;\\nSettings after update:\\n\u0026#34; \u0026lt;\u0026lt; settings.dump(4) \u0026lt;\u0026lt; std::endl; return 0; } 2.4 高级语法 2.4.1 自定义类型序列化与反序列化\nnlohmann/json 提供了强大的机制，允许开发者轻松地将自定义C++结构体或类与JSON数据进行双向转换，无需手动编写复杂的解析和构建逻辑。这通过为自定义类型重载 to_json 和 from_json 函数来实现。\n#include \u0026lt;iostream\u0026gt; #include \u0026#34;json.hpp\u0026#34; using json = nlohmann::json; // 定义一个自定义结构体 struct Person { std::string name; int age; std::vector\u0026lt;std::string\u0026gt; hobbies; bool is_student; }; // 为 Person 类型提供 to_json 函数（将 Person 转换为 json） void to_json(json\u0026amp; j, const Person\u0026amp; p) { j = json{{\u0026#34;name\u0026#34;, p.name}, {\u0026#34;age\u0026#34;, p.age}, {\u0026#34;hobbies\u0026#34;, p.hobbies}, {\u0026#34;is_student\u0026#34;, p.is_student}}; } // 为 Person 类型提供 from_json 函数（将 json 转换为 Person） void from_json(const json\u0026amp; j, Person\u0026amp; p) { j.at(\u0026#34;name\u0026#34;).get_to(p.name); j.at(\u0026#34;age\u0026#34;).get_to(p.age); j.at(\u0026#34;hobbies\u0026#34;).get_to(p.hobbies); j.at(\u0026#34;is_student\u0026#34;).get_to(p.is_student); } int main() { // 1. 将 C++ 对象序列化为 JSON Person alice = {\u0026#34;Alice\u0026#34;, 25, {\u0026#34;reading\u0026#34;, \u0026#34;cycling\u0026#34;}, true}; json j_alice = alice; // 自动调用 to_json(j_alice, alice) std::cout \u0026lt;\u0026lt; \u0026#34;Alice as JSON:\\n\u0026#34; \u0026lt;\u0026lt; j_alice.dump(4) \u0026lt;\u0026lt; std::endl; // 2. 将 JSON 反序列化为 C++ 对象 json j_bob = R\u0026#34;( { \u0026#34;name\u0026#34;: \u0026#34;Bob\u0026#34;, \u0026#34;age\u0026#34;: 30, \u0026#34;hobbies\u0026#34;: [\u0026#34;gaming\u0026#34;, \u0026#34;hiking\u0026#34;], \u0026#34;is_student\u0026#34;: false } )\u0026#34;_json; // 使用 _json 字面量操作符解析字符串 Person bob = j_bob.get\u0026lt;Person\u0026gt;(); // 自动调用 from_json(j_bob, bob) std::cout \u0026lt;\u0026lt; \u0026#34;\\nBob (from JSON):\\n\u0026#34;; std::cout \u0026lt;\u0026lt; \u0026#34;Name: \u0026#34; \u0026lt;\u0026lt; bob.name \u0026lt;\u0026lt; std::endl; std::cout \u0026lt;\u0026lt; \u0026#34;Age: \u0026#34; \u0026lt;\u0026lt; bob.age \u0026lt;\u0026lt; std::endl; std::cout \u0026lt;\u0026lt; \u0026#34;Hobbies: \u0026#34;; for (const auto\u0026amp; hobby : bob.hobbies) { std::cout \u0026lt;\u0026lt; hobby \u0026lt;\u0026lt; \u0026#34; \u0026#34;; } std::cout \u0026lt;\u0026lt; \u0026#34;\\nIs Student: \u0026#34; \u0026lt;\u0026lt; (bob.is_student ? \u0026#34;Yes\u0026#34; : \u0026#34;No\u0026#34;) \u0026lt;\u0026lt; std::endl; // 错误处理：如果 JSON 缺少某个字段，from_json 会抛出异常 json invalid_json = R\u0026#34;({\u0026#34;name\u0026#34;: \u0026#34;Eve\u0026#34;, \u0026#34;age\u0026#34;: 22})\u0026#34;_json; try { Person eve = invalid_json.get\u0026lt;Person\u0026gt;(); } catch (const json::exception\u0026amp; e) { std::cerr \u0026lt;\u0026lt; \u0026#34;\\nError deserializing invalid_json: \u0026#34; \u0026lt;\u0026lt; e.what() \u0026lt;\u0026lt; std::endl; } return 0; } 2.4.2 JSON Pointer\nJSON Pointer (RFC 6901) 提供了一种标准化的方式来在JSON文档中定位特定的值。nlohmann/json 完全支持JSON Pointer。\n#include \u0026lt;iostream\u0026gt; #include \u0026#34;json.hpp\u0026#34; using json = nlohmann::json; int main() { json doc = R\u0026#34;( { \u0026#34;foo\u0026#34;: [\u0026#34;bar\u0026#34;, \u0026#34;baz\u0026#34;], \u0026#34;\u0026#34;: 0, \u0026#34;a/b\u0026#34;: 1, \u0026#34;c%d\u0026#34;: 2, \u0026#34;e^f\u0026#34;: 3, \u0026#34;g|h\u0026#34;: 4, \u0026#34;i\\\\j\u0026#34;: 5, \u0026#34;k\\\u0026#34;l\u0026#34;: 6, \u0026#34; \u0026#34;: 7, \u0026#34;m~n\u0026#34;: 8, \u0026#34;object\u0026#34;: { \u0026#34;nested_key\u0026#34;: \u0026#34;nested_value\u0026#34; }, \u0026#34;array\u0026#34;: [ {\u0026#34;item1\u0026#34;: \u0026#34;value1\u0026#34;}, {\u0026#34;item2\u0026#34;: \u0026#34;value2\u0026#34;} ] } )\u0026#34;_json; // 使用 JSON Pointer 访问元素 std::cout \u0026lt;\u0026lt; \u0026#34;doc[\\\u0026#34;/foo/0\\\u0026#34;]: \u0026#34; \u0026lt;\u0026lt; doc.at(\u0026#34;/foo/0\u0026#34;) \u0026lt;\u0026lt; std::endl; // \u0026#34;bar\u0026#34; std::cout \u0026lt;\u0026lt; \u0026#34;doc[\\\u0026#34;/a~1b\\\u0026#34;]: \u0026#34; \u0026lt;\u0026lt; doc.at(\u0026#34;/a~1b\u0026#34;) \u0026lt;\u0026lt; std::endl; // 1 (斜杠编码为 ~1) std::cout \u0026lt;\u0026lt; \u0026#34;doc[\\\u0026#34;/m~0n\\\u0026#34;]: \u0026#34; \u0026lt;\u0026lt; doc.at(\u0026#34;/m~0n\u0026#34;) \u0026lt;\u0026lt; std::endl; // 8 (波浪号编码为 ~0) std::cout \u0026lt;\u0026lt; \u0026#34;doc[\\\u0026#34;/object/nested_key\\\u0026#34;]: \u0026#34; \u0026lt;\u0026lt; doc.at(\u0026#34;/object/nested_key\u0026#34;) \u0026lt;\u0026lt; std::endl; // \u0026#34;nested_value\u0026#34; std::cout \u0026lt;\u0026lt; \u0026#34;doc[\\\u0026#34;/array/0/item1\\\u0026#34;]: \u0026#34; \u0026lt;\u0026lt; doc.at(\u0026#34;/array/0/item1\u0026#34;) \u0026lt;\u0026lt; std::endl; // \u0026#34;value1\u0026#34; // JSON Pointer 赋值 doc[\u0026#34;/foo/1\u0026#34;] = \u0026#34;qux\u0026#34;; std::cout \u0026lt;\u0026lt; \u0026#34;\\nModified doc (foo/1):\\n\u0026#34; \u0026lt;\u0026lt; doc.dump(4) \u0026lt;\u0026lt; std::endl; // JSON Pointer 添加新值 doc[\u0026#34;/new_key\u0026#34;] = \u0026#34;new_value\u0026#34;; std::cout \u0026lt;\u0026lt; \u0026#34;\\nModified doc (new_key):\\n\u0026#34; \u0026lt;\u0026lt; doc.dump(4) \u0026lt;\u0026lt; std::endl; // 检查是否存在 if (doc.contains(\u0026#34;/object/nested_key\u0026#34;)) { std::cout \u0026lt;\u0026lt; \u0026#34;\\n\u0026#39;/object/nested_key\u0026#39; exists.\u0026#34; \u0026lt;\u0026lt; std::endl; } // 错误处理：访问不存在的 JSON Pointer try { std::cout \u0026lt;\u0026lt; doc.at(\u0026#34;/non_existent_path\u0026#34;) \u0026lt;\u0026lt; std::endl; } catch (const json::exception\u0026amp; e) { std::cerr \u0026lt;\u0026lt; \u0026#34;Error accessing non-existent path: \u0026#34; \u0026lt;\u0026lt; e.what() \u0026lt;\u0026lt; std::endl; } return 0; } 2.4.3 JSON Patch\nJSON Patch ([[RFC 6902]]) 定义了一种标准的数据格式，用于描述对JSON文档的更改。nlohmann/json 提供了对JSON Patch 的支持，包括生成和应用补丁。\n#include \u0026lt;iostream\u0026gt; #include \u0026#34;json.hpp\u0026#34; using json = nlohmann::json; int main() { json document = R\u0026#34;( { \u0026#34;baz\u0026#34;: \u0026#34;qux\u0026#34;, \u0026#34;foo\u0026#34;: [\u0026#34;bar\u0026#34;, \u0026#34;baz\u0026#34;], \u0026#34;glossary\u0026#34;: { \u0026#34;title\u0026#34;: \u0026#34;example glossary\u0026#34; } } )\u0026#34;_json; json other_document = R\u0026#34;( { \u0026#34;baz\u0026#34;: \u0026#34;boo\u0026#34;, \u0026#34;foo\u0026#34;: [\u0026#34;bar\u0026#34;, \u0026#34;boo\u0026#34;], \u0026#34;test\u0026#34;: \u0026#34;hello\u0026#34;, \u0026#34;glossary\u0026#34;: { \u0026#34;title\u0026#34;: \u0026#34;updated glossary\u0026#34; } } )\u0026#34;_json; std::cout \u0026lt;\u0026lt; \u0026#34;Original Document:\\n\u0026#34; \u0026lt;\u0026lt; document.dump(4) \u0026lt;\u0026lt; std::endl; std::cout \u0026lt;\u0026lt; \u0026#34;\\nOther Document:\\n\u0026#34; \u0026lt;\u0026lt; other_document.dump(4) \u0026lt;\u0026lt; std::endl; // 1. 生成 JSON Patch // 计算从 document 到 other_document 的差异 json patch = json::diff(document, other_document); std::cout \u0026lt;\u0026lt; \u0026#34;\\nGenerated JSON Patch:\\n\u0026#34; \u0026lt;\u0026lt; patch.dump(4) \u0026lt;\u0026lt; std::endl; // 2. 应用 JSON Patch json patched_document = document.patch(patch); std::cout \u0026lt;\u0026lt; \u0026#34;\\nDocument after applying patch:\\n\u0026#34; \u0026lt;\u0026lt; patched_document.dump(4) \u0026lt;\u0026lt; std::endl; // 验证补丁是否正确应用 if (patched_document == other_document) { std::cout \u0026lt;\u0026lt; \u0026#34;\\nPatched document matches other_document.\u0026#34; \u0026lt;\u0026lt; std::endl; } else { std::cout \u0026lt;\u0026lt; \u0026#34;\\nPatched document does NOT match other_document.\u0026#34; \u0026lt;\u0026lt; std::endl; } // 手动创建 JSON Patch json manual_patch = json::array({ {{\u0026#34;op\u0026#34;, \u0026#34;replace\u0026#34;}, {\u0026#34;path\u0026#34;, \u0026#34;/baz\u0026#34;}, {\u0026#34;value\u0026#34;, \u0026#34;new_qux\u0026#34;}}, {{\u0026#34;op\u0026#34;, \u0026#34;add\u0026#34;}, {\u0026#34;path\u0026#34;, \u0026#34;/new_key\u0026#34;}, {\u0026#34;value\u0026#34;, 123}}, {{\u0026#34;op\u0026#34;, \u0026#34;remove\u0026#34;}, {\u0026#34;path\u0026#34;, \u0026#34;/foo/0\u0026#34;}} }); json doc_to_patch = document; // 复制一份进行操作 try { doc_to_patch = doc_to_patch.patch(manual_patch); std::cout \u0026lt;\u0026lt; \u0026#34;\\nDocument after applying manual patch:\\n\u0026#34; \u0026lt;\u0026lt; doc_to_patch.dump(4) \u0026lt;\u0026lt; std::endl; } catch (const json::exception\u0026amp; e) { std::cerr \u0026lt;\u0026lt; \u0026#34;Error applying manual patch: \u0026#34; \u0026lt;\u0026lt; e.what() \u0026lt;\u0026lt; std::endl; } return 0; } 结论 nlohmann/json 库凭借其仅头文件、直观的API设计、强大的功能集以及对C++现代特性的充分利用，已成为C++处理JSON数据的首选解决方案。它不仅简化了JSON的解析和序列化过程，还通过支持JSON Pointer 和 JSON Patch 等高级特性，极大地提升了C++在复杂数据操作方面的能力。无论是小型配置解析还是大型系统间的数据交换，nlohmann/json 都能提供一个高效、可靠且易于维护的工具。随着C++标准的不断演进，nlohmann/json 也将继续保持其领先地位，为C++开发者提供更加便捷和强大的JSON处理体验。\n参考文献 [1] nlohmann/json GitHub Repository: https://github.com/nlohmann/json [2] JSON (JavaScript Object Notation) - ECMA-404 The JSON Data Interchange Format: https://www.ecma-international.org/publications-and-standards/standards/ecma-404/ [3] RFC 6901 - JSON Pointer: https://tools.ietf.org/html/rfc6901 [4] RFC 6902 - JSON Patch: https://tools.ietf.org/html/rfc6902 ","date":"1 January, 1970","id":69,"permalink":"/posts/nlohmann_json/","summary":"本文档全面介绍了 nlohmann/json，一个广受欢迎的现代C++ JSON库。我们将从其起源与发展入手，探讨其在C++生态系统中的地位，并与其他主流C++ JSON库进行比较。随后，深入剖析 nlohmann/json 的架构与设计哲学，揭示其简洁易用的特点。最后，文档将详细阐述 nlohmann/json 在C++项目中的具体应用，包括安装、基本语法、核心API以及高级用法，旨在为C++开发者提供一份权威、实用的参考指南。","tags":"opensource json nlohmann","title":"nlohmann json lib"},{"content":"环境 ubuntu 18.04 x64\n依赖工具 jdk 1.8 universal-ctags tomcat8 opengrok 配置流程 jdk 安装 sudo apt install openjdk-8-jdk openjdk-8-jdk-headless openjdk-8-jre openjdk-8-jre-dcevm openjdk-8-jre-headless\n通常android编译环境能够正常工作jdk环境已经ok.\n$ java -version openjdk version \u0026#34;1.8.0_252\u0026#34; OpenJDK Runtime Environment (build 1.8.0_252-8u252-b09-1~18.04-b09) OpenJDK 64-Bit Server VM (build 25.252-b09, mixed mode) universal-ctags ubuntu 自带包管理器安装的 ctags 是 exuberant-ctags, 如果已经安装请先通过如下命令卸载\nsudo apt purge exuberant-ctags 通过源码安装 universal-ctags\ngit clone https://gitee.com/neo532/universal-ctags.git cd universal-ctags ./autogen.sh ./configure make sudo make install $ /usr/local/bin/ctags --version Universal Ctags 0.0.0(054bee0), Copyright (C) 2015 Universal Ctags Team Universal Ctags is derived from Exuberant Ctags. Exuberant Ctags 5.8, Copyright (C) 1996-2009 Darren Hiebert Compiled: May 10 2020, 10:34:29 URL: https://ctags.io/ Optional compiled features: +wildcards, +regex, +iconv, +option-directory tomcat8 sudo apt install tomcat8 sudo service tomcat8 start opengrok How to setup OpenGrok\n安装工具包 下载opengrok-非source code版， 漫长的等待\u0026hellip;\u0026hellip;\n搭建 opengrok 目录结构 sudo mkdir /opengrok/{src,data,dist,etc,log}\n解压opengrok到指定路径 tar -C /opengrok/dist --strip-components=1 -xzf opengrok-X.Y.Z.tar.gz\nInstall management tools (optional) cd /opengrok/dist/tools python3 -m pip install opengrok-tools.tar.gz Deploy the web application cp /opengrok/dist/lib/source.war /var/lib/tomcat8/webapps/ Indexing 通过修改如下 -s 选项来配置修改源码路径.\n假设我的android源码路径为 /opengrok/src/A64_android ，则使用如下参数：\njava \\ -Djava.util.logging.config.file=/opengrok/etc/logging.properties \\ -jar /opengrok/dist/lib/opengrok.jar \\ -c /usr/local/bin/ctags \\ -s /opengrok/src -d /opengrok/data -H -P -S -G \\ -W /opengrok/etc/configuration.xml -U http://localhost:8080/source RTFSC 访问网址： http://localhost:8080/source/\n","date":"1 January, 1970","id":70,"permalink":"/posts/opengrok/","summary":"ubuntu 18.04 x64","tags":"opengrok","title":"opengrok"},{"content":"代码下载 OpenHarmony源代码以 [[HPM]] 部分的形式提供，可以通过以下任意方式获取：\n从Gitee代码库获取源码。您可以使用repo或git工具从代码仓库下载最新的代码。\n从DevEco Marketplace获取源代码。访问DevEco Marketplace ，搜索您想要的开源发行版，并下载组件列表（或自定义组件并下载组件列表）。然后使用hpm-cli工具在本地PC上下载并安装组件和编译工具链。\n从镜像站点下载发行版的压缩文件。该方法下载速度较快，因此您也可以使用该方法获取早期版本的源代码。\n从GitHub镜像仓库获取源码。您可以使用repo或git工具从代码仓库下载最新的代码。\ngitee 获取源码 sudo apt -y install git git-lfs vim python3 python3-pip git config --global user.name \u0026lt;\u0026gt; git config --global user.email \u0026lt;\u0026gt; cd /usr/bin sudo ln -s pyhon3 python 安装 repo 工具\nmkdir ~/bin curl https://gitee.com/oschina/repo/raw/fork_flow/repo-py3 -o ~/bin/repo chmod a+x ~/bin/repo pip3 install -i https://repo.huaweicloud.com/repository/pypi/simple requests 将repo工具的路径添加到环境变量中\nvim ~/.bashrc # Edit environment variables. export PATH=~/bin:$PATH # Add the path of the **repo** tool to the end of environment variables. source ~/.bashrc # Apply environment variables. 如果您想开发商业功能，请下载发布代码，该代码更稳定。如果您想快速访问适合您的开发的最新功能，请下载主代码。\n如何获取OpenHarmony版本源码，请参见版本说明。\n方法一（推荐）：使用repo工具通过SSH下载源码。 （您必须注册SSH公钥才能访问Gitee。）\nrepo init -u git@gitee.com:openharmony/manifest.git -b master --no-repo-verify repo sync -c repo forall -c \u0026#39;git lfs pull\u0026#39; 方法二：使用repo工具通过HTTPS下载源码。\nrepo init -u https://gitee.com/openharmony/manifest.git -b master --no-repo-verify repo sync -c repo forall -c \u0026#39;git lfs pull\u0026#39; 编译 自行安装 Docker 环境 docker 环境搭建\nmkdir ~/OpenHarmony cd ~/OpenHarmony docker run --rm -ti -e HARDWARE=ipcamera_hi3516dv300 -v ${PWD}/out:/OpenHarmony/out ystyle/open-harmony bash repo sync -c python build.py ${HARDWARE} -b debug ","date":"1 January, 1970","id":71,"permalink":"/posts/openharmony-%E4%BB%A3%E7%A0%81%E4%B8%8B%E8%BD%BD%E7%BC%96%E8%AF%91/","summary":"OpenHarmony源代码以 [[HPM]] 部分的形式提供，可以通过以下任意方式获取：","tags":"OpenHarmony","title":"OpenHarmony 代码下载编译"},{"content":"环境准备 下载repo工具\nuser110@server005:~/bin$ curl https://mirrors.tuna.tsinghua.edu.cn/git/git-repo -o repo user110@server005:~/bin$ chmod +x repo 添加环境变量中\nuser110@server005:~/bin$ vim ~/.bashrc # add code PATH=$PATH:$HOME/bin export REPO_URL=‘git://10.20.6.145/git-repo’ # repo 源地址 user110@server005:~/bin$ source ~/.bashrc 上传 ssh public key\n拉代码 初始化\nuser110@server005:~/delete$ repo init -u \u0026lt;ssh://user112@10.20.6.136:29418/platform/manifest.git\u0026gt; -b \u0026lt;branch\u0026gt; -m \u0026lt;manifest_xml\u0026gt; -u:表示git仓库地址 -m:表示具体的xml文件 -b:表示指定特殊的分支 同步\nuser110@server005:~/delete$ repo sync –j8 工作流 创建开发分支 repo start \u0026lt;branch_name\u0026gt; -all 修改 修改代码\n提交 git add \u0026lt;files to be added\u0026gt; git commit -m \u0026#34;xxxxxx\u0026#34; 上传 repo upload or git push origin HEAD:refs/for/\u0026lt;branch_name\u0026gt; repo 目录内容简介 条目 描述 manifests 各种 manifest 配置(每一个对应一种项目配置) 的源代码 manifests.git 管理 manifests 源代码的 .git 文件 manifest.xml repo init 初始化项目时(-m), 从 manifests 里(软)链接过来的对应配置 project.list 所有 project 的清单 project-objects 保存所有 private project 的 git 库 projects 保存所有 public project 的 git 库 repo repo 工具的源代码 ","date":"1 January, 1970","id":72,"permalink":"/posts/repo/","summary":"下载repo工具","tags":"android repo","title":"repo"},{"content":"安装 For ubuntu\n# smbclient 用来测试 samba 服务 sudo apt install samba smbclient For arch\nsudo pacman -Sy samba smbclient 配置文件 /etc/samba/smb.conf 末尾追加如下内容:\n注意这里的 [share] windows 映射网络驱动器的时候路径为: \\\\\u0026lt;ubuntu ip\u0026gt;\\share\n[share] path = /home/username/Public public = yes writable = yes valid users = username //映射时的登陆名 create mask = 0644 force create mode = 0644 directory mask = 0755 force directory mode = 0755 available = yes 设置密码 sudo touch /etc/samba/smbpasswd sudo smbpasswd -a username # then insert password 重启 samba 服务 For ubuntu\nsudo service smbd restart For arch\nsudo systemctl restart smb 测试 samba 服务 smbclient -L //localhost/Public # 如果提示输入密码说明共享服务成功 windows 挂载 samba 共享 两种挂载方式\nwin+r, 输入 ubuntu ip windows 文件管理器, 映射网络驱动器, 输入路径 \\\\\u0026lt;ubuntu ip\u0026gt;\\share Linux CLI 挂载 samba 共享 sudo mount -t cifs -o username=${USER},password=${PASSWORD},uid=\u0026lt;user\u0026gt;,gid=\u0026lt;group\u0026gt; //server-address/folder /mount/path/on/ubuntu uid,gid 指定为对应smb client用户的id，如果不指定挂载后所有文件显示为root:root mode. 多用户多目录 samba 配置 创建共享目录并配置权限 # samba 用户，仅用于配置文件目录用户及用户组，不用于 samba 客户端访问登录账号 sudo useradd samba sudo mkdir /samba sudo mkdir -p /samba/public sudo mkdir -p /samba/software sudo mkdir -p /samba/hardware sudo chown samba:samba /samba -R # sudo chmod 755 /samba -R 创建账号密码 用户添加命令 sudo useradd xxx 默认不会创建 home sudo adduser xxx 默认会创建 home sbin/nologin 不需要这些账号登录服务器权限 # 管理者用户 sudo useradd -s /sbin/nologin henan # 部门级公共用户 sudo useradd -d /samba/software -s /sbin/nologin software sudo useradd -d /samba/hardware -s /sbin/nologin hardware sudo chown samba:samba /samba -R sudo chown software:samba /samba/software sudo chown hardware:samba /samba/hardware chmod 777 /samba/public smbpasswd 命令设置密码，用于 samba 服务中对用户权限进行管理 sudo smbpasswd -a henan sudo smbpasswd -a software sudo smbpasswd -a hardware 参数说明：\n-a 添加用户 -x 删除用户 -d 冻结用户 -n 密码置空 配置samba /etc/samba/smb.conf\n[public] path=/samba/public public=yes writeable=yes browseable=yes create mask=0775 directory mask=0775 [software] path=/samba/software writeable=yes browseable=yes create mask=0775 directory mask=0775 valid users=software,henan [hardware] path=/samba/hardware writeable=yes browseable=yes create mask=0775 directory mask=0775 valid users=hardware,henan 参数项说明：\n参数 说明 comment 注释说明 path 分享资源的完整路径名称，除了路径要正确外，目录的权限也要设正确 browseable 是yes/否no在浏览资源中显示共享目录，若为否则必须指定共享路径才能存取 printable 是yes/否no允许打印 hide dot ftles 是yes/否no隐藏隐藏文件 public 是yes/否no公开共享，若为否则进行身份验证(只有当security = share 时此项才起作用) guest ok 是yes/否no公开共享，若为否则进行身份验证(只有当security = share 时此项才起作用) read only 是yes/否no以只读方式共享当与writable发生冲突时也writable为准 writable 是yes/否no不以只读方式共享当与read only发生冲突时，无视read only vaild users 设定只有此名单内的用户才能访问共享资源(拒绝优先)(用户名/@组名) invalid users 设定只有此名单内的用户不能访问共享资源(拒绝优先)(用户名/@组名) read list 设定此名单内的成员为只读(用户名/@组名) write list 若设定为只读时，则只有此设定的名单内的成员才可作写入动作(用户名/@组名) create mask 建立文件时所给的权限 directory mask 建立目录时所给的权限 force group 指定存取资源时须以此设定的群组使用者进入才能存取(用户名/@组名) force user 指定存取资源时须以此设定的使用者进入才能存取(用户名/@组名) allow hosts 设定只有此网段/IP的用户才能访问共享资源 allwo hosts = 网段 except IP deny hosts 设定只有此网段/IP的用户不能访问共享资源 allow hosts= 本网段指定IP指定IP deny hosts= 指定IP本网段指定IP 解决访问共享时提示多重连接的问题 windows 命令行执行：\nnet use * /del /y ","date":"1 January, 1970","id":73,"permalink":"/posts/samba/","summary":"For ubuntu","tags":"samba linux","title":"samba"},{"content":"注释字体设置 Options-\u0026gt;Style Properties 左边Style Name下找到Comment、Comment Multi Line、Comment Right、Comment Single Line 在右边对应的Font属性框下的Font Name中选“Pick...” 设置自己喜欢的字体然后确定，退回Style Properties界面，Size设为12。 Options-\u0026gt;Save Configuration 背景护眼颜色 在顶部菜单栏依次选择 Option→Preferences，中文版的选择 选项\u0026ndash;\u0026gt;参数选择，选择上面的colors（颜色）选项，箭头移至第二项Window Background( 窗口背景)左键单击选中，再点击右边的Color选项在右边的RGB框输入如下参数：\nR(红) 204 G(绿)232 B(蓝)207 添加到自定义颜色-\u0026gt;确定 ","date":"1 January, 1970","id":74,"permalink":"/posts/sourceinsight/","summary":"在顶部菜单栏依次选择 Option→Preferences，中文版的选择 选项\u0026ndash;\u0026gt;参数选择，选择上面的colors（颜色）选项，箭头移至第二项Window Background( 窗口背景)左键单击选中，再点击右边的Color选项在右边的RGB框输入如下参数：","tags":"SourceInsight","title":"Source Insight"},{"content":"Ubuntu 20.04.6 安装 TP-Link AC1300 USB 无线网卡驱动 确认 Ubuntu 系统信息 lsb_release -a $ lsb_release -a No LSB modules are available. Distributor ID:\tUbuntu Description:\tUbuntu 20.04.6 LTS Release:\t20.04 Codename:\tfocal uname -a $ uname -a Linux kkg12333-HP-ProBook-440-14-inch-G10-Notebook-PC 5.15.0-119-generic #129~20.04.1-Ubuntu SMP Wed Aug 7 13:07:13 UTC 2024 x86_64 x86_64 x86_64 GNU/Linux 安装依赖工具 ## see uname -a sudo apt-get install git linux-headers-5.15.0-119-generic build-essential dkms 下载驱动源码 git clone https://github.com/cilynx/rtl88x2bu.git 驱动安装步骤 cd rtl88x2bu export VER=$(sed -n \u0026#39;s/\\PACKAGE_VERSION=\u0026#34;\\(.*\\)\u0026#34;/\\1/p\u0026#39; dkms.conf) echo ${VER} sudo rsync -rvhP ./ /usr/src/rtl88x2bu-${VER} sudo dkms add -m rtl88x2bu -v ${VER} sudo dkms build -m rtl88x2bu -v ${VER} sudo dkms install -m rtl88x2bu -v ${VER} sudo modprobe 88x2bu 各个安装阶段的日志供参考 VER $ echo ${VER} 5.8.7.1 rsync $ sudo rsync -rvhP ./ /usr/src/rtl88x2bu-${VER} sending incremental file list created directory /usr/src/rtl88x2bu-5.8.7.1 ./ .gitignore 430 100% 0.00kB/s 0:00:00 (xfr#1, to-chk=680/682) Kconfig 130 100% 126.95kB/s 0:00:00 (xfr#2, to-chk=679/682) LICENSE 18.09K 100% 17.25MB/s 0:00:00 (xfr#3, to-chk=678/682) Makefile 72.99K 100% 69.60MB/s 0:00:00 (xfr#4, to-chk=677/682) README.md 8.94K 100% 8.53MB/s 0:00:00 (xfr#5, to-chk=676/682) clean 90 100% 87.89kB/s 0:00:00 (xfr#6, to-chk=675/682) deploy.sh 731 100% 713.87kB/s 0:00:00 (xfr#7, to-chk=674/682) dkms.conf 276 100% 269.53kB/s 0:00:00 (xfr#8, to-chk=673/682) halmac.mk 2.00K 100% 1.91MB/s 0:00:00 (xfr#9, to-chk=672/682) ifcfg-wlan0 51 100% 49.80kB/s 0:00:00 (xfr#10, to-chk=671/682) rtl8822b.mk 1.92K 100% 1.83MB/s 0:00:00 (xfr#11, to-chk=670/682) runwpa 415 100% 405.27kB/s 0:00:00 (xfr#12, to-chk=669/682) wlan0dhcp 294 100% 287.11kB/s 0:00:00 (xfr#13, to-chk=668/682) .github/ .github/workflows/ .github/workflows/build.yml 1.99K 100% 969.24kB/s 0:00:00 (xfr#14, to-chk=660/682) core/ core/rtw_ap.c 156.98K 100% 49.90MB/s 0:00:00 (xfr#15, to-chk=659/682) core/rtw_beamforming.c 58.71K 100% 14.00MB/s 0:00:00 (xfr#16, to-chk=658/682) core/rtw_br_ext.c 46.47K 100% 11.08MB/s 0:00:00 (xfr#17, to-chk=657/682) core/rtw_bt_mp.c 50.55K 100% 12.05MB/s 0:00:00 (xfr#18, to-chk=656/682) core/rtw_btcoex.c 50.67K 100% 9.66MB/s 0:00:00 (xfr#19, to-chk=655/682) core/rtw_btcoex_wifionly.c 1.39K 100% 271.29kB/s 0:00:00 (xfr#20, to-chk=654/682) core/rtw_chplan.c 62.60K 100% 11.94MB/s 0:00:00 (xfr#21, to-chk=653/682) core/rtw_chplan.h 2.97K 100% 580.86kB/s 0:00:00 (xfr#22, to-chk=652/682) core/rtw_cmd.c 157.90K 100% 25.10MB/s 0:00:00 (xfr#23, to-chk=651/682) core/rtw_debug.c 213.16K 100% 29.04MB/s 0:00:00 (xfr#24, to-chk=650/682) core/rtw_eeprom.c 7.07K 100% 985.77kB/s 0:00:00 (xfr#25, to-chk=649/682) core/rtw_ieee80211.c 75.70K 100% 9.02MB/s 0:00:00 (xfr#26, to-chk=648/682) core/rtw_io.c 27.36K 100% 3.26MB/s 0:00:00 (xfr#27, to-chk=647/682) core/rtw_ioctl_query.c 710 100% 86.67kB/s 0:00:00 (xfr#28, to-chk=646/682) core/rtw_ioctl_set.c 23.36K 100% 2.79MB/s 0:00:00 (xfr#29, to-chk=645/682) core/rtw_iol.c 10.98K 100% 1.31MB/s 0:00:00 (xfr#30, to-chk=644/682) core/rtw_mem.c 3.42K 100% 417.72kB/s 0:00:00 (xfr#31, to-chk=643/682) core/rtw_mi.c 42.32K 100% 5.04MB/s 0:00:00 (xfr#32, to-chk=642/682) core/rtw_mlme.c 167.41K 100% 17.74MB/s 0:00:00 (xfr#33, to-chk=641/682) core/rtw_mlme_ext.c 496.20K 100% 39.43MB/s 0:00:00 (xfr#34, to-chk=640/682) core/rtw_mp.c 106.99K 100% 8.50MB/s 0:00:00 (xfr#35, to-chk=639/682) core/rtw_odm.c 16.91K 100% 1.34MB/s 0:00:00 (xfr#36, to-chk=638/682) core/rtw_p2p.c 164.96K 100% 12.10MB/s 0:00:00 (xfr#37, to-chk=637/682) core/rtw_pwrctrl.c 79.81K 100% 5.44MB/s 0:00:00 (xfr#38, to-chk=636/682) core/rtw_recv.c 142.57K 100% 9.71MB/s 0:00:00 (xfr#39, to-chk=635/682) core/rtw_rf.c 39.87K 100% 2.53MB/s 0:00:00 (xfr#40, to-chk=634/682) core/rtw_rm.c 58.98K 100% 3.75MB/s 0:00:00 (xfr#41, to-chk=633/682) core/rtw_rm_fsm.c 23.96K 100% 1.52MB/s 0:00:00 (xfr#42, to-chk=632/682) core/rtw_rm_util.c 9.39K 100% 611.59kB/s 0:00:00 (xfr#43, to-chk=631/682) core/rtw_rson.c 18.26K 100% 1.16MB/s 0:00:00 (xfr#44, to-chk=630/682) core/rtw_sdio.c 4.28K 100% 278.52kB/s 0:00:00 (xfr#45, to-chk=629/682) core/rtw_security.c 95.66K 100% 5.70MB/s 0:00:00 (xfr#46, to-chk=628/682) core/rtw_sreset.c 9.40K 100% 573.91kB/s 0:00:00 (xfr#47, to-chk=627/682) core/rtw_sta_mgt.c 36.96K 100% 2.20MB/s 0:00:00 (xfr#48, to-chk=626/682) core/rtw_tdls.c 109.44K 100% 6.14MB/s 0:00:00 (xfr#49, to-chk=625/682) core/rtw_vht.c 38.23K 100% 2.14MB/s 0:00:00 (xfr#50, to-chk=624/682) core/rtw_wapi.c 42.74K 100% 2.40MB/s 0:00:00 (xfr#51, to-chk=623/682) core/rtw_wapi_sms4.c 27.65K 100% 1.55MB/s 0:00:00 (xfr#52, to-chk=622/682) core/rtw_wlan_util.c 131.89K 100% 6.99MB/s 0:00:00 (xfr#53, to-chk=621/682) core/rtw_xmit.c 161.66K 100% 8.57MB/s 0:00:00 (xfr#54, to-chk=620/682) core/efuse/ core/efuse/rtw_efuse.c 92.04K 100% 4.62MB/s 0:00:00 (xfr#55, to-chk=617/682) core/mesh/ core/mesh/rtw_mesh.c 114.13K 100% 5.44MB/s 0:00:00 (xfr#56, to-chk=616/682) core/mesh/rtw_mesh.h 20.47K 100% 999.37kB/s 0:00:00 (xfr#57, to-chk=615/682) core/mesh/rtw_mesh_hwmp.c 49.27K 100% 2.35MB/s 0:00:00 (xfr#58, to-chk=614/682) core/mesh/rtw_mesh_hwmp.h 2.15K 100% 105.22kB/s 0:00:00 (xfr#59, to-chk=613/682) core/mesh/rtw_mesh_pathtbl.c 33.22K 100% 1.51MB/s 0:00:00 (xfr#60, to-chk=612/682) core/mesh/rtw_mesh_pathtbl.h 7.61K 100% 353.98kB/s 0:00:00 (xfr#61, to-chk=611/682) hal/ hal/HalPwrSeqCmd.c 5.52K 100% 256.65kB/s 0:00:00 (xfr#62, to-chk=610/682) hal/hal_btcoex.c 177.62K 100% 7.70MB/s 0:00:00 (xfr#63, to-chk=609/682) hal/hal_btcoex_wifionly.c 7.65K 100% 339.40kB/s 0:00:00 (xfr#64, to-chk=608/682) hal/hal_com.c 446.84K 100% 17.76MB/s 0:00:00 (xfr#65, to-chk=607/682) hal/hal_com_c2h.h 4.47K 100% 181.80kB/s 0:00:00 (xfr#66, to-chk=606/682) hal/hal_com_phycfg.c 178.02K 100% 6.79MB/s 0:00:00 (xfr#67, to-chk=605/682) hal/hal_dm.c 55.97K 100% 2.14MB/s 0:00:00 (xfr#68, to-chk=604/682) hal/hal_dm.h 3.66K 100% 143.05kB/s 0:00:00 (xfr#69, to-chk=603/682) hal/hal_dm_acs.c 17.45K 100% 681.72kB/s 0:00:00 (xfr#70, to-chk=602/682) hal/hal_dm_acs.h 5.50K 100% 215.04kB/s 0:00:00 (xfr#71, to-chk=601/682) hal/hal_halmac.c 131.59K 100% 5.02MB/s 0:00:00 (xfr#72, to-chk=600/682) hal/hal_halmac.h 10.77K 100% 420.62kB/s 0:00:00 (xfr#73, to-chk=599/682) hal/hal_intf.c 53.64K 100% 2.05MB/s 0:00:00 (xfr#74, to-chk=598/682) hal/hal_mcc.c 123.79K 100% 4.54MB/s 0:00:00 (xfr#75, to-chk=597/682) hal/hal_mp.c 93.97K 100% 3.45MB/s 0:00:00 (xfr#76, to-chk=596/682) hal/hal_phy.c 6.37K 100% 239.15kB/s 0:00:00 (xfr#77, to-chk=595/682) hal/btc/ hal/btc/btc_basic_types.h 1.25K 100% 46.84kB/s 0:00:00 (xfr#78, to-chk=587/682) hal/btc/halbtc8822b1ant.c 171.65K 100% 6.30MB/s 0:00:00 (xfr#79, to-chk=586/682) hal/btc/halbtc8822b1ant.h 14.61K 100% 548.90kB/s 0:00:00 (xfr#80, to-chk=585/682) hal/btc/halbtc8822b2ant.c 171.09K 100% 6.04MB/s 0:00:00 (xfr#81, to-chk=584/682) hal/btc/halbtc8822b2ant.h 14.62K 100% 528.90kB/s 0:00:00 (xfr#82, to-chk=583/682) hal/btc/halbtc8822bwifionly.c 2.19K 100% 79.28kB/s 0:00:00 (xfr#83, to-chk=582/682) hal/btc/halbtc8822bwifionly.h 1.23K 100% 44.60kB/s 0:00:00 (xfr#84, to-chk=581/682) hal/btc/halbtcoutsrc.h 48.32K 100% 1.71MB/s 0:00:00 (xfr#85, to-chk=580/682) hal/btc/mp_precomp.h 3.21K 100% 116.25kB/s 0:00:00 (xfr#86, to-chk=579/682) hal/efuse/ hal/efuse/efuse_mask.h 4.32K 100% 156.29kB/s 0:00:00 (xfr#87, to-chk=578/682) hal/efuse/rtl8822b/ hal/efuse/rtl8822b/HalEfuseMask8822B_PCIE.c 1.87K 100% 67.67kB/s 0:00:00 (xfr#88, to-chk=576/682) hal/efuse/rtl8822b/HalEfuseMask8822B_PCIE.h 1.01K 100% 36.64kB/s 0:00:00 (xfr#89, to-chk=575/682) hal/efuse/rtl8822b/HalEfuseMask8822B_SDIO.c 1.82K 100% 65.94kB/s 0:00:00 (xfr#90, to-chk=574/682) hal/efuse/rtl8822b/HalEfuseMask8822B_SDIO.h 1.01K 100% 36.68kB/s 0:00:00 (xfr#91, to-chk=573/682) hal/efuse/rtl8822b/HalEfuseMask8822B_USB.c 1.86K 100% 67.24kB/s 0:00:00 (xfr#92, to-chk=572/682) hal/efuse/rtl8822b/HalEfuseMask8822B_USB.h 1.01K 100% 36.53kB/s 0:00:00 (xfr#93, to-chk=571/682) hal/hal_hci/ hal/hal_hci/hal_usb.c 13.36K 100% 483.15kB/s 0:00:00 (xfr#94, to-chk=570/682) hal/halmac/ hal/halmac/halmac_2_platform.h 2.86K 100% 103.55kB/s 0:00:00 (xfr#95, to-chk=569/682) hal/halmac/halmac_api.c 18.54K 100% 670.57kB/s 0:00:00 (xfr#96, to-chk=568/682) hal/halmac/halmac_api.h 3.44K 100% 124.42kB/s 0:00:00 (xfr#97, to-chk=567/682) hal/halmac/halmac_bit2.h 2.86M 100% 82.75MB/s 0:00:00 (xfr#98, to-chk=566/682) hal/halmac/halmac_bit_8197f.h 920.02K 100% 24.37MB/s 0:00:00 (xfr#99, to-chk=565/682) hal/halmac/halmac_bit_8812f.h 1.14M 100% 27.87MB/s 0:00:00 (xfr#100, to-chk=564/682) hal/halmac/halmac_bit_8814b.h 1.36M 100% 30.80MB/s 0:00:00 (xfr#101, to-chk=563/682) hal/halmac/halmac_bit_8821c.h 1.00M 100% 21.76MB/s 0:00:00 (xfr#102, to-chk=562/682) hal/halmac/halmac_bit_8822b.h 951.76K 100% 20.17MB/s 0:00:00 (xfr#103, to-chk=561/682) hal/halmac/halmac_bit_8822c.h 1.13M 100% 22.92MB/s 0:00:00 (xfr#104, to-chk=560/682) hal/halmac/halmac_dbg.c 4.50K 100% 93.42kB/s 0:00:00 (xfr#105, to-chk=559/682) hal/halmac/halmac_dbg.h 862 100% 17.91kB/s 0:00:00 (xfr#106, to-chk=558/682) hal/halmac/halmac_fw_info.h 5.07K 100% 105.26kB/s 0:00:00 (xfr#107, to-chk=557/682) hal/halmac/halmac_fw_offload_c2h_ap.h 43.62K 100% 887.47kB/s 0:00:00 (xfr#108, to-chk=556/682) hal/halmac/halmac_fw_offload_c2h_nic.h 31.04K 100% 631.43kB/s 0:00:00 (xfr#109, to-chk=555/682) hal/halmac/halmac_fw_offload_h2c_ap.h 76.42K 100% 1.52MB/s 0:00:00 (xfr#110, to-chk=554/682) hal/halmac/halmac_fw_offload_h2c_nic.h 52.44K 100% 1.04MB/s 0:00:00 (xfr#111, to-chk=553/682) hal/halmac/halmac_gpio_cmd.h 3.00K 100% 61.10kB/s 0:00:00 (xfr#112, to-chk=552/682) hal/halmac/halmac_h2c_extra_info_ap.h 14.64K 100% 297.93kB/s 0:00:00 (xfr#113, to-chk=551/682) hal/halmac/halmac_h2c_extra_info_nic.h 10.31K 100% 209.68kB/s 0:00:00 (xfr#114, to-chk=550/682) hal/halmac/halmac_hw_cfg.h 3.86K 100% 78.61kB/s 0:00:00 (xfr#115, to-chk=549/682) hal/halmac/halmac_intf_phy_cmd.h 1.43K 100% 29.05kB/s 0:00:00 (xfr#116, to-chk=548/682) hal/halmac/halmac_original_c2h_ap.h 44.00K 100% 895.20kB/s 0:00:00 (xfr#117, to-chk=547/682) hal/halmac/halmac_original_c2h_nic.h 29.35K 100% 597.19kB/s 0:00:00 (xfr#118, to-chk=546/682) hal/halmac/halmac_original_h2c_ap.h 105.41K 100% 2.09MB/s 0:00:00 (xfr#119, to-chk=545/682) hal/halmac/halmac_original_h2c_nic.h 71.53K 100% 1.39MB/s 0:00:00 (xfr#120, to-chk=544/682) hal/halmac/halmac_pcie_reg.h 1.76K 100% 35.04kB/s 0:00:00 (xfr#121, to-chk=543/682) hal/halmac/halmac_pwr_seq_cmd.h 2.80K 100% 55.84kB/s 0:00:00 (xfr#122, to-chk=542/682) hal/halmac/halmac_reg2.h 225.09K 100% 4.38MB/s 0:00:00 (xfr#123, to-chk=541/682) hal/halmac/halmac_reg_8197f.h 26.70K 100% 532.19kB/s 0:00:00 (xfr#124, to-chk=540/682) hal/halmac/halmac_reg_8812f.h 34.24K 100% 682.34kB/s 0:00:00 (xfr#125, to-chk=539/682) hal/halmac/halmac_reg_8814b.h 42.06K 100% 838.21kB/s 0:00:00 (xfr#126, to-chk=538/682) hal/halmac/halmac_reg_8821c.h 30.90K 100% 615.75kB/s 0:00:00 (xfr#127, to-chk=537/682) hal/halmac/halmac_reg_8822b.h 27.98K 100% 557.64kB/s 0:00:00 (xfr#128, to-chk=536/682) hal/halmac/halmac_reg_8822c.h 33.95K 100% 663.07kB/s 0:00:00 (xfr#129, to-chk=535/682) hal/halmac/halmac_rx_bd_nic.h 1.60K 100% 31.17kB/s 0:00:00 (xfr#130, to-chk=534/682) hal/halmac/halmac_rx_desc_ap.h 25.52K 100% 498.48kB/s 0:00:00 (xfr#131, to-chk=533/682) hal/halmac/halmac_rx_desc_chip.h 43.01K 100% 840.10kB/s 0:00:00 (xfr#132, to-chk=532/682) hal/halmac/halmac_rx_desc_nic.h 17.85K 100% 348.65kB/s 0:00:00 (xfr#133, to-chk=531/682) hal/halmac/halmac_sdio_reg.h 1.95K 100% 38.01kB/s 0:00:00 (xfr#134, to-chk=530/682) hal/halmac/halmac_state_machine.h 4.34K 100% 84.84kB/s 0:00:00 (xfr#135, to-chk=529/682) hal/halmac/halmac_tx_bd_nic.h 4.64K 100% 90.61kB/s 0:00:00 (xfr#136, to-chk=528/682) hal/halmac/halmac_tx_desc_ap.h 112.81K 100% 2.15MB/s 0:00:00 (xfr#137, to-chk=527/682) hal/halmac/halmac_tx_desc_buffer_ap.h 65.44K 100% 1.25MB/s 0:00:00 (xfr#138, to-chk=526/682) hal/halmac/halmac_tx_desc_buffer_chip.h 28.72K 100% 560.86kB/s 0:00:00 (xfr#139, to-chk=525/682) hal/halmac/halmac_tx_desc_buffer_nic.h 28.74K 100% 561.35kB/s 0:00:00 (xfr#140, to-chk=524/682) hal/halmac/halmac_tx_desc_chip.h 201.65K 100% 3.77MB/s 0:00:00 (xfr#141, to-chk=523/682) hal/halmac/halmac_tx_desc_ie_ap.h 66.78K 100% 1.25MB/s 0:00:00 (xfr#142, to-chk=522/682) hal/halmac/halmac_tx_desc_ie_chip.h 26.56K 100% 508.50kB/s 0:00:00 (xfr#143, to-chk=521/682) hal/halmac/halmac_tx_desc_ie_nic.h 28.46K 100% 545.00kB/s 0:00:00 (xfr#144, to-chk=520/682) hal/halmac/halmac_tx_desc_nic.h 52.71K 100% 1009.31kB/s 0:00:00 (xfr#145, to-chk=519/682) hal/halmac/halmac_type.h 79.74K 100% 1.49MB/s 0:00:00 (xfr#146, to-chk=518/682) hal/halmac/halmac_usb_reg.h 771 100% 14.76kB/s 0:00:00 (xfr#147, to-chk=517/682) hal/halmac/halmac_88xx/ hal/halmac/halmac_88xx/halmac_88xx_cfg.h 1.38K 100% 26.37kB/s 0:00:00 (xfr#148, to-chk=515/682) hal/halmac/halmac_88xx/halmac_bb_rf_88xx.c 11.61K 100% 222.35kB/s 0:00:00 (xfr#149, to-chk=514/682) hal/halmac/halmac_88xx/halmac_bb_rf_88xx.h 1.89K 100% 36.21kB/s 0:00:00 (xfr#150, to-chk=513/682) hal/halmac/halmac_88xx/halmac_cfg_wmac_88xx.c 30.50K 100% 583.97kB/s 0:00:00 (xfr#151, to-chk=512/682) hal/halmac/halmac_88xx/halmac_cfg_wmac_88xx.h 4.05K 100% 77.63kB/s 0:00:00 (xfr#152, to-chk=511/682) hal/halmac/halmac_88xx/halmac_common_88xx.c 95.66K 100% 1.75MB/s 0:00:00 (xfr#153, to-chk=510/682) hal/halmac/halmac_88xx/halmac_common_88xx.h 5.22K 100% 97.96kB/s 0:00:00 (xfr#154, to-chk=509/682) hal/halmac/halmac_88xx/halmac_efuse_88xx.c 59.19K 100% 1.09MB/s 0:00:00 (xfr#155, to-chk=508/682) hal/halmac/halmac_88xx/halmac_efuse_88xx.h 4.14K 100% 77.71kB/s 0:00:00 (xfr#156, to-chk=507/682) hal/halmac/halmac_88xx/halmac_flash_88xx.c 9.26K 100% 173.87kB/s 0:00:00 (xfr#157, to-chk=506/682) hal/halmac/halmac_88xx/halmac_flash_88xx.h 1.29K 100% 24.26kB/s 0:00:00 (xfr#158, to-chk=505/682) hal/halmac/halmac_88xx/halmac_fw_88xx.c 32.93K 100% 618.35kB/s 0:00:00 (xfr#159, to-chk=504/682) hal/halmac/halmac_88xx/halmac_fw_88xx.h 2.02K 100% 38.01kB/s 0:00:00 (xfr#160, to-chk=503/682) hal/halmac/halmac_88xx/halmac_gpio_88xx.c 6.63K 100% 124.53kB/s 0:00:00 (xfr#161, to-chk=502/682) hal/halmac/halmac_88xx/halmac_gpio_88xx.h 1.63K 100% 30.65kB/s 0:00:00 (xfr#162, to-chk=501/682) hal/halmac/halmac_88xx/halmac_init_88xx.c 29.51K 100% 554.22kB/s 0:00:00 (xfr#163, to-chk=500/682) hal/halmac/halmac_88xx/halmac_init_88xx.h 1.97K 100% 37.00kB/s 0:00:00 (xfr#164, to-chk=499/682) hal/halmac/halmac_88xx/halmac_mimo_88xx.c 26.05K 100% 489.13kB/s 0:00:00 (xfr#165, to-chk=498/682) hal/halmac/halmac_88xx/halmac_mimo_88xx.h 2.71K 100% 50.95kB/s 0:00:00 (xfr#166, to-chk=497/682) hal/halmac/halmac_88xx/halmac_usb_88xx.c 13.89K 100% 260.87kB/s 0:00:00 (xfr#167, to-chk=496/682) hal/halmac/halmac_88xx/halmac_usb_88xx.h 2.72K 100% 51.03kB/s 0:00:00 (xfr#168, to-chk=495/682) hal/halmac/halmac_88xx/halmac_8822b/ hal/halmac/halmac_88xx/halmac_8822b/halmac_8822b_cfg.h 2.65K 100% 49.67kB/s 0:00:00 (xfr#169, to-chk=493/682) hal/halmac/halmac_88xx/halmac_8822b/halmac_cfg_wmac_8822b.c 3.98K 100% 74.74kB/s 0:00:00 (xfr#170, to-chk=492/682) hal/halmac/halmac_88xx/halmac_8822b/halmac_cfg_wmac_8822b.h 1.28K 100% 23.96kB/s 0:00:00 (xfr#171, to-chk=491/682) hal/halmac/halmac_88xx/halmac_8822b/halmac_common_8822b.c 4.61K 100% 86.56kB/s 0:00:00 (xfr#172, to-chk=490/682) hal/halmac/halmac_88xx/halmac_8822b/halmac_common_8822b.h 1.21K 100% 22.65kB/s 0:00:00 (xfr#173, to-chk=489/682) hal/halmac/halmac_88xx/halmac_8822b/halmac_gpio_8822b.c 30.92K 100% 580.60kB/s 0:00:00 (xfr#174, to-chk=488/682) hal/halmac/halmac_88xx/halmac_8822b/halmac_gpio_8822b.h 1.27K 100% 23.94kB/s 0:00:00 (xfr#175, to-chk=487/682) hal/halmac/halmac_88xx/halmac_8822b/halmac_init_8822b.c 34.06K 100% 639.67kB/s 0:00:00 (xfr#176, to-chk=486/682) hal/halmac/halmac_88xx/halmac_8822b/halmac_init_8822b.h 1.51K 100% 28.38kB/s 0:00:00 (xfr#177, to-chk=485/682) hal/halmac/halmac_88xx/halmac_8822b/halmac_phy_8822b.c 4.39K 100% 82.44kB/s 0:00:00 (xfr#178, to-chk=484/682) hal/halmac/halmac_88xx/halmac_8822b/halmac_pwr_seq_8822b.c 24.52K 100% 460.51kB/s 0:00:00 (xfr#179, to-chk=483/682) hal/halmac/halmac_88xx/halmac_8822b/halmac_pwr_seq_8822b.h 1.43K 100% 26.93kB/s 0:00:00 (xfr#180, to-chk=482/682) hal/halmac/halmac_88xx/halmac_8822b/halmac_usb_8822b.c 4.66K 100% 87.48kB/s 0:00:00 (xfr#181, to-chk=481/682) hal/halmac/halmac_88xx/halmac_8822b/halmac_usb_8822b.h 1.43K 100% 26.80kB/s 0:00:00 (xfr#182, to-chk=480/682) hal/led/ hal/led/hal_led.c 6.53K 100% 120.34kB/s 0:00:00 (xfr#183, to-chk=479/682) hal/led/hal_usb_led.c 112.28K 100% 2.02MB/s 0:00:00 (xfr#184, to-chk=478/682) hal/phydm/ hal/phydm/ap_makefile.mk 7.04K 100% 129.66kB/s 0:00:00 (xfr#185, to-chk=477/682) hal/phydm/halhwimg.h 4.12K 100% 75.95kB/s 0:00:00 (xfr#186, to-chk=476/682) hal/phydm/mp_precomp.h 968 100% 17.84kB/s 0:00:00 (xfr#187, to-chk=475/682) hal/phydm/phydm.c 86.98K 100% 1.57MB/s 0:00:00 (xfr#188, to-chk=474/682) hal/phydm/phydm.h 39.73K 100% 731.96kB/s 0:00:00 (xfr#189, to-chk=473/682) hal/phydm/phydm.mk 8.46K 100% 155.94kB/s 0:00:00 (xfr#190, to-chk=472/682) hal/phydm/phydm_adaptivity.c 23.76K 100% 437.85kB/s 0:00:00 (xfr#191, to-chk=471/682) hal/phydm/phydm_adaptivity.h 3.55K 100% 65.39kB/s 0:00:00 (xfr#192, to-chk=470/682) hal/phydm/phydm_adc_sampling.c 50.78K 100% 935.58kB/s 0:00:00 (xfr#193, to-chk=469/682) hal/phydm/phydm_adc_sampling.h 4.69K 100% 86.42kB/s 0:00:00 (xfr#194, to-chk=468/682) hal/phydm/phydm_antdect.c 34.01K 100% 626.60kB/s 0:00:00 (xfr#195, to-chk=467/682) hal/phydm/phydm_antdect.h 2.18K 100% 40.17kB/s 0:00:00 (xfr#196, to-chk=466/682) hal/phydm/phydm_antdiv.c 196.22K 100% 3.47MB/s 0:00:00 (xfr#197, to-chk=465/682) hal/phydm/phydm_antdiv.h 14.87K 100% 268.92kB/s 0:00:00 (xfr#198, to-chk=464/682) hal/phydm/phydm_api.c 88.68K 100% 1.57MB/s 0:00:00 (xfr#199, to-chk=463/682) hal/phydm/phydm_api.h 6.21K 100% 112.23kB/s 0:00:00 (xfr#200, to-chk=462/682) hal/phydm/phydm_auto_dbg.c 22.11K 100% 399.88kB/s 0:00:00 (xfr#201, to-chk=461/682) hal/phydm/phydm_auto_dbg.h 2.94K 100% 53.13kB/s 0:00:00 (xfr#202, to-chk=460/682) hal/phydm/phydm_beamforming.c 65.30K 100% 1.15MB/s 0:00:00 (xfr#203, to-chk=459/682) hal/phydm/phydm_beamforming.h 9.68K 100% 175.11kB/s 0:00:00 (xfr#204, to-chk=458/682) hal/phydm/phydm_cck_pd.c 31.92K 100% 577.22kB/s 0:00:00 (xfr#205, to-chk=457/682) hal/phydm/phydm_cck_pd.h 4.75K 100% 85.85kB/s 0:00:00 (xfr#206, to-chk=456/682) hal/phydm/phydm_cck_rx_pathdiv.c 4.99K 100% 88.53kB/s 0:00:00 (xfr#207, to-chk=455/682) hal/phydm/phydm_cck_rx_pathdiv.h 2.19K 100% 38.94kB/s 0:00:00 (xfr#208, to-chk=454/682) hal/phydm/phydm_ccx.c 58.23K 100% 1.01MB/s 0:00:00 (xfr#209, to-chk=453/682) hal/phydm/phydm_ccx.h 7.35K 100% 130.43kB/s 0:00:00 (xfr#210, to-chk=452/682) hal/phydm/phydm_cfotracking.c 18.44K 100% 327.41kB/s 0:00:00 (xfr#211, to-chk=451/682) hal/phydm/phydm_cfotracking.h 2.37K 100% 42.12kB/s 0:00:00 (xfr#212, to-chk=450/682) hal/phydm/phydm_debug.c 181.82K 100% 3.15MB/s 0:00:00 (xfr#213, to-chk=449/682) hal/phydm/phydm_debug.h 13.12K 100% 232.99kB/s 0:00:00 (xfr#214, to-chk=448/682) hal/phydm/phydm_dfs.c 82.36K 100% 1.43MB/s 0:00:00 (xfr#215, to-chk=447/682) hal/phydm/phydm_dfs.h 5.37K 100% 95.40kB/s 0:00:00 (xfr#216, to-chk=446/682) hal/phydm/phydm_dig.c 89.78K 100% 1.53MB/s 0:00:00 (xfr#217, to-chk=445/682) hal/phydm/phydm_dig.h 8.81K 100% 153.58kB/s 0:00:00 (xfr#218, to-chk=444/682) hal/phydm/phydm_direct_bf.c 11.79K 100% 205.51kB/s 0:00:00 (xfr#219, to-chk=443/682) hal/phydm/phydm_direct_bf.h 1.56K 100% 27.20kB/s 0:00:00 (xfr#220, to-chk=442/682) hal/phydm/phydm_dynamictxpower.c 21.56K 100% 376.03kB/s 0:00:00 (xfr#221, to-chk=441/682) hal/phydm/phydm_dynamictxpower.h 3.93K 100% 68.50kB/s 0:00:00 (xfr#222, to-chk=440/682) hal/phydm/phydm_features.h 2.46K 100% 42.81kB/s 0:00:00 (xfr#223, to-chk=439/682) hal/phydm/phydm_features_ap.h 6.30K 100% 109.85kB/s 0:00:00 (xfr#224, to-chk=438/682) hal/phydm/phydm_features_ce.h 5.57K 100% 97.15kB/s 0:00:00 (xfr#225, to-chk=437/682) hal/phydm/phydm_features_ce2_kernel.h 2.27K 100% 39.59kB/s 0:00:00 (xfr#226, to-chk=436/682) hal/phydm/phydm_features_iot.h 4.39K 100% 76.63kB/s 0:00:00 (xfr#227, to-chk=435/682) hal/phydm/phydm_features_win.h 5.12K 100% 89.30kB/s 0:00:00 (xfr#228, to-chk=434/682) hal/phydm/phydm_hwconfig.c 52.16K 100% 909.56kB/s 0:00:00 (xfr#229, to-chk=433/682) hal/phydm/phydm_hwconfig.h 2.75K 100% 47.97kB/s 0:00:00 (xfr#230, to-chk=432/682) hal/phydm/phydm_interface.c 44.75K 100% 780.38kB/s 0:00:00 (xfr#231, to-chk=431/682) hal/phydm/phydm_interface.h 9.73K 100% 169.70kB/s 0:00:00 (xfr#232, to-chk=430/682) hal/phydm/phydm_lna_sat.c 39.02K 100% 680.51kB/s 0:00:00 (xfr#233, to-chk=429/682) hal/phydm/phydm_lna_sat.h 4.64K 100% 80.88kB/s 0:00:00 (xfr#234, to-chk=428/682) hal/phydm/phydm_math_lib.c 6.14K 100% 107.06kB/s 0:00:00 (xfr#235, to-chk=427/682) hal/phydm/phydm_math_lib.h 3.70K 100% 64.52kB/s 0:00:00 (xfr#236, to-chk=426/682) hal/phydm/phydm_mp.c 10.74K 100% 187.29kB/s 0:00:00 (xfr#237, to-chk=425/682) hal/phydm/phydm_mp.h 2.75K 100% 47.87kB/s 0:00:00 (xfr#238, to-chk=424/682) hal/phydm/phydm_noisemonitor.c 13.66K 100% 238.30kB/s 0:00:00 (xfr#239, to-chk=423/682) hal/phydm/phydm_noisemonitor.h 1.45K 100% 25.36kB/s 0:00:00 (xfr#240, to-chk=422/682) hal/phydm/phydm_pathdiv.c 32.38K 100% 554.69kB/s 0:00:00 (xfr#241, to-chk=421/682) hal/phydm/phydm_pathdiv.h 3.92K 100% 67.14kB/s 0:00:00 (xfr#242, to-chk=420/682) hal/phydm/phydm_phystatus.c 97.06K 100% 1.62MB/s 0:00:00 (xfr#243, to-chk=419/682) hal/phydm/phydm_phystatus.h 23.29K 100% 399.00kB/s 0:00:00 (xfr#244, to-chk=418/682) hal/phydm/phydm_pmac_tx_setting.c 15.45K 100% 264.75kB/s 0:00:00 (xfr#245, to-chk=417/682) hal/phydm/phydm_pmac_tx_setting.h 3.19K 100% 54.64kB/s 0:00:00 (xfr#246, to-chk=416/682) hal/phydm/phydm_pow_train.c 5.14K 100% 87.99kB/s 0:00:00 (xfr#247, to-chk=415/682) hal/phydm/phydm_pow_train.h 2.73K 100% 46.79kB/s 0:00:00 (xfr#248, to-chk=414/682) hal/phydm/phydm_pre_define.h 25.55K 100% 437.83kB/s 0:00:00 (xfr#249, to-chk=413/682) hal/phydm/phydm_precomp.h 18.14K 100% 310.72kB/s 0:00:00 (xfr#250, to-chk=412/682) hal/phydm/phydm_primary_cca.c 4.86K 100% 83.20kB/s 0:00:00 (xfr#251, to-chk=411/682) hal/phydm/phydm_primary_cca.h 2.96K 100% 50.63kB/s 0:00:00 (xfr#252, to-chk=410/682) hal/phydm/phydm_psd.c 14.97K 100% 256.42kB/s 0:00:00 (xfr#253, to-chk=409/682) hal/phydm/phydm_psd.h 1.98K 100% 33.84kB/s 0:00:00 (xfr#254, to-chk=408/682) hal/phydm/phydm_rainfo.c 62.64K 100% 1.05MB/s 0:00:00 (xfr#255, to-chk=407/682) hal/phydm/phydm_rainfo.h 7.94K 100% 136.00kB/s 0:00:00 (xfr#256, to-chk=406/682) hal/phydm/phydm_reg.h 9.33K 100% 159.80kB/s 0:00:00 (xfr#257, to-chk=405/682) hal/phydm/phydm_regdefine11ac.h 3.49K 100% 59.86kB/s 0:00:00 (xfr#258, to-chk=404/682) hal/phydm/phydm_regdefine11n.h 7.76K 100% 130.64kB/s 0:00:00 (xfr#259, to-chk=403/682) hal/phydm/phydm_regtable.h 21.60K 100% 363.67kB/s 0:00:00 (xfr#260, to-chk=402/682) hal/phydm/phydm_rssi_monitor.c 4.52K 100% 76.05kB/s 0:00:00 (xfr#261, to-chk=401/682) hal/phydm/phydm_rssi_monitor.h 1.80K 100% 30.31kB/s 0:00:00 (xfr#262, to-chk=400/682) hal/phydm/phydm_smt_ant.c 74.55K 100% 1.23MB/s 0:00:00 (xfr#263, to-chk=399/682) hal/phydm/phydm_smt_ant.h 6.91K 100% 116.33kB/s 0:00:00 (xfr#264, to-chk=398/682) hal/phydm/phydm_soml.c 48.07K 100% 809.35kB/s 0:00:00 (xfr#265, to-chk=397/682) hal/phydm/phydm_soml.h 5.34K 100% 89.93kB/s 0:00:00 (xfr#266, to-chk=396/682) hal/phydm/phydm_types.h 8.43K 100% 141.94kB/s 0:00:00 (xfr#267, to-chk=395/682) hal/phydm/sd4_phydm_2_kernel.mk 6.73K 100% 113.31kB/s 0:00:00 (xfr#268, to-chk=394/682) hal/phydm/halrf/ hal/phydm/halrf/halphyrf_ap.c 71.47K 100% 1.18MB/s 0:00:00 (xfr#269, to-chk=390/682) hal/phydm/halrf/halphyrf_ap.h 4.32K 100% 72.79kB/s 0:00:00 (xfr#270, to-chk=389/682) hal/phydm/halrf/halphyrf_ce.c 41.70K 100% 702.08kB/s 0:00:00 (xfr#271, to-chk=388/682) hal/phydm/halrf/halphyrf_ce.h 3.50K 100% 58.93kB/s 0:00:00 (xfr#272, to-chk=387/682) hal/phydm/halrf/halphyrf_iot.c 26.20K 100% 441.14kB/s 0:00:00 (xfr#273, to-chk=386/682) hal/phydm/halrf/halphyrf_iot.h 3.34K 100% 56.25kB/s 0:00:00 (xfr#274, to-chk=385/682) hal/phydm/halrf/halphyrf_win.c 46.28K 100% 779.20kB/s 0:00:00 (xfr#275, to-chk=384/682) hal/phydm/halrf/halphyrf_win.h 3.33K 100% 56.03kB/s 0:00:00 (xfr#276, to-chk=383/682) hal/phydm/halrf/halrf.c 77.28K 100% 1.25MB/s 0:00:00 (xfr#277, to-chk=382/682) hal/phydm/halrf/halrf.h 24.93K 100% 412.59kB/s 0:00:00 (xfr#278, to-chk=381/682) hal/phydm/halrf/halrf_debug.c 9.35K 100% 154.76kB/s 0:00:00 (xfr#279, to-chk=380/682) hal/phydm/halrf/halrf_debug.h 3.88K 100% 64.20kB/s 0:00:00 (xfr#280, to-chk=379/682) hal/phydm/halrf/halrf_dpk.h 3.85K 100% 63.64kB/s 0:00:00 (xfr#281, to-chk=378/682) hal/phydm/halrf/halrf_features.h 1.31K 100% 21.62kB/s 0:00:00 (xfr#282, to-chk=377/682) hal/phydm/halrf/halrf_iqk.h 3.54K 100% 58.51kB/s 0:00:00 (xfr#283, to-chk=376/682) hal/phydm/halrf/halrf_kfree.c 90.49K 100% 1.46MB/s 0:00:00 (xfr#284, to-chk=375/682) hal/phydm/halrf/halrf_kfree.h 5.77K 100% 95.50kB/s 0:00:00 (xfr#285, to-chk=374/682) hal/phydm/halrf/halrf_powertracking.c 5.62K 100% 93.10kB/s 0:00:00 (xfr#286, to-chk=373/682) hal/phydm/halrf/halrf_powertracking.h 1.40K 100% 23.24kB/s 0:00:00 (xfr#287, to-chk=372/682) hal/phydm/halrf/halrf_powertracking_ap.c 54.71K 100% 905.52kB/s 0:00:00 (xfr#288, to-chk=371/682) hal/phydm/halrf/halrf_powertracking_ap.h 12.43K 100% 205.77kB/s 0:00:00 (xfr#289, to-chk=370/682) hal/phydm/halrf/halrf_powertracking_ce.c 33.22K 100% 549.84kB/s 0:00:00 (xfr#290, to-chk=369/682) hal/phydm/halrf/halrf_powertracking_ce.h 10.66K 100% 176.49kB/s 0:00:00 (xfr#291, to-chk=368/682) hal/phydm/halrf/halrf_powertracking_iot.c 30.48K 100% 504.47kB/s 0:00:00 (xfr#292, to-chk=367/682) hal/phydm/halrf/halrf_powertracking_iot.h 11.58K 100% 191.62kB/s 0:00:00 (xfr#293, to-chk=366/682) hal/phydm/halrf/halrf_powertracking_win.c 34.30K 100% 567.75kB/s 0:00:00 (xfr#294, to-chk=365/682) hal/phydm/halrf/halrf_powertracking_win.h 10.07K 100% 166.76kB/s 0:00:00 (xfr#295, to-chk=364/682) hal/phydm/halrf/halrf_psd.c 12.66K 100% 206.04kB/s 0:00:00 (xfr#296, to-chk=363/682) hal/phydm/halrf/halrf_psd.h 1.12K 100% 18.21kB/s 0:00:00 (xfr#297, to-chk=362/682) hal/phydm/halrf/halrf_txgapcal.c 9.86K 100% 160.47kB/s 0:00:00 (xfr#298, to-chk=361/682) hal/phydm/halrf/halrf_txgapcal.h 1.11K 100% 18.07kB/s 0:00:00 (xfr#299, to-chk=360/682) hal/phydm/halrf/rtl8822b/ hal/phydm/halrf/rtl8822b/halhwimg8822b_rf.c 707.87K 100% 11.07MB/s 0:00:00 (xfr#300, to-chk=358/682) hal/phydm/halrf/rtl8822b/halhwimg8822b_rf.h 16.67K 100% 266.94kB/s 0:00:00 (xfr#301, to-chk=357/682) hal/phydm/halrf/rtl8822b/halrf_8822b.c 19.43K 100% 311.03kB/s 0:00:00 (xfr#302, to-chk=356/682) hal/phydm/halrf/rtl8822b/halrf_8822b.h 2.15K 100% 34.34kB/s 0:00:00 (xfr#303, to-chk=355/682) hal/phydm/halrf/rtl8822b/halrf_iqk_8822b.c 61.52K 100% 984.94kB/s 0:00:00 (xfr#304, to-chk=354/682) hal/phydm/halrf/rtl8822b/halrf_iqk_8822b.h 2.35K 100% 37.57kB/s 0:00:00 (xfr#305, to-chk=353/682) hal/phydm/halrf/rtl8822b/halrf_rfk_init_8822b.c 23.48K 100% 375.83kB/s 0:00:00 (xfr#306, to-chk=352/682) hal/phydm/halrf/rtl8822b/halrf_rfk_init_8822b.h 1.10K 100% 17.67kB/s 0:00:00 (xfr#307, to-chk=351/682) hal/phydm/halrf/rtl8822b/version_rtl8822b_rf.h 1.03K 100% 16.49kB/s 0:00:00 (xfr#308, to-chk=350/682) hal/phydm/rtl8822b/ hal/phydm/rtl8822b/halhwimg8822b_bb.c 304.65K 100% 4.69MB/s 0:00:00 (xfr#309, to-chk=349/682) hal/phydm/rtl8822b/halhwimg8822b_bb.h 5.92K 100% 93.31kB/s 0:00:00 (xfr#310, to-chk=348/682) hal/phydm/rtl8822b/halhwimg8822b_mac.c 7.74K 100% 121.91kB/s 0:00:00 (xfr#311, to-chk=347/682) hal/phydm/rtl8822b/halhwimg8822b_mac.h 1.49K 100% 23.45kB/s 0:00:00 (xfr#312, to-chk=346/682) hal/phydm/rtl8822b/mp_precomp.h 656 100% 10.33kB/s 0:00:00 (xfr#313, to-chk=345/682) hal/phydm/rtl8822b/phydm_hal_api8822b.c 78.55K 100% 1.21MB/s 0:00:00 (xfr#314, to-chk=344/682) hal/phydm/rtl8822b/phydm_hal_api8822b.h 4.14K 100% 65.22kB/s 0:00:00 (xfr#315, to-chk=343/682) hal/phydm/rtl8822b/phydm_regconfig8822b.c 7.37K 100% 116.04kB/s 0:00:00 (xfr#316, to-chk=342/682) hal/phydm/rtl8822b/phydm_regconfig8822b.h 2.04K 100% 32.16kB/s 0:00:00 (xfr#317, to-chk=341/682) hal/phydm/rtl8822b/phydm_rtl8822b.c 17.36K 100% 273.42kB/s 0:00:00 (xfr#318, to-chk=340/682) hal/phydm/rtl8822b/phydm_rtl8822b.h 1.61K 100% 25.31kB/s 0:00:00 (xfr#319, to-chk=339/682) hal/phydm/rtl8822b/version_rtl8822b.h 1.31K 100% 20.62kB/s 0:00:00 (xfr#320, to-chk=338/682) hal/phydm/txbf/ hal/phydm/txbf/halcomtxbf.c 14.47K 100% 227.95kB/s 0:00:00 (xfr#321, to-chk=337/682) hal/phydm/txbf/halcomtxbf.h 4.10K 100% 64.53kB/s 0:00:00 (xfr#322, to-chk=336/682) hal/phydm/txbf/haltxbf8192e.c 13.39K 100% 210.89kB/s 0:00:00 (xfr#323, to-chk=335/682) hal/phydm/txbf/haltxbf8192e.h 1.88K 100% 29.64kB/s 0:00:00 (xfr#324, to-chk=334/682) hal/phydm/txbf/haltxbf8814a.c 22.12K 100% 348.46kB/s 0:00:00 (xfr#325, to-chk=333/682) hal/phydm/txbf/haltxbf8814a.h 2.45K 100% 38.64kB/s 0:00:00 (xfr#326, to-chk=332/682) hal/phydm/txbf/haltxbf8822b.c 38.52K 100% 606.65kB/s 0:00:00 (xfr#327, to-chk=331/682) hal/phydm/txbf/haltxbf8822b.h 2.27K 100% 35.72kB/s 0:00:00 (xfr#328, to-chk=330/682) hal/phydm/txbf/haltxbfinterface.c 42.14K 100% 663.81kB/s 0:00:00 (xfr#329, to-chk=329/682) hal/phydm/txbf/haltxbfinterface.h 3.93K 100% 61.93kB/s 0:00:00 (xfr#330, to-chk=328/682) hal/phydm/txbf/haltxbfjaguar.c 17.20K 100% 270.98kB/s 0:00:00 (xfr#331, to-chk=327/682) hal/phydm/txbf/haltxbfjaguar.h 2.25K 100% 34.92kB/s 0:00:00 (xfr#332, to-chk=326/682) hal/phydm/txbf/phydm_hal_txbf_api.c 21.00K 100% 325.58kB/s 0:00:00 (xfr#333, to-chk=325/682) hal/phydm/txbf/phydm_hal_txbf_api.h 2.73K 100% 42.27kB/s 0:00:00 (xfr#334, to-chk=324/682) hal/rtl8822b/ hal/rtl8822b/hal8822b_fw.c 2.22M 100% 31.64MB/s 0:00:00 (xfr#335, to-chk=323/682) hal/rtl8822b/hal8822b_fw.h 1.27K 100% 18.58kB/s 0:00:00 (xfr#336, to-chk=322/682) hal/rtl8822b/rtl8822b.h 6.44K 100% 93.85kB/s 0:00:00 (xfr#337, to-chk=321/682) hal/rtl8822b/rtl8822b_cmd.c 18.64K 100% 271.67kB/s 0:00:00 (xfr#338, to-chk=320/682) hal/rtl8822b/rtl8822b_halinit.c 9.58K 100% 139.65kB/s 0:00:00 (xfr#339, to-chk=319/682) hal/rtl8822b/rtl8822b_mac.c 6.68K 100% 97.31kB/s 0:00:00 (xfr#340, to-chk=318/682) hal/rtl8822b/rtl8822b_ops.c 109.78K 100% 1.56MB/s 0:00:00 (xfr#341, to-chk=317/682) hal/rtl8822b/rtl8822b_phy.c 67.37K 100% 982.00kB/s 0:00:00 (xfr#342, to-chk=316/682) hal/rtl8822b/usb/ hal/rtl8822b/usb/rtl8822bu.h 2.07K 100% 30.14kB/s 0:00:00 (xfr#343, to-chk=314/682) hal/rtl8822b/usb/rtl8822bu_halinit.c 11.78K 100% 171.70kB/s 0:00:00 (xfr#344, to-chk=313/682) hal/rtl8822b/usb/rtl8822bu_halmac.c 8.30K 100% 120.98kB/s 0:00:00 (xfr#345, to-chk=312/682) hal/rtl8822b/usb/rtl8822bu_io.c 1.57K 100% 22.88kB/s 0:00:00 (xfr#346, to-chk=311/682) hal/rtl8822b/usb/rtl8822bu_led.c 3.49K 100% 50.93kB/s 0:00:00 (xfr#347, to-chk=310/682) hal/rtl8822b/usb/rtl8822bu_ops.c 8.79K 100% 128.18kB/s 0:00:00 (xfr#348, to-chk=309/682) hal/rtl8822b/usb/rtl8822bu_recv.c 5.36K 100% 78.11kB/s 0:00:00 (xfr#349, to-chk=308/682) hal/rtl8822b/usb/rtl8822bu_xmit.c 30.81K 100% 449.03kB/s 0:00:00 (xfr#350, to-chk=307/682) include/ include/Hal8188EPhyCfg.h 6.47K 100% 94.25kB/s 0:00:00 (xfr#351, to-chk=306/682) include/Hal8188EPhyReg.h 35.29K 100% 514.40kB/s 0:00:00 (xfr#352, to-chk=305/682) include/Hal8188EPwrSeq.h 13.29K 100% 193.75kB/s 0:00:00 (xfr#353, to-chk=304/682) include/Hal8188FPhyCfg.h 2.69K 100% 39.19kB/s 0:00:00 (xfr#354, to-chk=303/682) include/Hal8188FPhyReg.h 36.76K 100% 527.88kB/s 0:00:00 (xfr#355, to-chk=302/682) include/Hal8188FPwrSeq.h 18.29K 100% 262.72kB/s 0:00:00 (xfr#356, to-chk=301/682) include/Hal8192EPhyCfg.h 3.38K 100% 48.56kB/s 0:00:00 (xfr#357, to-chk=300/682) include/Hal8192EPhyReg.h 36.63K 100% 526.09kB/s 0:00:00 (xfr#358, to-chk=299/682) include/Hal8192EPwrSeq.h 13.24K 100% 190.13kB/s 0:00:00 (xfr#359, to-chk=298/682) include/Hal8192FPhyCfg.h 2.63K 100% 37.78kB/s 0:00:00 (xfr#360, to-chk=297/682) include/Hal8192FPhyReg.h 35.87K 100% 515.11kB/s 0:00:00 (xfr#361, to-chk=296/682) include/Hal8192FPwrSeq.h 20.06K 100% 288.14kB/s 0:00:00 (xfr#362, to-chk=295/682) include/Hal8703BPhyCfg.h 2.64K 100% 37.90kB/s 0:00:00 (xfr#363, to-chk=294/682) include/Hal8703BPhyReg.h 35.98K 100% 516.64kB/s 0:00:00 (xfr#364, to-chk=293/682) include/Hal8703BPwrSeq.h 17.66K 100% 253.59kB/s 0:00:00 (xfr#365, to-chk=292/682) include/Hal8710BPhyCfg.h 2.56K 100% 36.72kB/s 0:00:00 (xfr#366, to-chk=291/682) include/Hal8710BPhyReg.h 35.87K 100% 515.11kB/s 0:00:00 (xfr#367, to-chk=290/682) include/Hal8710BPwrSeq.h 12.16K 100% 174.69kB/s 0:00:00 (xfr#368, to-chk=289/682) include/Hal8723BPhyCfg.h 2.64K 100% 37.96kB/s 0:00:00 (xfr#369, to-chk=288/682) include/Hal8723BPhyReg.h 35.87K 100% 515.08kB/s 0:00:00 (xfr#370, to-chk=287/682) include/Hal8723BPwrSeq.h 23.15K 100% 332.52kB/s 0:00:00 (xfr#371, to-chk=286/682) include/Hal8723DPhyCfg.h 2.64K 100% 37.87kB/s 0:00:00 (xfr#372, to-chk=285/682) include/Hal8723DPhyReg.h 35.87K 100% 515.11kB/s 0:00:00 (xfr#373, to-chk=284/682) include/Hal8723DPwrSeq.h 18.49K 100% 265.54kB/s 0:00:00 (xfr#374, to-chk=283/682) include/Hal8723PwrSeq.h 15.80K 100% 226.91kB/s 0:00:00 (xfr#375, to-chk=282/682) include/Hal8812PhyCfg.h 3.38K 100% 48.53kB/s 0:00:00 (xfr#376, to-chk=281/682) include/Hal8812PhyReg.h 24.84K 100% 351.56kB/s 0:00:00 (xfr#377, to-chk=280/682) include/Hal8812PwrSeq.h 18.59K 100% 263.15kB/s 0:00:00 (xfr#378, to-chk=279/682) include/Hal8814PhyCfg.h 4.58K 100% 64.86kB/s 0:00:00 (xfr#379, to-chk=278/682) include/Hal8814PhyReg.h 30.53K 100% 432.09kB/s 0:00:00 (xfr#380, to-chk=277/682) include/Hal8814PwrSeq.h 22.30K 100% 315.61kB/s 0:00:00 (xfr#381, to-chk=276/682) include/Hal8821APwrSeq.h 18.07K 100% 255.73kB/s 0:00:00 (xfr#382, to-chk=275/682) include/HalPwrSeqCmd.h 4.12K 100% 58.35kB/s 0:00:00 (xfr#383, to-chk=274/682) include/HalVerDef.h 11.02K 100% 155.97kB/s 0:00:00 (xfr#384, to-chk=273/682) include/autoconf.h 8.97K 100% 126.97kB/s 0:00:00 (xfr#385, to-chk=272/682) include/basic_types.h 10.76K 100% 152.22kB/s 0:00:00 (xfr#386, to-chk=271/682) include/circ_buf.h 864 100% 12.23kB/s 0:00:00 (xfr#387, to-chk=270/682) include/cmd_osdep.h 1.08K 100% 15.34kB/s 0:00:00 (xfr#388, to-chk=269/682) include/custom_gpio.h 1.04K 100% 14.79kB/s 0:00:00 (xfr#389, to-chk=268/682) include/drv_conf.h 17.34K 100% 245.46kB/s 0:00:00 (xfr#390, to-chk=267/682) include/drv_types.h 47.33K 100% 669.81kB/s 0:00:00 (xfr#391, to-chk=266/682) include/drv_types_ce.h 2.49K 100% 35.23kB/s 0:00:00 (xfr#392, to-chk=265/682) include/drv_types_gspi.h 1.37K 100% 19.35kB/s 0:00:00 (xfr#393, to-chk=264/682) include/drv_types_linux.h 725 100% 10.26kB/s 0:00:00 (xfr#394, to-chk=263/682) include/drv_types_pci.h 1.40K 100% 19.76kB/s 0:00:00 (xfr#395, to-chk=262/682) include/drv_types_sdio.h 2.94K 100% 41.57kB/s 0:00:00 (xfr#396, to-chk=261/682) include/drv_types_xp.h 2.54K 100% 35.98kB/s 0:00:00 (xfr#397, to-chk=260/682) include/ethernet.h 1.57K 100% 22.18kB/s 0:00:00 (xfr#398, to-chk=259/682) include/gspi_hal.h 983 100% 13.91kB/s 0:00:00 (xfr#399, to-chk=258/682) include/gspi_ops.h 7.79K 100% 110.18kB/s 0:00:00 (xfr#400, to-chk=257/682) include/gspi_ops_linux.h 722 100% 10.22kB/s 0:00:00 (xfr#401, to-chk=256/682) include/gspi_osintf.h 717 100% 10.15kB/s 0:00:00 (xfr#402, to-chk=255/682) include/h2clbk.h 847 100% 11.99kB/s 0:00:00 (xfr#403, to-chk=254/682) include/hal_btcoex.h 4.62K 100% 65.40kB/s 0:00:00 (xfr#404, to-chk=253/682) include/hal_btcoex_wifionly.h 3.38K 100% 47.89kB/s 0:00:00 (xfr#405, to-chk=252/682) include/hal_com.h 29.14K 100% 412.48kB/s 0:00:00 (xfr#406, to-chk=251/682) include/hal_com_h2c.h 35.36K 100% 500.51kB/s 0:00:00 (xfr#407, to-chk=250/682) include/hal_com_led.h 15.38K 100% 217.75kB/s 0:00:00 (xfr#408, to-chk=249/682) include/hal_com_phycfg.h 10.40K 100% 147.18kB/s 0:00:00 (xfr#409, to-chk=248/682) include/hal_com_reg.h 67.94K 100% 947.82kB/s 0:00:00 (xfr#410, to-chk=247/682) include/hal_data.h 23.10K 100% 322.28kB/s 0:00:00 (xfr#411, to-chk=246/682) include/hal_gspi.h 1.18K 100% 16.42kB/s 0:00:00 (xfr#412, to-chk=245/682) include/hal_ic_cfg.h 15.09K 100% 210.49kB/s 0:00:00 (xfr#413, to-chk=244/682) include/hal_intf.h 32.81K 100% 457.78kB/s 0:00:00 (xfr#414, to-chk=243/682) include/hal_pg.h 33.07K 100% 461.31kB/s 0:00:00 (xfr#415, to-chk=242/682) include/hal_phy.h 5.49K 100% 76.59kB/s 0:00:00 (xfr#416, to-chk=241/682) include/hal_phy_reg.h 14.70K 100% 205.09kB/s 0:00:00 (xfr#417, to-chk=240/682) include/hal_sdio.h 3.85K 100% 53.74kB/s 0:00:00 (xfr#418, to-chk=239/682) include/hal_sdio_coex.h 1.31K 100% 18.28kB/s 0:00:00 (xfr#419, to-chk=238/682) include/ieee80211.h 61.37K 100% 856.14kB/s 0:00:00 (xfr#420, to-chk=237/682) include/ieee80211_ext.h 7.43K 100% 103.72kB/s 0:00:00 (xfr#421, to-chk=236/682) include/if_ether.h 4.58K 100% 63.87kB/s 0:00:00 (xfr#422, to-chk=235/682) include/ip.h 4.04K 100% 56.36kB/s 0:00:00 (xfr#423, to-chk=234/682) include/mlme_osdep.h 1.07K 100% 14.96kB/s 0:00:00 (xfr#424, to-chk=233/682) include/nic_spec.h 1.24K 100% 17.27kB/s 0:00:00 (xfr#425, to-chk=232/682) include/osdep_intf.h 4.13K 100% 57.65kB/s 0:00:00 (xfr#426, to-chk=231/682) include/osdep_service.h 28.37K 100% 395.81kB/s 0:00:00 (xfr#427, to-chk=230/682) include/osdep_service_bsd.h 21.49K 100% 299.75kB/s 0:00:00 (xfr#428, to-chk=229/682) include/osdep_service_ce.h 4.52K 100% 63.11kB/s 0:00:00 (xfr#429, to-chk=228/682) include/osdep_service_linux.h 14.88K 100% 207.66kB/s 0:00:00 (xfr#430, to-chk=227/682) include/osdep_service_xp.h 4.83K 100% 67.41kB/s 0:00:00 (xfr#431, to-chk=226/682) include/pci_hal.h 1.61K 100% 22.50kB/s 0:00:00 (xfr#432, to-chk=225/682) include/pci_ops.h 4.30K 100% 59.93kB/s 0:00:00 (xfr#433, to-chk=224/682) include/pci_osintf.h 2.20K 100% 30.75kB/s 0:00:00 (xfr#434, to-chk=223/682) include/recv_osdep.h 2.69K 100% 37.51kB/s 0:00:00 (xfr#435, to-chk=222/682) include/rtl8188e_cmd.h 5.14K 100% 71.71kB/s 0:00:00 (xfr#436, to-chk=221/682) include/rtl8188e_dm.h 1.04K 100% 14.48kB/s 0:00:00 (xfr#437, to-chk=220/682) include/rtl8188e_hal.h 12.25K 100% 170.94kB/s 0:00:00 (xfr#438, to-chk=219/682) include/rtl8188e_led.h 1.40K 100% 19.46kB/s 0:00:00 (xfr#439, to-chk=218/682) include/rtl8188e_recv.h 3.45K 100% 48.09kB/s 0:00:00 (xfr#440, to-chk=217/682) include/rtl8188e_rf.h 953 100% 13.11kB/s 0:00:00 (xfr#441, to-chk=216/682) include/rtl8188e_spec.h 5.78K 100% 79.56kB/s 0:00:00 (xfr#442, to-chk=215/682) include/rtl8188e_sreset.h 921 100% 12.67kB/s 0:00:00 (xfr#443, to-chk=214/682) include/rtl8188e_xmit.h 7.61K 100% 104.73kB/s 0:00:00 (xfr#444, to-chk=213/682) include/rtl8188f_cmd.h 11.85K 100% 162.92kB/s 0:00:00 (xfr#445, to-chk=212/682) include/rtl8188f_dm.h 1.42K 100% 19.55kB/s 0:00:00 (xfr#446, to-chk=211/682) include/rtl8188f_hal.h 9.37K 100% 128.88kB/s 0:00:00 (xfr#447, to-chk=210/682) include/rtl8188f_led.h 1.55K 100% 21.33kB/s 0:00:00 (xfr#448, to-chk=209/682) include/rtl8188f_recv.h 2.25K 100% 30.96kB/s 0:00:00 (xfr#449, to-chk=208/682) include/rtl8188f_rf.h 856 100% 11.77kB/s 0:00:00 (xfr#450, to-chk=207/682) include/rtl8188f_spec.h 11.58K 100% 159.33kB/s 0:00:00 (xfr#451, to-chk=206/682) include/rtl8188f_sreset.h 919 100% 12.64kB/s 0:00:00 (xfr#452, to-chk=205/682) include/rtl8188f_xmit.h 19.77K 100% 271.98kB/s 0:00:00 (xfr#453, to-chk=204/682) include/rtl8192e_cmd.h 6.05K 100% 83.27kB/s 0:00:00 (xfr#454, to-chk=203/682) include/rtl8192e_dm.h 1.04K 100% 14.29kB/s 0:00:00 (xfr#455, to-chk=202/682) include/rtl8192e_hal.h 13.22K 100% 181.85kB/s 0:00:00 (xfr#456, to-chk=201/682) include/rtl8192e_led.h 1.36K 100% 18.69kB/s 0:00:00 (xfr#457, to-chk=200/682) include/rtl8192e_recv.h 9.32K 100% 128.14kB/s 0:00:00 (xfr#458, to-chk=199/682) include/rtl8192e_rf.h 883 100% 12.15kB/s 0:00:00 (xfr#459, to-chk=198/682) include/rtl8192e_spec.h 13.20K 100% 181.49kB/s 0:00:00 (xfr#460, to-chk=197/682) include/rtl8192e_sreset.h 922 100% 12.68kB/s 0:00:00 (xfr#461, to-chk=196/682) include/rtl8192e_xmit.h 19.93K 100% 274.18kB/s 0:00:00 (xfr#462, to-chk=195/682) include/rtl8192f_cmd.h 11.09K 100% 152.47kB/s 0:00:00 (xfr#463, to-chk=194/682) include/rtl8192f_dm.h 1.04K 100% 14.28kB/s 0:00:00 (xfr#464, to-chk=193/682) include/rtl8192f_hal.h 10.60K 100% 145.82kB/s 0:00:00 (xfr#465, to-chk=192/682) include/rtl8192f_led.h 1.44K 100% 19.75kB/s 0:00:00 (xfr#466, to-chk=191/682) include/rtl8192f_recv.h 4.08K 100% 56.08kB/s 0:00:00 (xfr#467, to-chk=190/682) include/rtl8192f_rf.h 2.67K 100% 36.68kB/s 0:00:00 (xfr#468, to-chk=189/682) include/rtl8192f_spec.h 21.92K 100% 301.55kB/s 0:00:00 (xfr#469, to-chk=188/682) include/rtl8192f_sreset.h 976 100% 13.42kB/s 0:00:00 (xfr#470, to-chk=187/682) include/rtl8192f_xmit.h 24.69K 100% 339.57kB/s 0:00:00 (xfr#471, to-chk=186/682) include/rtl8703b_cmd.h 11.85K 100% 162.99kB/s 0:00:00 (xfr#472, to-chk=185/682) include/rtl8703b_dm.h 1.42K 100% 19.55kB/s 0:00:00 (xfr#473, to-chk=184/682) include/rtl8703b_hal.h 9.50K 100% 130.64kB/s 0:00:00 (xfr#474, to-chk=183/682) include/rtl8703b_led.h 1.58K 100% 21.75kB/s 0:00:00 (xfr#475, to-chk=182/682) include/rtl8703b_recv.h 2.54K 100% 34.98kB/s 0:00:00 (xfr#476, to-chk=181/682) include/rtl8703b_rf.h 856 100% 11.77kB/s 0:00:00 (xfr#477, to-chk=180/682) include/rtl8703b_spec.h 18.91K 100% 260.08kB/s 0:00:00 (xfr#478, to-chk=179/682) include/rtl8703b_sreset.h 921 100% 12.67kB/s 0:00:00 (xfr#479, to-chk=178/682) include/rtl8703b_xmit.h 20.02K 100% 275.39kB/s 0:00:00 (xfr#480, to-chk=177/682) include/rtl8710b_cmd.h 10.18K 100% 140.03kB/s 0:00:00 (xfr#481, to-chk=176/682) include/rtl8710b_dm.h 1.42K 100% 19.27kB/s 0:00:00 (xfr#482, to-chk=175/682) include/rtl8710b_hal.h 9.06K 100% 122.88kB/s 0:00:00 (xfr#483, to-chk=174/682) include/rtl8710b_led.h 1.57K 100% 21.24kB/s 0:00:00 (xfr#484, to-chk=173/682) include/rtl8710b_lps_poff.h 2.79K 100% 37.86kB/s 0:00:00 (xfr#485, to-chk=172/682) include/rtl8710b_recv.h 3.44K 100% 46.62kB/s 0:00:00 (xfr#486, to-chk=171/682) include/rtl8710b_rf.h 763 100% 10.35kB/s 0:00:00 (xfr#487, to-chk=170/682) include/rtl8710b_spec.h 17.25K 100% 233.98kB/s 0:00:00 (xfr#488, to-chk=169/682) include/rtl8710b_sreset.h 921 100% 12.49kB/s 0:00:00 (xfr#489, to-chk=168/682) include/rtl8710b_xmit.h 24.27K 100% 329.14kB/s 0:00:00 (xfr#490, to-chk=167/682) include/rtl8723b_cmd.h 11.85K 100% 160.73kB/s 0:00:00 (xfr#491, to-chk=166/682) include/rtl8723b_dm.h 1.42K 100% 19.26kB/s 0:00:00 (xfr#492, to-chk=165/682) include/rtl8723b_hal.h 9.83K 100% 133.33kB/s 0:00:00 (xfr#493, to-chk=164/682) include/rtl8723b_led.h 1.56K 100% 21.13kB/s 0:00:00 (xfr#494, to-chk=163/682) include/rtl8723b_recv.h 2.54K 100% 34.51kB/s 0:00:00 (xfr#495, to-chk=162/682) include/rtl8723b_rf.h 856 100% 11.61kB/s 0:00:00 (xfr#496, to-chk=161/682) include/rtl8723b_spec.h 11.65K 100% 158.00kB/s 0:00:00 (xfr#497, to-chk=160/682) include/rtl8723b_sreset.h 921 100% 12.49kB/s 0:00:00 (xfr#498, to-chk=159/682) include/rtl8723b_xmit.h 20.00K 100% 271.31kB/s 0:00:00 (xfr#499, to-chk=158/682) include/rtl8723d_cmd.h 10.59K 100% 143.62kB/s 0:00:00 (xfr#500, to-chk=157/682) include/rtl8723d_dm.h 1.42K 100% 19.27kB/s 0:00:00 (xfr#501, to-chk=156/682) include/rtl8723d_hal.h 10.14K 100% 137.49kB/s 0:00:00 (xfr#502, to-chk=155/682) include/rtl8723d_led.h 1.57K 100% 21.24kB/s 0:00:00 (xfr#503, to-chk=154/682) include/rtl8723d_lps_poff.h 2.79K 100% 37.86kB/s 0:00:00 (xfr#504, to-chk=153/682) include/rtl8723d_recv.h 4.18K 100% 56.76kB/s 0:00:00 (xfr#505, to-chk=152/682) include/rtl8723d_rf.h 845 100% 11.46kB/s 0:00:00 (xfr#506, to-chk=151/682) include/rtl8723d_spec.h 16.41K 100% 222.53kB/s 0:00:00 (xfr#507, to-chk=150/682) include/rtl8723d_sreset.h 921 100% 12.49kB/s 0:00:00 (xfr#508, to-chk=149/682) include/rtl8723d_xmit.h 24.27K 100% 329.20kB/s 0:00:00 (xfr#509, to-chk=148/682) include/rtl8812a_cmd.h 7.08K 100% 96.04kB/s 0:00:00 (xfr#510, to-chk=147/682) include/rtl8812a_dm.h 1.03K 100% 14.02kB/s 0:00:00 (xfr#511, to-chk=146/682) include/rtl8812a_hal.h 15.04K 100% 204.03kB/s 0:00:00 (xfr#512, to-chk=145/682) include/rtl8812a_led.h 1.51K 100% 20.49kB/s 0:00:00 (xfr#513, to-chk=144/682) include/rtl8812a_recv.h 7.78K 100% 105.48kB/s 0:00:00 (xfr#514, to-chk=143/682) include/rtl8812a_rf.h 881 100% 11.95kB/s 0:00:00 (xfr#515, to-chk=142/682) include/rtl8812a_spec.h 10.66K 100% 144.59kB/s 0:00:00 (xfr#516, to-chk=141/682) include/rtl8812a_sreset.h 918 100% 12.28kB/s 0:00:00 (xfr#517, to-chk=140/682) include/rtl8812a_xmit.h 15.52K 100% 207.67kB/s 0:00:00 (xfr#518, to-chk=139/682) include/rtl8814a_cmd.h 10.87K 100% 145.36kB/s 0:00:00 (xfr#519, to-chk=138/682) include/rtl8814a_dm.h 897 100% 12.00kB/s 0:00:00 (xfr#520, to-chk=137/682) include/rtl8814a_hal.h 13.66K 100% 182.76kB/s 0:00:00 (xfr#521, to-chk=136/682) include/rtl8814a_led.h 1.45K 100% 19.36kB/s 0:00:00 (xfr#522, to-chk=135/682) include/rtl8814a_recv.h 10.07K 100% 134.74kB/s 0:00:00 (xfr#523, to-chk=134/682) include/rtl8814a_rf.h 883 100% 11.81kB/s 0:00:00 (xfr#524, to-chk=133/682) include/rtl8814a_spec.h 26.03K 100% 348.18kB/s 0:00:00 (xfr#525, to-chk=132/682) include/rtl8814a_sreset.h 920 100% 12.31kB/s 0:00:00 (xfr#526, to-chk=131/682) include/rtl8814a_xmit.h 19.95K 100% 266.87kB/s 0:00:00 (xfr#527, to-chk=130/682) include/rtl8814b_hal.h 8.94K 100% 119.62kB/s 0:00:00 (xfr#528, to-chk=129/682) include/rtl8814be_hal.h 1.08K 100% 14.50kB/s 0:00:00 (xfr#529, to-chk=128/682) include/rtl8814bu_hal.h 1.83K 100% 24.52kB/s 0:00:00 (xfr#530, to-chk=127/682) include/rtl8821a_spec.h 3.45K 100% 46.13kB/s 0:00:00 (xfr#531, to-chk=126/682) include/rtl8821a_xmit.h 4.25K 100% 56.88kB/s 0:00:00 (xfr#532, to-chk=125/682) include/rtl8821c_dm.h 887 100% 11.87kB/s 0:00:00 (xfr#533, to-chk=124/682) include/rtl8821c_hal.h 2.69K 100% 35.93kB/s 0:00:00 (xfr#534, to-chk=123/682) include/rtl8821c_spec.h 7.55K 100% 101.07kB/s 0:00:00 (xfr#535, to-chk=122/682) include/rtl8821ce_hal.h 841 100% 11.25kB/s 0:00:00 (xfr#536, to-chk=121/682) include/rtl8821cs_hal.h 839 100% 11.22kB/s 0:00:00 (xfr#537, to-chk=120/682) include/rtl8821cu_hal.h 894 100% 11.96kB/s 0:00:00 (xfr#538, to-chk=119/682) include/rtl8822b_hal.h 8.80K 100% 117.70kB/s 0:00:00 (xfr#539, to-chk=118/682) include/rtl8822be_hal.h 992 100% 13.27kB/s 0:00:00 (xfr#540, to-chk=117/682) include/rtl8822bs_hal.h 1.09K 100% 14.65kB/s 0:00:00 (xfr#541, to-chk=116/682) include/rtl8822bu_hal.h 1.83K 100% 24.52kB/s 0:00:00 (xfr#542, to-chk=115/682) include/rtl8822c_hal.h 9.22K 100% 123.30kB/s 0:00:00 (xfr#543, to-chk=114/682) include/rtl8822ce_hal.h 992 100% 13.27kB/s 0:00:00 (xfr#544, to-chk=113/682) include/rtl8822cs_hal.h 1.09K 100% 14.65kB/s 0:00:00 (xfr#545, to-chk=112/682) include/rtl8822cu_hal.h 1.83K 100% 24.52kB/s 0:00:00 (xfr#546, to-chk=111/682) include/rtw_android.h 3.73K 100% 49.95kB/s 0:00:00 (xfr#547, to-chk=110/682) include/rtw_ap.h 5.54K 100% 74.13kB/s 0:00:00 (xfr#548, to-chk=109/682) include/rtw_beamforming.h 8.95K 100% 119.70kB/s 0:00:00 (xfr#549, to-chk=108/682) include/rtw_br_ext.h 2.00K 100% 26.72kB/s 0:00:00 (xfr#550, to-chk=107/682) include/rtw_bt_mp.h 7.86K 100% 105.19kB/s 0:00:00 (xfr#551, to-chk=106/682) include/rtw_btcoex.h 19.54K 100% 261.41kB/s 0:00:00 (xfr#552, to-chk=105/682) include/rtw_btcoex_wifionly.h 1.08K 100% 14.49kB/s 0:00:00 (xfr#553, to-chk=104/682) include/rtw_byteorder.h 1.15K 100% 15.32kB/s 0:00:00 (xfr#554, to-chk=103/682) include/rtw_cmd.h 31.32K 100% 419.03kB/s 0:00:00 (xfr#555, to-chk=102/682) include/rtw_debug.h 26.82K 100% 358.79kB/s 0:00:00 (xfr#556, to-chk=101/682) include/rtw_eeprom.h 4.04K 100% 53.99kB/s 0:00:00 (xfr#557, to-chk=100/682) include/rtw_efuse.h 10.24K 100% 136.99kB/s 0:00:00 (xfr#558, to-chk=99/682) include/rtw_event.h 2.47K 100% 32.58kB/s 0:00:00 (xfr#559, to-chk=98/682) include/rtw_ht.h 12.33K 100% 162.76kB/s 0:00:00 (xfr#560, to-chk=97/682) include/rtw_io.h 18.95K 100% 250.01kB/s 0:00:00 (xfr#561, to-chk=96/682) include/rtw_ioctl.h 1.55K 100% 20.42kB/s 0:00:00 (xfr#562, to-chk=95/682) include/rtw_ioctl_query.h 721 100% 9.51kB/s 0:00:00 (xfr#563, to-chk=94/682) include/rtw_ioctl_set.h 1.80K 100% 23.81kB/s 0:00:00 (xfr#564, to-chk=93/682) include/rtw_iol.h 5.48K 100% 72.28kB/s 0:00:00 (xfr#565, to-chk=92/682) include/rtw_mcc.h 9.28K 100% 122.43kB/s 0:00:00 (xfr#566, to-chk=91/682) include/rtw_mem.h 1.41K 100% 18.57kB/s 0:00:00 (xfr#567, to-chk=90/682) include/rtw_mi.h 11.50K 100% 151.82kB/s 0:00:00 (xfr#568, to-chk=89/682) include/rtw_mlme.h 48.20K 100% 636.05kB/s 0:00:00 (xfr#569, to-chk=88/682) include/rtw_mlme_ext.h 49.80K 100% 657.17kB/s 0:00:00 (xfr#570, to-chk=87/682) include/rtw_mp.h 25.93K 100% 342.17kB/s 0:00:00 (xfr#571, to-chk=86/682) include/rtw_mp_phy_regdef.h 38.09K 100% 502.73kB/s 0:00:00 (xfr#572, to-chk=85/682) include/rtw_odm.h 3.46K 100% 45.71kB/s 0:00:00 (xfr#573, to-chk=84/682) include/rtw_p2p.h 7.99K 100% 105.43kB/s 0:00:00 (xfr#574, to-chk=83/682) include/rtw_pwrctrl.h 17.86K 100% 235.75kB/s 0:00:00 (xfr#575, to-chk=82/682) include/rtw_qos.h 2.12K 100% 27.91kB/s 0:00:00 (xfr#576, to-chk=81/682) include/rtw_recv.h 19.11K 100% 248.78kB/s 0:00:00 (xfr#577, to-chk=80/682) include/rtw_rf.h 9.14K 100% 119.04kB/s 0:00:00 (xfr#578, to-chk=79/682) include/rtw_rm.h 2.36K 100% 30.68kB/s 0:00:00 (xfr#579, to-chk=78/682) include/rtw_rm_fsm.h 9.54K 100% 124.18kB/s 0:00:00 (xfr#580, to-chk=77/682) include/rtw_rm_util.h 1.77K 100% 23.05kB/s 0:00:00 (xfr#581, to-chk=76/682) include/rtw_rson.h 2.51K 100% 32.66kB/s 0:00:00 (xfr#582, to-chk=75/682) include/rtw_sdio.h 1.17K 100% 15.27kB/s 0:00:00 (xfr#583, to-chk=74/682) include/rtw_security.h 15.24K 100% 198.40kB/s 0:00:00 (xfr#584, to-chk=73/682) include/rtw_sreset.h 1.86K 100% 24.21kB/s 0:00:00 (xfr#585, to-chk=72/682) include/rtw_tdls.h 9.52K 100% 123.93kB/s 0:00:00 (xfr#586, to-chk=71/682) include/rtw_version.h 108 100% 1.41kB/s 0:00:00 (xfr#587, to-chk=70/682) include/rtw_vht.h 10.27K 100% 133.75kB/s 0:00:00 (xfr#588, to-chk=69/682) include/rtw_wapi.h 6.61K 100% 86.02kB/s 0:00:00 (xfr#589, to-chk=68/682) include/rtw_xmit.h 29.85K 100% 388.70kB/s 0:00:00 (xfr#590, to-chk=67/682) include/sdio_hal.h 1.51K 100% 19.71kB/s 0:00:00 (xfr#591, to-chk=66/682) include/sdio_ops.h 8.45K 100% 110.01kB/s 0:00:00 (xfr#592, to-chk=65/682) include/sdio_ops_ce.h 1.82K 100% 23.75kB/s 0:00:00 (xfr#593, to-chk=64/682) include/sdio_ops_linux.h 2.60K 100% 33.87kB/s 0:00:00 (xfr#594, to-chk=63/682) include/sdio_ops_xp.h 1.82K 100% 23.67kB/s 0:00:00 (xfr#595, to-chk=62/682) include/sdio_osintf.h 717 100% 9.34kB/s 0:00:00 (xfr#596, to-chk=61/682) include/sta_info.h 19.50K 100% 253.91kB/s 0:00:00 (xfr#597, to-chk=60/682) include/usb_hal.h 1.93K 100% 25.16kB/s 0:00:00 (xfr#598, to-chk=59/682) include/usb_ops.h 4.99K 100% 64.93kB/s 0:00:00 (xfr#599, to-chk=58/682) include/usb_ops_linux.h 4.68K 100% 60.89kB/s 0:00:00 (xfr#600, to-chk=57/682) include/usb_osintf.h 951 100% 12.38kB/s 0:00:00 (xfr#601, to-chk=56/682) include/usb_vendor_req.h 1.94K 100% 25.27kB/s 0:00:00 (xfr#602, to-chk=55/682) include/wifi.h 42.94K 100% 559.10kB/s 0:00:00 (xfr#603, to-chk=54/682) include/wlan_bssdef.h 10.17K 100% 132.41kB/s 0:00:00 (xfr#604, to-chk=53/682) include/xmit_osdep.h 2.62K 100% 34.10kB/s 0:00:00 (xfr#605, to-chk=52/682) include/byteorder/ include/byteorder/big_endian.h 3.21K 100% 41.85kB/s 0:00:00 (xfr#606, to-chk=48/682) include/byteorder/generic.h 7.18K 100% 93.45kB/s 0:00:00 (xfr#607, to-chk=47/682) include/byteorder/little_endian.h 3.39K 100% 44.09kB/s 0:00:00 (xfr#608, to-chk=46/682) include/byteorder/swab.h 3.27K 100% 42.60kB/s 0:00:00 (xfr#609, to-chk=45/682) include/byteorder/swabb.h 4.02K 100% 52.34kB/s 0:00:00 (xfr#610, to-chk=44/682) include/cmn_info/ include/cmn_info/rtw_sta_info.h 8.45K 100% 110.03kB/s 0:00:00 (xfr#611, to-chk=43/682) include/linux/ include/linux/wireless.h 2.74K 100% 35.65kB/s 0:00:00 (xfr#612, to-chk=42/682) os_dep/ os_dep/osdep_service.c 65.68K 100% 843.98kB/s 0:00:00 (xfr#613, to-chk=41/682) os_dep/linux/ os_dep/linux/custom_gpio_linux.c 8.42K 100% 108.17kB/s 0:00:00 (xfr#614, to-chk=39/682) os_dep/linux/ioctl_cfg80211.c 317.52K 100% 3.98MB/s 0:00:00 (xfr#615, to-chk=38/682) os_dep/linux/ioctl_cfg80211.h 16.54K 100% 212.56kB/s 0:00:00 (xfr#616, to-chk=37/682) os_dep/linux/ioctl_linux.c 370.37K 100% 4.59MB/s 0:00:00 (xfr#617, to-chk=36/682) os_dep/linux/ioctl_mp.c 94.44K 100% 1.17MB/s 0:00:00 (xfr#618, to-chk=35/682) os_dep/linux/mlme_linux.c 11.41K 100% 144.71kB/s 0:00:00 (xfr#619, to-chk=34/682) os_dep/linux/os_intfs.c 158.40K 100% 1.94MB/s 0:00:00 (xfr#620, to-chk=33/682) os_dep/linux/recv_linux.c 20.08K 100% 251.35kB/s 0:00:00 (xfr#621, to-chk=32/682) os_dep/linux/rhashtable.c 20.62K 100% 258.14kB/s 0:00:00 (xfr#622, to-chk=31/682) os_dep/linux/rhashtable.h 25.50K 100% 319.27kB/s 0:00:00 (xfr#623, to-chk=30/682) os_dep/linux/rtw_android.c 35.95K 100% 450.08kB/s 0:00:00 (xfr#624, to-chk=29/682) os_dep/linux/rtw_cfgvendor.c 59.00K 100% 738.73kB/s 0:00:00 (xfr#625, to-chk=28/682) os_dep/linux/rtw_cfgvendor.h 26.36K 100% 329.99kB/s 0:00:00 (xfr#626, to-chk=27/682) os_dep/linux/rtw_proc.c 139.40K 100% 1.70MB/s 0:00:00 (xfr#627, to-chk=26/682) os_dep/linux/rtw_proc.h 2.29K 100% 28.68kB/s 0:00:00 (xfr#628, to-chk=25/682) os_dep/linux/rtw_rhashtable.c 2.23K 100% 27.88kB/s 0:00:00 (xfr#629, to-chk=24/682) os_dep/linux/rtw_rhashtable.h 2.51K 100% 31.48kB/s 0:00:00 (xfr#630, to-chk=23/682) os_dep/linux/usb_intf.c 53.33K 100% 667.68kB/s 0:00:00 (xfr#631, to-chk=22/682) os_dep/linux/usb_ops_linux.c 29.53K 100% 369.68kB/s 0:00:00 (xfr#632, to-chk=21/682) os_dep/linux/wifi_regd.c 3.70K 100% 46.32kB/s 0:00:00 (xfr#633, to-chk=20/682) os_dep/linux/wifi_regd.h 829 100% 10.38kB/s 0:00:00 (xfr#634, to-chk=19/682) os_dep/linux/xmit_linux.c 16.65K 100% 205.86kB/s 0:00:00 (xfr#635, to-chk=18/682) platform/ platform/custom_country_chplan.h 1.04K 100% 12.92kB/s 0:00:00 (xfr#636, to-chk=17/682) platform/platform_ARM_SUN50IW1P1_sdio.c 2.21K 100% 27.36kB/s 0:00:00 (xfr#637, to-chk=16/682) platform/platform_ARM_SUNnI_sdio.c 3.51K 100% 43.44kB/s 0:00:00 (xfr#638, to-chk=15/682) platform/platform_ARM_SUNxI_sdio.c 2.67K 100% 32.97kB/s 0:00:00 (xfr#639, to-chk=14/682) platform/platform_ARM_SUNxI_usb.c 3.90K 100% 48.15kB/s 0:00:00 (xfr#640, to-chk=13/682) platform/platform_ARM_WMT_sdio.c 1.53K 100% 18.94kB/s 0:00:00 (xfr#641, to-chk=12/682) platform/platform_RTK_DMP_usb.c 966 100% 11.94kB/s 0:00:00 (xfr#642, to-chk=11/682) platform/platform_aml_s905_sdio.c 1.48K 100% 18.34kB/s 0:00:00 (xfr#643, to-chk=10/682) platform/platform_aml_s905_sdio.h 1.05K 100% 12.98kB/s 0:00:00 (xfr#644, to-chk=9/682) platform/platform_arm_act_sdio.c 1.35K 100% 16.73kB/s 0:00:00 (xfr#645, to-chk=8/682) platform/platform_hisilicon_hi3798_sdio.c 2.67K 100% 32.94kB/s 0:00:00 (xfr#646, to-chk=7/682) platform/platform_hisilicon_hi3798_sdio.h 1.04K 100% 12.89kB/s 0:00:00 (xfr#647, to-chk=6/682) platform/platform_ops.c 897 100% 11.09kB/s 0:00:00 (xfr#648, to-chk=5/682) platform/platform_ops.h 887 100% 10.96kB/s 0:00:00 (xfr#649, to-chk=4/682) platform/platform_rockchips_sdio.c 1.72K 100% 21.27kB/s 0:00:00 (xfr#650, to-chk=3/682) platform/platform_sprd_sdio.c 2.05K 100% 25.32kB/s 0:00:00 (xfr#651, to-chk=2/682) platform/platform_zte_zx296716_sdio.c 1.46K 100% 18.07kB/s 0:00:00 (xfr#652, to-chk=1/682) platform/platform_zte_zx296716_sdio.h 989 100% 12.23kB/s 0:00:00 (xfr#653, to-chk=0/682) sent 27.55M bytes received 12.68K bytes 55.12M bytes/sec total size is 27.50M speedup is 1.00 dkms add $ sudo dkms add -m rtl88x2bu -v ${VER} Creating symlink /var/lib/dkms/rtl88x2bu/5.8.7.1/source -\u0026gt; /usr/src/rtl88x2bu-5.8.7.1 DKMS: add completed. dkms build $ sudo dkms build -m rtl88x2bu -v ${VER} Kernel preparation unnecessary for this kernel. Skipping... Building module: cleaning build area... \u0026#39;make\u0026#39; -j 16 KVER=5.15.0-119-generic src=/usr/src/rtl88x2bu-5.8.7.1....... Signing module: Generating a new Secure Boot signing key: Can\u0026#39;t load /var/lib/shim-signed/mok/.rnd into RNG 139669372728640:error:2406F079:random number generator:RAND_load_file:Cannot open file:../crypto/rand/randfile.c:98:Filename=/var/lib/shim-signed/mok/.rnd Generating a RSA private key ............+++++ ........................+++++ writing new private key to \u0026#39;/var/lib/shim-signed/mok/MOK.priv\u0026#39; ----- - /var/lib/dkms/rtl88x2bu/5.8.7.1/5.15.0-119-generic/x86_64/module/88x2bu.ko Secure Boot not enabled on this system. cleaning build area... DKMS: build completed. dkms install $ sudo dkms install -m rtl88x2bu -v ${VER} 88x2bu.ko: Running module version sanity check. - Original module - No original module exists within this kernel - Installation - Installing to /lib/modules/5.15.0-119-generic/updates/dkms/ depmod... DKMS: install completed. Reference cilynx/rtl88x2bu Install TP Link in Ubuntu 20.04 ","date":"1 January, 1970","id":75,"permalink":"/posts/ubuntu_200406_install_tp_link_ac1300_usb_wifi_adaptor_driver/","summary":"","tags":"tp-link realtek ubuntu wifi driver","title":"ubuntu 20.04.6 install tp link a1300 usb wifi adaptor driver"},{"content":"参考链接\nhttps://forum.suse.org.cn/t/eth0/2049/4 https://zh.opensuse.org/openSUSE:13.1%E5%B8%B8%E8%A7%81%E9%97%AE%E9%A2%98 Virtualbox 虚拟机装完没有网络？\nsudo systemctl start NetworkManager\n启动 NetworkManager 服务，会自动运行 DHCP 分配 IP 地址给你。之后可用：ping 127.0.0.1 或 ping 192.168.1.1测试（按 Ctrl + C 可停止 ping，不然会一直进行）。\n或用：\nsudo systemctl status NetworkManager\n查看其状态。一般情况下这时你的网络已经激活了。但你如果运行比如\nping www.baidu.com\n或者\nnslookup www.baidu.com\n是没有结果的。因为我们没指定系统查询域名所用的 DNS 服务器。\n/etc/resolv.conf文件的最后加入：\nnameserver 8.8.8.8 nameserver 8.8.4.4 之后就能 ping 或者 nslookup 百度了。\n","date":"1 January, 1970","id":76,"permalink":"/posts/virtualboxopensuse%E6%97%A0%E7%BD%91%E7%BB%9C%E5%9B%BE%E6%A0%87%E6%97%A0%E6%B3%95%E4%B8%8A%E7%BD%91/","summary":"参考链接","tags":"OpenSuse linux network virtualbox","title":"Virtualbox Opensuse 无网络图标 无法上网"},{"content":"内核源码根目录下创建 .vscode 目录\n.vscode 目录下创建 c_cpp_properties.json 文件，内容如下：\n{ \u0026#34;configurations\u0026#34;: [ { \u0026#34;name\u0026#34;: \u0026#34;Linux\u0026#34;, \u0026#34;includePath\u0026#34;: [ \u0026#34;${workspaceFolder}/**\u0026#34; ], \u0026#34;defines\u0026#34;: [ \u0026#34;__KERNEL__\u0026#34; ], [\u0026#34;compilerPath\u0026#34;: \u0026#34;/opt/bstos/2.3.0.4/sysroots/x86_64-bstsdk-linux/usr/bin/aarch64-bst-linux/aarch64-bst-linux-gcc\u0026#34;,](\u0026lt;https://www.notion.so/Docker-22f588b5e85d492895231b70d4b5c4a0?pvs=21\u0026gt;) \u0026#34;cStandard\u0026#34;: \u0026#34;c11\u0026#34;, \u0026#34;cppStandard\u0026#34;: \u0026#34;c++17\u0026#34;, \u0026#34;intelliSenseMode\u0026#34;: \u0026#34;gcc-x64\u0026#34; } ], \u0026#34;version\u0026#34;: 4 } 说明：\ncompilerPath 需要指定编译器bin文件的路径，而不是编译器所在目录 defines 添加 “KERNEL” 为了解决 uapi 相关头文件中会根据该宏控区分应用层和内核层，如果不定义可能出现头文件不存在问题 例如 include/uapi/linux/videodev2.h 中\n#ifndef __KERNEL__ #include \u0026lt;sys/time.h\u0026gt; #endif ","date":"1 January, 1970","id":77,"permalink":"/posts/vscode-%E9%98%85%E8%AF%BB-linux-%E5%86%85%E6%A0%B8%E4%BB%A3%E7%A0%81%E9%85%8D%E7%BD%AE/","summary":"内核源码根目录下创建 .vscode 目录","tags":"kernel linux vscode","title":"vscode 阅读 Linux 内核代码配置"},{"content":"操作手顺 手机USB连接电脑\nadb shell \u0026#34;setprop persist.adb.tcp.port 5555\u0026#34; adb tcpip 5555 手机连上wifi，确认ip地址 此时可以断开手USB，然后通过wifiadb连接\nadb connect 10.100.2.5 Q\u0026amp;A Issue 执行命令 adb connect 10.100.2.5 报错\nmissing port in specification: tcp:10.100.2.5 Answer 使用命令 adb connect 10.100.2.5:5555 解决\n","date":"1 January, 1970","id":78,"permalink":"/posts/wifiadb/","summary":"手机USB连接电脑","tags":"android adb","title":"Wifi Adb"},{"content":"win8 MSDN key RTM核心版 334NH-RXG76-64THK-C7CKG-D3VPT` MSDN专业版 XHQ8N-C3MCJ-RQXB6-WCHYG-C9WKB win10 激活码 VK7JG-NPHTM-C97JM-9MPGT-3V66T win10 开启远程桌面连接 \u0026ldquo;此电脑\u0026rdquo; 右键 属性\n远程设置\n远程协助\n允许远程协助连接这台计算机(R) 远程桌面\n允许远程连接到此计算机 仅允许运行使用网络级别身份验证的远程桌面的计算机连接(建议)(N) 请注意关闭防火墙. 否则可能出现连接失败.\n","date":"1 January, 1970","id":79,"permalink":"/posts/windows/","summary":"\u0026ldquo;此电脑\u0026rdquo; 右键 属性","tags":"windows","title":"windows"},{"content":"远程电脑启用远程桌面 如何使用远程桌面 - Microsoft 支持\n设置你想要连接以使其允许远程连接的电脑： 确保你拥有 Windows 11 专业版。 若要检查这一点，请选择“开始”，然后打开“设置”。 然后，在“系统”下，选择“关于”，并在“Windows 规范”下，查找“版本”。 有关如何获取 Windows 11 专业版的详细信息，请转到“将 Windows 家庭版升级为 Windows 专业版”。 准备就绪后，选择“开始”，然后打开“设置”。 然后，在“系统”下，选择“远程桌面”，将“远程桌面”设置为“打开”，然后选择“确认”。 记下“电脑名称”下的这台电脑的名称。 稍后将需要使用此名称。 注意事项：\n如果远程电脑账户为无密码登陆，则本地电脑使用 远程桌面 工具连接远程电脑时空密码会连接失败，解决方案参考: 远程主机允许无密码远程桌面连接 远程电脑命令行 ipconfig /all 查看网络 IP， 本地电脑既可以通过远程电脑的网络 IP 也可以通过远程电脑的名称进行远程连接 远程主机允许无密码远程桌面连接 win+r, 输入secpol.msc命令\n安全设置 → 本地策略 → 安全选项 找到： 账户:使用空密码的本地账户只允许进行控制台登陆 已启用 改为 已禁用 将该项使用空密码的本地账户只允许进行本地计算机密码键盘登录 禁用 掉，这样远程桌面就能在无密码登录了。\n","date":"1 January, 1970","id":80,"permalink":"/posts/windows_remote_desktop/","summary":"如何使用远程桌面 - Microsoft 支持","tags":"windows 远程控制","title":"Windows Remote Desktop"},{"content":"前置条件 install vcpkg vcpkg install boost-system:x64-windows boost-filesystem:x64-windows cmake boost 配置 if (WIN32) # 查找 Boost 库 find_package(Boost COMPONENTS filesystem system REQUIRED) if (Boost_FOUND) include_directories(${Boost_INCLUDE_DIRS}) link_directories(${Boost_LIBRARY_DIRS}) endif () endif (WIN32) 编译报错\n====================[ Build | radar_data_local_storage | Release-Visual Studio ]==== ...... CMake Error at C:/Program Files/JetBrains/CLion 2023.1.4/bin/cmake/win/x64/share/cmake-3.25/Modules/FindPackageHandleStandardArgs.cmake:230 (message): Could NOT find Boost (missing: Boost_INCLUDE_DIR filesystem system) Call Stack (most recent call first): C:/Program Files/JetBrains/CLion 2023.1.4/bin/cmake/win/x64/share/cmake-3.25/Modules/FindPackageHandleStandardArgs.cmake:600 (_FPHSA_FAILURE_MESSAGE) C:/Program Files/JetBrains/CLion 2023.1.4/bin/cmake/win/x64/share/cmake-3.25/Modules/FindBoost.cmake:2377 (find_package_handle_standard_args) C:/Users/luyang/.clion-vcpkg/vcpkg/scripts/buildsystems/vcpkg.cmake:855 (_find_package) TestDemo/CMakeLists.txt:8 (find_package) CMake Configure step failed. Build files cannot be regenerated correctly. -- Configuring incomplete, errors occurred! See also \u0026#34;C:/Users/luyang/Documents/TestDemo/cmake-build-release-visual-studio/CMakeFiles/CMakeOutput.log\u0026#34;. 增加 ：set(Boost_INCLUDE_DIR ${_VCPKG_INSTALLED_DIR}/x64-windows/include)\nif (WIN32) # 查找 Boost 库 set(Boost_INCLUDE_DIR ${_VCPKG_INSTALLED_DIR}/x64-windows/include) find_package(Boost COMPONENTS filesystem system REQUIRED) if (Boost_FOUND) include_directories(${Boost_INCLUDE_DIRS}) link_directories(${Boost_LIBRARY_DIRS}) endif () endif (WIN32) 链接 boost-system boost-filesystem if (WIN32) target_link_libraries(radar_data_local_storage Boost::filesystem Boost::system) endif(WIN32) ","date":"1 January, 1970","id":81,"permalink":"/posts/windows_vcpkg_boost/","summary":"编译报错","tags":"vcpkg boost cmake","title":"windows vcpkg boost 开发环境"},{"content":" 下载安装vscode\n下载安装java，不然无法预览plantuml\n下载安装该java安装包后没有设置相关java环境变量就可以预览plantuml了。 下载安装graphivz，不然预览类图报错如下：\nDot Executable:null No dot executable found Cannot find Graphivz. You should try @startuml testdot @enduml or java -jar plantuml.jar -testdot vscode插件列表（plantuml相关） Graphviz Preview by EFanZh PlantUML by jebbs ","date":"1 January, 1970","id":82,"permalink":"/posts/windowsvscodeplantuml%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA/","summary":"下载安装vscode","tags":"plantuml windows vscode","title":"Windows Vscode Plantuml 环境搭建"},{"content":"实际应用中需要将嵌入式开发板的数据通过网络发送出去，如果 WSL 中运行的 client 要与嵌入式开发板进行通讯，则需要将 windows 的端口转发到 WSL 中，反之，如果配置了 windows 端口转发到 WSL 中，则 windows client 无法正常接收开发板的数据，这一点需要注意，需要取消端口转发 windows 端才可以正常接收数据。\nFrom: https://learn.microsoft.com/en-us/windows/wsl/networking\nHere\u0026rsquo;s an example of using the Netsh interface portproxy Windows command to add a port proxy that listens on your host port and connects that port proxy to the IP address for the WSL 2 VM.\nnetsh interface portproxy add v4tov4 listenport=\u0026lt;yourPortToForward\u0026gt; listenaddress=0.0.0.0 connectport=\u0026lt;yourPortToConnectToInWSL\u0026gt; connectaddress=(wsl hostname -I) In this example, you will need to update \u0026lt;yourPortToForward\u0026gt; to a port number, for example listenport=4000. listenaddress=0.0.0.0 means that incoming requests will be accepted from ANY IP address. The Listen Address specifies the IPv4 address for which to listen and can be changed to values that include: IP address, computer NetBIOS name, or computer DNS name. If an address isn\u0026rsquo;t specified, the default is the local computer. You need to update the \u0026lt;yourPortToConnectToInWSL\u0026gt; value to a port number where you want WSL to connect, for example connectport=4000. Lastly, the connectaddress value needs to be the IP address of your Linux distribution installed via WSL 2 (the WSL 2 VM address), which can be found by entering the command: wsl.exe hostname -I.\nSo this command may look something like:\nnetsh interface portproxy add v4tov4 listenport=4000 listenaddress=0.0.0.0 connectport=4000 connectaddress=192.168.101.100 To obtain the IP address, use:\nwsl hostname -I for the IP address of your Linux distribution installed via WSL 2 (the WSL 2 VM address) cat /etc/resolv.conf for the IP address of the Windows machine as seen from WSL 2 (the WSL 2 VM) Using listenaddress=0.0.0.0 will listen on all IPv4 ports.\nUsing a lowercase \u0026#34;i\u0026#34; with the hostname command will generate a different result than using an uppercase \u0026#34;I\u0026#34;. wsl hostname -i is your local machine (127.0.1.1 is a placeholder diagnostic address), whereas wsl hostname -I will return your local machine\u0026#39;s IP address as seen by other machines and should be used to identify the connectaddress of your Linux distribution running via WSL 2. 查询当前已经转发的端口 如何查看当前 windows -\u0026gt; WSL 配置了哪些端口转发？ 以管理员身份运行 PowerShell:\nPS C:\\WINDOWS\\system32\u0026gt; netsh interface portproxy show all 侦听 ipv4: 连接到 ipv4: 地址 端口 地址 端口 --------------- ---------- --------------- ---------- 0.0.0.0 8080 172.18.150.174 80 0.0.0.0 9999 172.25.198.88 9999 127.0.0.1 562 172.25.198.88 562 0.0.0.0 562 172.25.198.88 562 0.0.0.0 4865 172.25.198.88 4865 0.0.0.0 6666 172.25.198.88 6666 确认 WSL IP 地址 WSL 终端运行:\n$ ifconfig docker0: flags=4163\u0026lt;UP,BROADCAST,RUNNING,MULTICAST\u0026gt; mtu 1500 inet 172.17.0.1 netmask 255.255.0.0 broadcast 172.17.255.255 inet6 fe80::42:d3ff:fe45:67a4 prefixlen 64 scopeid 0x20\u0026lt;link\u0026gt; ether 02:42:d3:45:67:a4 txqueuelen 0 (Ethernet) RX packets 12553 bytes 108393702 (108.3 MB) RX errors 0 dropped 0 overruns 0 frame 0 TX packets 15258 bytes 1786658 (1.7 MB) TX errors 0 dropped 0 overruns 0 carrier 0 collisions 0 eth0: flags=4163\u0026lt;UP,BROADCAST,RUNNING,MULTICAST\u0026gt; mtu 1500 inet 172.25.198.88 netmask 255.255.240.0 broadcast 172.25.207.255 inet6 fe80::215:5dff:feec:a420 prefixlen 64 scopeid 0x20\u0026lt;link\u0026gt; ether 00:15:5d:ec:a4:20 txqueuelen 1000 (Ethernet) RX packets 201105667 bytes 290122284896 (290.1 GB) RX errors 0 dropped 0 overruns 0 frame 0 TX packets 55298591 bytes 3209600213 (3.2 GB) TX errors 0 dropped 0 overruns 0 carrier 0 collisions 0 lo: flags=73\u0026lt;UP,LOOPBACK,RUNNING\u0026gt; mtu 65536 inet 127.0.0.1 netmask 255.0.0.0 inet6 ::1 prefixlen 128 scopeid 0x10\u0026lt;host\u0026gt; loop txqueuelen 1000 (Local Loopback) RX packets 217290 bytes 624612200 (624.6 MB) RX errors 0 dropped 0 overruns 0 frame 0 TX packets 217290 bytes 624612200 (624.6 MB) TX errors 0 dropped 0 overruns 0 carrier 0 collisions 0 veth11e7cb7: flags=4163\u0026lt;UP,BROADCAST,RUNNING,MULTICAST\u0026gt; mtu 1500 inet6 fe80::fcfb:17ff:fe7d:ad3 prefixlen 64 scopeid 0x20\u0026lt;link\u0026gt; ether fe:fb:17:7d:0a:d3 txqueuelen 0 (Ethernet) RX packets 12553 bytes 108569444 (108.5 MB) RX errors 0 dropped 0 overruns 0 frame 0 TX packets 15279 bytes 1788224 (1.7 MB) TX errors 0 dropped 0 overruns 0 carrier 0 collisions 0 如上: eth0 172.25.198.88\n增加端口4864映射 netsh interface portproxy add v4tov4 listenaddress=0.0.0.0 listenport=4864 connectaddress=172.25.198.88 4864 PS C:\\WINDOWS\\system32\u0026gt; netsh interface portproxy show all 侦听 ipv4: 连接到 ipv4: 地址 端口 地址 端口 --------------- ---------- --------------- ---------- 0.0.0.0 8080 172.18.150.174 80 0.0.0.0 9999 172.25.198.88 9999 127.0.0.1 562 172.25.198.88 562 0.0.0.0 562 172.25.198.88 562 0.0.0.0 4865 172.25.198.88 4865 0.0.0.0 6666 172.25.198.88 6666 0.0.0.0 4864 172.25.198.88 4864 删除端口4864映射 netsh interface portproxy delete v4tov4 listenport=4864 listenaddress=0.0.0.0 PS C:\\WINDOWS\\system32\u0026gt; netsh interface portproxy show all 侦听 ipv4: 连接到 ipv4: 地址 端口 地址 端口 --------------- ---------- --------------- ---------- 0.0.0.0 8080 172.18.150.174 80 0.0.0.0 9999 172.25.198.88 9999 127.0.0.1 562 172.25.198.88 562 0.0.0.0 562 172.25.198.88 562 0.0.0.0 4865 172.25.198.88 4865 0.0.0.0 6666 172.25.198.88 6666 ","date":"1 January, 1970","id":83,"permalink":"/posts/windows_wsl_%E7%AB%AF%E5%8F%A3%E6%98%A0%E5%B0%84/","summary":"实际应用中需要将嵌入式开发板的数据通过网络发送出去，如果 WSL 中运行的 client 要与嵌入式开发板进行通讯，则需要将 windows 的端口转发到 WSL 中，反之，如果配置了 windows 端口转发到 WSL 中，则 windows client 无法正常接收开发板的数据，这一点需要注意，需要取消端口转发 windows 端才可以正常接收数据。","tags":"wsl network","title":"windows WSL 端口映射"},{"content":"基于 office 2016如何隐藏 word 行尾的换行标记 文件-选项,弹出 Word 选项对话框 选择 显示 取消勾选 段落标记(M) 删除隐藏的数据和个人信息 打开要删除个人信息的文件 文件-信息 检查问题-检查文档 点击检查 点击需要删除信息部分的 全部删除 ","date":"1 January, 1970","id":84,"permalink":"/posts/word/","summary":"","tags":"office word windows","title":"word"},{"content":" 注意：如下 usbipd 命令需要在 以管理员身份运行 的 powershell 中执行\nusbipd: USB/IP open-source project\nPS C:\\WINDOWS\\system32\u0026gt; usbipd wsl attach --busid 4-4 usbipd: error: The service is currently not running; a reboot should fix that. https://github.com/dorssel/usbipd-win/issues/122\n参考了上述链接，也做了重启，仍然报错，于是决定升级 usbipd\n如下步骤也可以作为如何安装 usbipd，wsl 通过 usbipd 访问 USB 设备\nusbipd 安装使用 https://github.com/dorssel/usbipd-win/releases/tag/v4.0.0\n下载 usbipd-win_4.0.0.msi 并安装\n需要注意的是，安装了这个版本发现 usbipd 命令的使用方式变了\nPS C:\\WINDOWS\\system32\u0026gt; usbipd.exe wsl list usbipd: error: The \u0026#39;wsl\u0026#39; subcommand has been removed. Learn about the new syntax at https://learn.microsoft.com/windows/wsl/connect-usb#attach-a-usb-device. PS C:\\WINDOWS\\system32\u0026gt; usbipd attach --busid 4-4 Option \u0026#39;--wsl\u0026#39; is required. usbipd-win 4.0.0 Description: Attaches a USB device to a client. Currently, only WSL is supported. Other clients need to perform an attach using client-side tooling. Exactly one of the options \u0026#39;--busid\u0026#39; or \u0026#39;--hardware-id\u0026#39; is required. Usage: usbipd attach [options] Options: -a, --auto-attach Automatically re-attach when the device is detached or unplugged -b, --busid \u0026lt;BUSID\u0026gt; Attach device having \u0026lt;BUSID\u0026gt; -i, --hardware-id \u0026lt;VID:PID\u0026gt; Attach device having \u0026lt;VID\u0026gt;:\u0026lt;PID\u0026gt; -w, --wsl \u0026lt;[DISTRIBUTION]\u0026gt; (REQUIRED) Attach to WSL, optionally specifying the distribution to use -?, -h, --help Show help and usage information https://github.com/MicrosoftDocs/WSL/issues/1868\n正确的使用方式\nPS C:\\WINDOWS\\system32\u0026gt; usbipd.exe list Connected: BUSID VID:PID DEVICE STATE 1-1 30c9:0096 HP 5MP Camera, HP IR Camera, Camera DFU Device Not shared 1-10 8087:0033 英特尔(R) 无线 Bluetooth(R) Not shared 4-3 0483:572a USB 串行设备 (COM5), USB 大容量存储设备 Not shared 4-4 3415:0308 adb Not shared Persisted: GUID DEVICE 1bfb0182-4c41-487f-bdcb-530e2d2cd7ea USB Serial Converter d7c7745c-3765-49a5-8ad0-c4697d874eb4 Silicon Labs Dual CP2105 USB to UART Bridge: Enhanced COM...r e7af58b3-5b09-4385-a043-6256222507d3 bst usb gadget function usbipd: warning: USB filter \u0026#39;USBPcap\u0026#39; is known to be incompatible with this software; \u0026#39;bind --force\u0026#39; will be required. PS C:\\WINDOWS\\system32\u0026gt; usbipd bind -b 4-4 usbipd: warning: USB filter \u0026#39;USBPcap\u0026#39; is known to be incompatible with this software; \u0026#39;bind --force\u0026#39; will be required. PS C:\\WINDOWS\\system32\u0026gt; usbipd bind -b 4-4 usbipd: warning: USB filter \u0026#39;USBPcap\u0026#39; is known to be incompatible with this software; \u0026#39;bind --force\u0026#39; will be required. PS C:\\WINDOWS\\system32\u0026gt; usbipd attach -w --busid 4-4 usbipd: info: Using WSL distribution \u0026#39;Ubuntu\u0026#39; to attach; the device will be available in all WSL 2 distributions. usbipd: info: Using IP address 172.25.192.1 to reach the host. 然后 wsl 中就可以访问到刚刚挂载的 usb 设备了 Bus 001 Device 002: ID 3415:0308 bst bst usb adb Gadget\nluyang@KFC:/tmp$ sudo lsusb Bus 002 Device 001: ID 1d6b:0003 Linux Foundation 3.0 root hub Bus 001 Device 002: ID 3415:0308 bst bst usb adb Gadget Bus 001 Device 001: ID 1d6b:0002 Linux Foundation 2.0 root hub 注意：usbipd attach 之前要先执行 bind 否则会报错误\nPS C:\\WINDOWS\\system32\u0026gt; usbipd attach -w --busid 4-4 usbipd: error: Device is not shared; run \u0026#39;usbipd bind -b 4-4\u0026#39; as administrator first. 参考链接 WSL2识别USB设备——安装开源 usbipd-win 项目-CSDN博客\n","date":"1 January, 1970","id":85,"permalink":"/posts/usbipd/","summary":"注意：如下 usbipd 命令需要在 以管理员身份运行 的 powershell 中执行","tags":"PUBLIC USB WSL usbipd","title":"wsl 使用 usbipd 访问 USB 设备"},{"content":"秒级精度 time_t 保存自 UTC 1970 年 1 月 1 日 00:00 以来的秒数（不包括闰秒），对应于POSIX time Unix 和 POSIX 兼容系统将 time_t 类型作为带符号整数（通常为 32 或 64 位宽）来实现，它表示自 Unix 时间开始以来的秒数\ntime_t 和 struct tm 之间的转换接口\nstruct tm *localtime(const time_t *timep); struct tm *localtime_r(const time_t *timep, struct tm *result); time_t mktime(struct tm *tm); struct tm { int tm_sec; /* Seconds (0-60) */ int tm_min; /* Minutes (0-59) */ int tm_hour; /* Hours (0-23) */ int tm_mday; /* Day of the month (1-31) */ int tm_mon; /* Month (0-11) */ int tm_year; /* Year - 1900 */ int tm_wday; /* Day of the week (0-6, Sunday = 0) */ int tm_yday; /* Day in the year (0-365, 1 Jan = 0) */ int tm_isdst; /* Daylight saving time */ }; 获取当前时间的 time_t\n#include \u0026lt;time.h\u0026gt; NAME time - get time in seconds SYNOPSIS #include \u0026lt;time.h\u0026gt; time_t time(time_t *tloc); DESCRIPTION time() returns the time as the number of seconds since the Epoch, 1970-01-01 00:00:00 +0000 (UTC). If tloc is non-NULL, the return value is also stored in the memory pointed to by tloc. 当前时间转 struct tm 打印\nstd::tm* local_time = localtime(\u0026amp;current_time); // Print the local time std::cout \u0026lt;\u0026lt; \u0026#34;Current local time is: \u0026#34; \u0026lt;\u0026lt; (local_time-\u0026gt;tm_year + 1900) \u0026lt;\u0026lt; \u0026#34;-\u0026#34; \u0026lt;\u0026lt; (local_time-\u0026gt;tm_mon + 1) \u0026lt;\u0026lt; \u0026#34;-\u0026#34; \u0026lt;\u0026lt; local_time-\u0026gt;tm_mday \u0026lt;\u0026lt; \u0026#34; \u0026#34; \u0026lt;\u0026lt; local_time-\u0026gt;tm_hour \u0026lt;\u0026lt; \u0026#34;:\u0026#34; \u0026lt;\u0026lt; local_time-\u0026gt;tm_min \u0026lt;\u0026lt; \u0026#34;:\u0026#34; \u0026lt;\u0026lt; local_time-\u0026gt;tm_sec \u0026lt;\u0026lt; std::endl; 纳秒精度 struct timespec struct timespec { time_t tv_sec; /* seconds */ long tv_nsec; /* nanoseconds */ }; int clock_gettime(clockid_t clk_id, struct timespec *tp); int clock_settime(clockid_t clk_id, const struct timespec *tp); 关于 clk_id clk_id 参数是要对其采取行动的特定时钟的标识符。时钟可以是系统范围的，因此对所有进程都可见，或者如果它仅在单个进程内测量时间，则可以对每个进程都可见。\n所有实现都支持系统范围的实时时钟，该时钟由 CLOCK_REALTIME 标识。其时间表示自纪元以来的秒数和纳秒数。当其时间改变时，相对间隔的计时器不受影响，但绝对时间点的计时器会受到影响。\n可以实现更多时钟。相应时间值的解释和对计时器的影响尚未指定。\n足够新的 glibc 版本和 Linux 内核支持以下时钟：\nCLOCK_REALTIME 测量实际（即挂钟）时间的系统范围时钟。设置此时钟需要适当的权限。此时钟受系统时间不连续跳跃的影响（例如，如果系统管理员手动更改时钟），以及 adjtime(3) 和 NTP 执行的增量调整。\nCLOCK_REALTIME_COARSE（自 Linux 2.6.32 起；特定于 Linux） CLOCK_REALTIME 的更快但精度较低的版本。当您需要非常快但不是细粒度的时间戳时使用。需要每个架构支持，并且可能还需要 vdso(7) 中对此标志的架构支持。\nCLOCK_MONOTONIC 无法设置的时钟，表示自 POSIX 描述的“过去某个未指定的点”以来的单调时间。在 Linux 上，该点对应于系统自启动以来运行的秒数。\nCLOCK_MONOTONIC 时钟不受系统时间不连续跳跃的影响（例如，如果系统管理员手动更改时钟），但会受到 adjtime(3) 和 NTP 执行的增量调整的影响。此时钟不计算系统暂停的时间。\nCLOCK_MONOTONIC_COARSE（自 Linux 2.6.32 起；Linux 专用） CLOCK_MONOTONIC 的更快但精度更低的版本。当您需要非常快速但不是细粒度的时间戳时使用。需要每个架构支持，并且可能还需要 vdso(7) 中对此标志的架构支持。\nCLOCK_MONOTONIC_RAW（自 Linux 2.6.28 起；Linux 专用） 与 CLOCK_MONOTONIC 类似，但提供对不受 NTP 调整或 adjtime(3) 执行的增量调整影响的原始硬件时间的访问。此时钟不计算系统暂停的时间。\nCLOCK_BOOTTIME（自 Linux 2.6.39 起；Linux 专用） 与 CLOCK_MONOTONIC 相同，但它还包括系统暂停的任何时间。这允许应用程序获得可感知暂停的单调时钟，而无需处理 CLOCK_REALTIME 的复杂性，如果使用 settimeofday(2) 或类似方法更改时间，则可能会出现不连续性。\nCLOCK_PROCESS_CPUTIME_ID（自 Linux 2.6.12 起） 每个进程的 CPU 时间时钟（测量进程中所有线程所消耗的 CPU 时间）。\nCLOCK_THREAD_CPUTIME_ID（自 Linux 2.6.12 起） 线程专用的 CPU 时间时钟。\n根据时间戳设置系统时间 // Your existing code to get the timestamp_us uint64_t timestamp_us = 1629374305000000; // Example timestamp in microseconds // Convert the timestamp to seconds and microseconds struct timespec new_time; new_time.tv_sec = static_cast\u0026lt;time_t\u0026gt;(timestamp_us / 1000000); new_time.tv_nsec = (timestamp_us % 1000000) * 1000; // CLOCK_REALTIME is the identifier for the system-wide realtime clock int result = clock_settime(CLOCK_REALTIME, \u0026amp;new_time); if (result == -1) { std::cerr \u0026lt;\u0026lt; \u0026#34;Failed to set system time: \u0026#34; \u0026lt;\u0026lt; strerror(errno) \u0026lt;\u0026lt; std::endl; return 1; } std::cout \u0026lt;\u0026lt; \u0026#34;System time updated to: \u0026#34; \u0026lt;\u0026lt; new_time.tv_sec \u0026lt;\u0026lt; \u0026#34;s and \u0026#34; \u0026lt;\u0026lt; new_time.tv_nsec \u0026lt;\u0026lt; \u0026#34;ns\u0026#34; \u0026lt;\u0026lt; std::endl; 微秒精度 struct timeval struct timeval { time_t tv_sec; /* seconds */ suseconds_t tv_usec; /* microseconds */ }; struct timezone { int tz_minuteswest; /* minutes west of Greenwich */ int tz_dsttime; /* type of DST correction */ }; #include \u0026lt;sys/time.h\u0026gt; int gettimeofday(struct timeval *tv, struct timezone *tz); int settimeofday(const struct timeval *tv, const struct timezone *tz); struct timeval 和 struct timespec 都是POSIX标准中定义的时间结构体，用于表示时间点或时间间隔。它们在很多系统调用中用于获取或设置时间。以下是这两个结构体的详细说明：\nstruct timeval struct timeval 用于表示一个时间间隔，它包含两个字段：\ntv_sec: 表示秒（time_t 类型），time_t 通常是一个长整型（long），表示自Unix纪元（1970年1月1日 00:00:00 UTC）以来的秒数。 tv_usec: 表示微秒（suseconds_t 类型，通常是一个长整型），表示tv_sec后的微秒数。 这个结构体通常用于需要时间间隔的场景，比如在某些系统调用中指定超时时间。\nstruct timespec struct timespec 用于表示一个具体的时间点，它同样包含两个字段：\ntv_sec: 表示秒（time_t 类型），同struct timeval中的tv_sec。 tv_nsec: 表示纳秒（long 类型），表示tv_sec后的纳秒数。 struct timespec 提供了比 struct timeval 更高的时间精度（纳秒级对比微秒级），因此它更适合用于需要高分辨率时间点的场景。\n使用场景 struct timeval 常用于设置或获取某个操作的超时时间，例如在使用 select(), poll() 或者 gettimeofday() 函数时。 struct timespec 常用于需要设定或查询具体时间点的场合，例如使用 clock_gettime() 或 clock_settime() 函数。 #include \u0026lt;iostream\u0026gt; #include \u0026lt;ctime\u0026gt; #include \u0026lt;sys/time.h\u0026gt; int main() { // 使用struct timeval获取当前时间 struct timeval now_val; if (gettimeofday(\u0026amp;now_val, NULL) == -1) { perror(\u0026#34;gettimeofday\u0026#34;); return 1; } std::cout \u0026lt;\u0026lt; \u0026#34;Current time (usec): \u0026#34; \u0026lt;\u0026lt; now_val.tv_sec \u0026lt;\u0026lt; \u0026#34;s and \u0026#34; \u0026lt;\u0026lt; now_val.tv_usec \u0026lt;\u0026lt; \u0026#34;us since the epoch\u0026#34; \u0026lt;\u0026lt; std::endl; // 使用struct timespec获取当前时间 struct timespec now_spec; if (clock_gettime(CLOCK_REALTIME, \u0026amp;now_spec) == -1) { perror(\u0026#34;clock_gettime\u0026#34;); return 1; } std::cout \u0026lt;\u0026lt; \u0026#34;Current time (nsec): \u0026#34; \u0026lt;\u0026lt; now_spec.tv_sec \u0026lt;\u0026lt; \u0026#34;s and \u0026#34; \u0026lt;\u0026lt; now_spec.tv_nsec \u0026lt;\u0026lt; \u0026#34;ns since the epoch\u0026#34; \u0026lt;\u0026lt; std::endl; return 0; } ","date":"1 January, 1970","id":86,"permalink":"/posts/%E4%B8%80%E6%96%87%E6%90%9E%E6%87%82%E5%BA%94%E7%94%A8%E5%BC%80%E5%8F%91%E6%89%80%E9%9C%80linux%E7%B3%BB%E7%BB%9F%E6%97%B6%E9%97%B4%E7%9A%84%E7%9B%B8%E5%85%B3%E7%9F%A5%E8%AF%86%E7%82%B9/","summary":"time_t 和 struct tm 之间的转换接口","tags":"linux date timesync 时间同步 time","title":"一文搞懂应用开发所需 Linux 系统时间的相关知识点"},{"content":"交叉编译工具链是一个由编译器、连接器和解释器组成的综合开发环境，交叉编译工具链主要由binutils、gcc和glibc三个部分组成。\n有时出于减小 libc 库大小的考虑，也可以用别的 c 库来代替 glibc，例如 uClibc、dietlibc 和 newlib。\n从授权上，分为免费授权版和付费授权版。\n免费版目前有三大主流工具商提供\n第一是GNU（提供源码，自行编译制作） 第二是 Codesourcery 第三是Linora 收费版\nARM原厂提供的armcc IAR提供的编译器 等等 arm-none-linux-gnueabi-gcc：是 Codesourcery 公司（目前已经被Mentor收购）基于GCC推出的的ARM交叉编译工具。可用于交叉编译ARM（32位）系统中所有环节的代码，包括裸机程序、u-boot、Linux kernel、filesystem和App应用程序。\narm-linux-gnueabihf-gcc：是由 Linaro 公司基于GCC推出的的ARM交叉编译工具。可用于交叉编译ARM（32位）系统中所有环节的代码，包括裸机程序、u-boot、Linux kernel、filesystem和App应用程序。\naarch64-linux-gnu-gcc：是由 Linaro 公司基于GCC推出的的ARM交叉编译工具。可用于交叉编译ARMv8 64位目标中的裸机程序、u-boot、Linux kernel、filesystem和App应用程序。\narm-none-elf-gcc：是 Codesourcery 公司（目前已经被Mentor收购）基于GCC推出的的ARM交叉编译工具。可用于交叉编译ARM MCU（32位）芯片，如ARM7、ARM9、Cortex-M/R芯片程序。\narm-none-eabi-gcc：是 GNU 推出的的ARM交叉编译工具。可用于交叉编译ARM MCU（32位）芯片，如ARM7、ARM9、Cortex-M/R芯片程序。\n交叉编译工具链的命名规则为：arch [-vendor] [-os] [-(gnu)eabi]\narch – 体系架构，如ARM，MIPS（通过交叉编译工具生成的可执行文件或系统镜像的运行平台或环境） vendor – 工具链提供商 os – 目标操作系统（host主要操作平台，也就是编译时的系统） eabi – 嵌入式应用二进制接口（Embedded Application Binary Interface）根据对操作系统的支持与否， 根据对操作系统的支持与否，ARM GCC可分为支持和不支持操作系统\narm-none-eabi：这个是没有操作系统的，自然不可能支持那些跟操作系统关系密切的函数，比如fork(2)。他使用的是newlib这个专用于嵌入式系统的C库。 arm-none-linux-eabi：用于Linux的，使用Glibc 实例\n1、arm-none-eabi-gcc（ARM architecture，no vendor，not target an operating system，complies with the ARM EABI） 用于编译 ARM 架构的裸机系统（包括 ARM Linux 的 boot、kernel，不适用编译 Linux 应用 Application），一般适合 ARM7、Cortex-M 和 Cortex-R 内核的芯片使用，所以不支持那些跟操作系统关系密切的函数，比如fork(2)，他使用的是 newlib 这个专用于嵌入式系统的C库。\n2、arm-none-linux-gnueabi-gcc (ARM architecture, no vendor, creates binaries that run on the Linux operating system, and uses the GNU EABI) 主要用于基于ARM架构的Linux系统，可用于编译 ARM 架构的 u-boot、Linux内核、linux应用等。arm-none-linux-gnueabi基于GCC，使用Glibc库，经过 Codesourcery 公司优化过推出的编译器。arm-none-linux-gnueabi-xxx 交叉编译工具的浮点运算非常优秀。一般ARM9、ARM11、Cortex-A 内核，带有 Linux 操作系统的会用到。\n3、arm-eabi-gcc Android ARM 编译器。\n4、armcc ARM 公司推出的编译工具，功能和 arm-none-eabi 类似，可以编译裸机程序（u-boot、kernel），但是不能编译 Linux 应用程序。armcc一般和ARM开发工具一起，Keil MDK、ADS、RVDS和DS-5中的编译器都是armcc，所以 armcc 编译器都是收费的（爱国版除外，呵呵~~）。\n5、arm-none-uclinuxeabi-gcc 和 arm-none-symbianelf-gcc arm-none-uclinuxeabi 用于uCLinux，使用Glibc。 arm-none-symbianelf 用于symbian，没用过，不知道C库是什么 。\nABI 和 EABIABI\n二进制应用程序接口(Application Binary Interface (ABI) for the ARM Architecture)。在计算机中，应用二进制接口描述了应用程序（或者其他类型）和操作系统之间或其他应用程序的低级接口。 EABI：嵌入式ABI。嵌入式应用二进制接口指定了文件格式、数据类型、寄存器使用、堆积组织优化和在一个嵌入式软件中的参数的标准约定。开发者使用自己的汇编语言也可以使用 EABI 作为与兼容的编译器生成的汇编语言的接口。 两者主要区别是，ABI是计算机上的，EABI是嵌入式平台上（如ARM，MIPS等）。arm-linux-gnueabi-gcc 和 arm-linux-gnueabihf-gcc 两个交叉编译器分别适用于 armel 和 armhf 两个不同的架构，armel 和 armhf 这两种架构在对待浮点运算采取了不同的策略（有 fpu 的 arm 才能支持这两种浮点运算策略）。 其实这两个交叉编译器只不过是 gcc 的选项 -mfloat-abi 的默认值不同。gcc 的选项 -mfloat-abi 有三种值 soft、softfp、hard（其中后两者都要求 arm 里有 fpu 浮点运算单元，soft 与后两者是兼容的，但 softfp 和 hard 两种模式互不兼容）： soft： 不用fpu进行浮点计算，即使有fpu浮点运算单元也不用，而是使用软件模式。 softfp： armel架构（对应的编译器为 arm-linux-gnueabi-gcc ）采用的默认值，用fpu计算，但是传参数用普通寄存器传，这样中断的时候，只需要保存普通寄存器，中断负荷小，但是参数需要转换成浮点的再计算。 hard： armhf架构（对应的编译器 arm-linux-gnueabihf-gcc ）采用的默认值，用fpu计算，传参数也用fpu中的浮点寄存器传，省去了转换，性能最好，但是中断负荷高。 把以下测试使用的C文件内容保存成 mfloat.c： #include \u0026lt;stdio.h\u0026gt; int main(void) { double a,b,c; a = 23.543; b = 323.234; c = b/a; printf(“the 13/2 = %f\\n”, c); printf(“hello world !\\n”); return 0; } 1、使用 arm-linux-gnueabihf-gcc 编译，使用“-v”选项以获取更详细的信息：\narm-linux-gnueabihf-gcc -v mfloat.c COLLECT_GCC_OPTIONS=’-v’ ‘-march=armv7-a’ ‘-mfloat-abi=hard’ ‘-mfpu=vfpv3-d16′ ‘-mthumb’ -mfloat-abi=hard 可看出使用hard硬件浮点模式。 2、使用 arm-linux-gnueabi-gcc 编译：\narm-linux-gnueabi-gcc -v mfloat.c COLLECT_GCC_OPTIONS=’-v’ ‘-march=armv7-a’ ‘-mfloat-abi=softfp’ ‘-mfpu=vfpv3-d16′ ‘-mthumb’ -mfloat-abi=softfp 可看出使用softfp模式。\n参考资料\n交叉编译器 arm-linux-gnueabi 和 arm-linux-gnueabihf 的区别：http://www.cnblogs.com/xiaotlili/p/3306100.html arm-none-linux-gnueabi，arm-none-eabi 与arm-eabi 区别：http://blog.csdn.net/mantis_1984/article/details/21049273 What’s the difference between arm-linux- / arm-none-linux-gnueabi- / arm-fsl-linux-gnueabi- in LTIB?https://community.freescale.com/thread/313490 http://elinux.org/RPi_Kernel_Compilation https://github.com/raspberrypi/linux http://packages.ubuntu.com/precise/gcc-arm-linux-gnueabi http://mitchtech.net/raspberry-pi-kernel-compile/ ","date":"1 January, 1970","id":87,"permalink":"/posts/%E4%BA%A4%E5%8F%89%E7%BC%96%E8%AF%91%E5%B7%A5%E5%85%B7%E9%93%BE/","summary":"交叉编译工具链是一个由编译器、连接器和解释器组成的综合开发环境，交叉编译工具链主要由binutils、gcc和glibc三个部分组成。","tags":"编译器","title":"交叉编译工具链"},{"content":"关于雷达 AWR2243 ADC OVER CSI HSI AWR2243 的 CSI2 支持最高数据位速率（Data bit rate）为 600Mbps，DDR 时钟最高为 300Mhz。外部处理器 CSI2 支持的最高时钟至少要等于 AWR2243 配置的 CSI2 输出时钟。\nAWR2243 Data Sources Input Sources DFE(digital front-end) \u0026mdash; 设备实时数据 HIL(hardware in the loop) \u0026mdash; 数据回放 Interleaved and Non-Interleaved Modes 在 AWR12xx, AWR22xx, 和 XWR14xx 器件变体上，建议使用交织存储模式，因为它还有助于通过相应通道轻松映射和传输每个 RX 通道数据。\nAWR2243 的 ADC 存储器对于数据存储可以配置为交织模式或者是非交织模式。\n在交织模式下，ADC 数据是以采样点为间隔在不同接收通道下交织输出。对于非交织模式，ADC 数据按照接收通道把一个接收通道的完整的一个 chirp 数据输出后再输出另一个接收通道的数据。对于不同的模式，外部处理器在获取数据后，需要使用 EDMA 或者其他处理代码，正确重组数据，进行处理。在 mmwave_mcuplus_sdk_04_02_00_02 的例程里，DDMA 的例程使用了交织模式，TDMA 的例程使用了非交织模式。\n下面是不同模式数据数据输出的一个例子，Rx0、Rx1、Rx2、 Rx3 表示不同的接收通道。接收通道后面的数字表示采样点个数。N+1为每个 chirp 的采样点数。\n交织模式 Rx00 Rx10 Rx20 Rx30 Rx01 Rx11 Rx21 Rx31\u0026hellip;\u0026hellip;.Rx3N\n非交织模式 Rx00 Rx01 Rx02 Rx03\u0026hellip;..Rx0N Rx10 Rx11 Rx12 Rx13\u0026hellip;\u0026hellip;.Rx3N\nAWR2243 CSI2 接口输出的原始 ADC 数据格式 外部处理器的 CSI2 数据格式配置需要和AWR2243的ADC数据位数匹配。如果ADC数据位12位，外部处理器的CSI2的数据格式要配置为RAW12。如果ADC数据位14位，外部处理器的CSI2的数据格式要配置为RAW14。如果ADC数据为16位，外部处理器的CSI2数据格式要配置为RAW8。\nIt depends on the configuration set on the AWR2243 side. If you set 16bit ADC mode, RAW8 mode is used. If you set 12bit ADC mode RAW12 is used , in 14 bit ADC mode RAW14 is used.\n如果ADC数据为16位复数，对于一个采样点，AWR2243的CSI2接口上会先输出16位实部数据的低8位，然后输出实部数据的高8位，接下来输出虚部数据的低8位，最后是虚部的高8位。\nCSI是Camera Serial Interface的缩写，也就是摄像头串行接口，这个接口设计之初是用于摄像头传感器。在AWR2243上把一帧毫米波的数据模拟成宽度x高度的图像帧通过CSI2输出。一帧毫米波数据通过CSI2输出的帧的宽度和高度可以根据下面的公式进行计算。外部处理器可以根据下面的公式判断采集到的CSI2数据的数量是否和毫米波射频配置一致。\n分辨率配置 CSI2帧的宽度（单位：位） = 每个chirp的采样点数 x 接收通道数 x 2（复数采样）或者1（实时采样）x 每个采样点的位数\nCSI2帧的高度 = 每帧包含的chirp个数\n图像格式：RAW14，分辨率 3072 * 512\nWidth = 384 * 4(CH) * 2(复数采样) * 14 (每个采样点的位数 RAW14) = 3072 * 14 (bits）\nHeight = 512\nRAW Data Over D-PHY RAW10 格式具有 10 位像素值，但 CSI-2 标准指定最小数据宽度为 1 字节。由于无法传输部分像素数据，因此 CSI-2 根据所使用的像素格式具有各种像素打包标准。 10 位 RAW 像素数据的传输是通过将 4 个 10 位像素值打包到 5 个字节（5 * 8 位（1 字节）= 40 位）来完成的。这种情况下的最小数据包长度始终为 5 个字节。该标准以每像素位数值为基础，并查找必须是 1 字节（8 位）倍数的值。如果要平移的行的像素宽度不能被五整除，则多余的像素将用零填充。下表显示了 CSI-2 支持的格式数据包数据大小限制。\nData format 数据格式 Bits per Pixel (bpp) 每像素位数 (bpp) Pixels per packet (min) 每个数据包的像素（分钟） Packet length (byte) 数据包长度（字节） YUV420 8-bit (legacy) YUV420 8 位（传统） 12 2 3 YUV420 8-bit YUV420 8 位 12 2 2/4 YUV420 10-bit YUV420 10 位 15 4 5/10 YUV422 8-bit YUV422 8 位 16 2 4 YUV422 10-bit YUV422 10 位 20 2 5 RGB888 RGB888 24 1 3 RGB666 RGB666 18 4 9 RGB565 RGB565 16 1 2 RGB555 RGB555 15 1 2 RGB444 RGB444 12 1 2 RAW6 RAW6 6 4 3 RAW7 RAW7 7 8 7 RAW8 RAW8 8 1 1 RAW10 原始10 10 4 5 RAW12 RAW12 12 2 3 RAW14 RAW14 14 4 7 AWR2243 package 如上图，AWR2243 MIPI package，一个 Long Package DATA 包含了 1 整个 chirp 的数据。\nData Payload The data payload is constructed with the following three types of information:\nChirp profile information The actual chirp number ADC data corresponding to chirps of all four channels Interleaved fashion Chirp quality data (configurable) The payload is then split across the four physical data lanes and transmitted to the receiving D-PHY. The data packet packing format is shown in\nPacket Formats (AWR22xx/AWR12xx) The packet formats supported on AWR22xx/AWR12xx devices is shown below and is selected by issuing the data path configuration API.\nPacket 0 • On CSI2, the data can be RAW8/RAW12/RAW14 format and sent on any of the four configured virtual channels. • On LVDS, the data format can be 12/14/16 bit and are mapped onto the different lanes based on a format mapping selection done (using LVDS configuration API). 参考资料 AWR1xx and AWR22xx Data Path Programmer’s Guide (Rev. A) AWR2243 单芯片、76GHz 至 81GHz FMCW 收发器 数据表 (Rev. C) [AWR2243 CSI2接口详解](https://e2echina.ti.com/blogs_/b/the_process/posts/awr2243-csi2?keyMatch=MMWAVE%20PACKET%20FORMAT\u0026amp;_ticdt=MTY5MTQ3NTA1M3wwMTg5OTUxYTNkMzMwMDE3OTY5ZGVlMDYxMmIzMDUwNmYwMDE2MDY3MDBjOTl8W29iamVjdCBPYmplY3Rd) AWR2243 datasheet MMWAVE-DFP-2G 02.02.03.01 AWR2243: AWR2243 CSI2 pixel format problem - Sensors forum - Sensors - TI E2E support forums AWR1243: data packet packing format for RAW8 mode (8-bit) - Sensors forum - Sensors - TI E2E support forums AWR1243: Clarifications on modes and frames - Sensors forum - Sensors - TI E2E support forums AWR2243: Relation between CSI lane position and CSI pin - Sensors forum - Sensors - TI E2E support forums IWR1443: output width and height of CSI frame - Sensors forum - Sensors - TI E2E support forums https://developer.ridgerun.com/wiki/index.php/Camera_Sensor_Basics https://www.graniteriverlabs.com.cn/technical-blog/mipi-csi-2-d-phy/ ","date":"1 January, 1970","id":88,"permalink":"/posts/awr2243_adc/","summary":"AWR2243 的 CSI2 支持最高数据位速率（Data bit rate）为 600Mbps，DDR 时钟最高为 300Mhz。外部处理器 CSI2 支持的最高时钟至少要等于 AWR2243 配置的 CSI2 输出时钟。","tags":"awr2243 MIPI ADC MMWAVE radar","title":"关于雷达 AWR2243 ADC OVER CSI HSI"},{"content":"How to handle GPIO interrupt-like handling in Linux userspace 文件节点 /sys/class/gpio/gpio666# ls active_low device direction edge subsystem uevent value 只用对应 GPIO 有 irq 功能时才会有 edge 文件。\n/sys/class/gpio/export：是一个只写文件，用于导出需要使用的 GPIO 引脚 /sys/class/gpio/gpiox/: 是一个文件夹，在引脚导出后自动在 / sys/class/gpio / 目录下生成的 /sys/class/gpio/gpiox/active_low：是一个文件，用来控制电平的极性（写 1 是高电平还是写 0 是高电平），默认写 1 是高电平，这个文件不用去管它 /sys/class/gpio/gpiox/direction：是一个文件，用来控制 GPIO 是输入还是输出，往direction写 out 就是输出引脚，往direction写 in 就是输入引脚 /sys/class/gpio/gpiox/edge：是一个文件，在输入模式下，写 edge 文件，配置 gpio 为外部中断引脚 非中断引脚： none 上升沿触发： rising 下降沿触发： falling 边沿触发： both /sys/class/gpio/gpiox/value: 是一个文件，在输出模式下，写该文件表示 gpio 输出；在输入模式下读该文件表示输入 sysfs.txt\n\u0026#34;value\u0026#34; ... reads as either 0 (low) or 1 (high). If the GPIO is configured as an output, this value may be written; any nonzero value is treated as high. If the pin can be configured as interrupt-generating interrupt and if it has been configured to generate interrupts (see the description of \u0026#34;edge\u0026#34;), you can poll(2) on that file and poll(2) will return whenever the interrupt was triggered. If you use poll(2), set the events POLLPRI and POLLERR. If you use select(2), set the file descriptor in exceptfds. After poll(2) returns, either lseek(2) to the beginning of the sysfs file and read the new value or close the file and re-open it to read the value. \u0026#34;edge\u0026#34; ... reads as either \u0026#34;none\u0026#34;, \u0026#34;rising\u0026#34;, \u0026#34;falling\u0026#34;, or \u0026#34;both\u0026#34;. Write these strings to select the signal edge(s) that will make poll(2) on the \u0026#34;value\u0026#34; file return. This file exists only if the pin can be configured as an interrupt generating input pin. demo 一坨屎样代码\n#define GPIO_PIN_NUMBER 666 void* gpio_irq(void *arg) { int fd; fd_set readFds; char value; // 如果没有GPIO 导出文件，则打开 GPIO 导出文件 int exportFd = -1; struct stat dir_stat; char gpioDir[64]; sprintf(gpioDir, \u0026#34;/sys/class/gpio/gpio%d\u0026#34;, GPIO_PIN_NUMBER); if (stat(gpioDir, \u0026amp;dir_stat) != 0) { exportFd = open(\u0026#34;/sys/class/gpio/export\u0026#34;, O_WRONLY); if (exportFd == -1) { perror(\u0026#34;Error opening export file\u0026#34;); return EXIT_FAILURE; } // 将 GPIO 口编号写入到导出文件中 if (write(exportFd, \u0026#34;666\u0026#34;, 3) != 3) { perror(\u0026#34;Error writing to export file\u0026#34;); close(exportFd); return EXIT_FAILURE; } close(exportFd); } // 等待一小段时间，以确保 GPIO 口创建完成 usleep(10000); // 打开 GPIO 方向文件 char gpioDirectionPath[64]; sprintf(gpioDirectionPath, \u0026#34;/sys/class/gpio/gpio%d/direction\u0026#34;, GPIO_PIN_NUMBER); fd = open(gpioDirectionPath, O_WRONLY); if (fd \u0026lt; 0) { perror(\u0026#34;Error opening direction file\u0026#34;); return NULL; } // 将 GPIO 口方向设置为输入 if (write(fd, \u0026#34;in\u0026#34;, 2) != 2) { perror(\u0026#34;Error setting GPIO direction\u0026#34;); close(fd); return NULL; } close(fd); // 打开 GPIO edge 文件 char gpioEdgePath[64]; sprintf(gpioEdgePath, \u0026#34;/sys/class/gpio/gpio%d/edge\u0026#34;, GPIO_PIN_NUMBER); fd = open(gpioEdgePath, O_WRONLY); if (fd \u0026lt; 0) { perror(\u0026#34;Error opening edge file\u0026#34;); return NULL; } // 将 GPIO edge both if (write(fd, \u0026#34;rising\u0026#34;, 6) != 6) { perror(\u0026#34;Error setting GPIO edge\u0026#34;); close(fd); return NULL; } close(fd); // 打开 GPIO 值文件 char gpioValuePath[64]; sprintf(gpioValuePath, \u0026#34;/sys/class/gpio/gpio%d/value\u0026#34;, GPIO_PIN_NUMBER); int value_fd = open(gpioValuePath, O_RDONLY); if (value_fd \u0026lt; 0) { perror(\u0026#34;Error opening value file\u0026#34;); return NULL; } // 创建文件描述符集合 FD_ZERO(\u0026amp;readFds); FD_SET(value_fd, \u0026amp;readFds); // 监听 GPIO 的下降沿触发事件 while (true) { // 重新设置文件描述符集合 fd_set tempFds = readFds; // 监听文件描述符变化 int selectResult = select(value_fd + 1, NULL, NULL, \u0026amp;tempFds, NULL); if (selectResult \u0026lt; 0) { perror(\u0026#34;Error in select\u0026#34;); break; } else if (selectResult \u0026gt; 0) { // 检查 GPIO 的文件描述符是否可读 if (FD_ISSET(value_fd, \u0026amp;tempFds)) { DBG_PRINT(\u0026#34;====================\\n\u0026#34;); // 读取 GPIO 的值 lseek(value_fd, 0, SEEK_SET); read(value_fd, \u0026amp;value, 1); DBG_PRINT(\u0026#34;read value: %c\\n\u0026#34;, value); if (value == \u0026#39;0\u0026#39;) { DBG_PRINT(\u0026#34;+++++++++++++++ Falling edge detected! ++++++++++++++\\n\u0026#34;); // 在这里执行 GPIO 下降沿触发事件的处理 } else { DBG_PRINT(\u0026#34;--------------------Rising edge detected!--------------\\n\u0026#34;); // 在这里执行 GPIO 上升沿触发事件的处理 } } // usleep(1000*20); } } close(value_fd); // 关闭 GPIO 导出文件 int unexportFd = open(\u0026#34;/sys/class/gpio/unexport\u0026#34;, O_WRONLY); if (unexportFd \u0026lt; 0) { perror(\u0026#34;Error opening unexport file\u0026#34;); return NULL; } // 将 GPIO 口编号写入到取消导出文件中 if (write(unexportFd, \u0026#34;124\u0026#34;, 3) != 3) { perror(\u0026#34;Error writing to unexport file\u0026#34;); } close(unexportFd); return NULL; } edge: \u0026ldquo;none\u0026rdquo;, \u0026ldquo;rising\u0026rdquo;, \u0026ldquo;falling\u0026rdquo;，\u0026ldquo;both\u0026rdquo; 虽然申请的是 rising edge 中断，但是 select 返回中还是会响应上升沿，下降沿，请根据 read 结果做进一步判断 注意代码中 tempFds 的参数位置： int selectResult = select(value_fd + 1, NULL, NULL, \u0026amp;tempFds, NULL); ","date":"1 January, 1970","id":89,"permalink":"/posts/how_to_handle_gpio_interrupt_like_handling_in_linux_userspace/","summary":"只用对应 GPIO 有 irq 功能时才会有 edge 文件。","tags":"linux interrupt gpio userspace select poll","title":"如何在 Linux 用户空间中进行类似 GPIO 中断的处理"},{"content":"\n","date":"1 January, 1970","id":90,"permalink":"/posts/camera_%E5%9B%BE%E5%83%8F%E6%95%B0%E6%8D%AE%E6%A0%BC%E5%BC%8F_%E4%BB%8Ecmos%E5%88%B0mipi/","summary":"","tags":"cmos mipi raw bayer","title":"摄像头图像数据格式从cmos到mipi"},{"content":"","date":"1 January, 0001","id":91,"permalink":"/posts/c++-chrono/","summary":"","tags":"","title":""}]