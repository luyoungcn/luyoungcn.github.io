<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>非侵入 on LuyangのBlog</title>
    <link>/tags/%E9%9D%9E%E4%BE%B5%E5%85%A5/</link>
    <description>Recent content in 非侵入 on LuyangのBlog</description>
    <generator>Hugo</generator>
    <language>en-US</language>
    <lastBuildDate>Wed, 04 Jun 2025 02:30:00 +0800</lastBuildDate>
    <atom:link href="/tags/%E9%9D%9E%E4%BE%B5%E5%85%A5/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>📘 C&#43;&#43;非侵入性编程范式</title>
      <link>/posts/-c&#43;&#43;%E9%9D%9E%E4%BE%B5%E5%85%A5%E6%80%A7%E7%BC%96%E7%A8%8B%E8%8C%83%E5%BC%8F/</link>
      <pubDate>Wed, 04 Jun 2025 02:30:00 +0800</pubDate>
      <guid>/posts/-c&#43;&#43;%E9%9D%9E%E4%BE%B5%E5%85%A5%E6%80%A7%E7%BC%96%E7%A8%8B%E8%8C%83%E5%BC%8F/</guid>
      <description>&lt;h2 id=&#34;c非侵入性编程范式&#34;&gt;C++非侵入性编程范式&lt;/h2&gt;&#xA;&lt;p&gt;文档编号: Cpp-Tech-NIP-20250624-Final&lt;/p&gt;&#xA;&lt;h3 id=&#34;1-摘要&#34;&gt;1. 摘要&lt;/h3&gt;&#xA;&lt;p&gt;本文档为C++开发者提供了一份关于&lt;strong&gt;非侵入性 (Non-Intrusive)&lt;/strong&gt; 编程范式的全面、深入的技术指南。文档从核心定义出发，系统性地阐述了非侵入性设计的理念、基石与关键技术。内容涵盖泛型编程、非成员函数的策略性使用、操作符重载的外部实现机制（包括参数依赖查找ADL与函数重载），以及类型萃取和智能指针等高级应用。本文旨在通过丰富的代码示例和详尽的原理剖析，帮助开发者掌握并应用非侵入性原则，以构建松耦合、高复用性且易于维护的现代C++软件系统。&lt;/p&gt;&#xA;&lt;hr&gt;&#xA;&lt;h3 id=&#34;2-何为非侵入性编程&#34;&gt;2. 何为非侵入性编程？&lt;/h3&gt;&#xA;&lt;p&gt;在C++中，&lt;strong&gt;非侵入性 (Non-Intrusive)&lt;/strong&gt; 是一种核心设计哲学，其基本原则是：&lt;strong&gt;在为现有类型（如类、结构体）增加新功能，或使其与某个框架、库协作时，无需修改该类型自身的源代码。&lt;/strong&gt;&lt;/p&gt;&#xA;&lt;p&gt;与之相对的是“侵入性 (Intrusive)”设计，它要求被操作的类型必须做出“内在”的改变，例如继承自特定的基类、包含特定的成员变量或实现特定的成员函数。&lt;/p&gt;&#xA;&lt;p&gt;&lt;strong&gt;核心思想对比:&lt;/strong&gt;&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&lt;strong&gt;非侵入性 (Non-Intrusive):&lt;/strong&gt; 功能是“外加”于类型之上的。如同为一部标准手机配上一个多功能手机壳，手机本身无需任何改造。&lt;/li&gt;&#xA;&lt;li&gt;&lt;strong&gt;侵入性 (Intrusive):&lt;/strong&gt; 功能是“内建”在类型之中的。如同手机在设计制造时就内置了防水和无线充电功能。&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;p&gt;现代C++推崇非侵入性设计，因为它极大地增强了代码的&lt;strong&gt;灵活性&lt;/strong&gt;与&lt;strong&gt;可复用性&lt;/strong&gt;，允许开发者将无法修改的第三方类型、标准库类型或遗留代码无缝集成到新系统中。&lt;/p&gt;&#xA;&lt;hr&gt;&#xA;&lt;h3 id=&#34;3-基石泛型编程与模板&#34;&gt;3. 基石：泛型编程与模板&lt;/h3&gt;&#xA;&lt;p&gt;C++模板是非侵入性设计的基石。通过模板，我们可以编写出独立于任何具体类型的算法和数据结构。这些代码仅对类型提出一组“概念”上的要求（例如，可被复制、可被比较），而非结构上的强制要求。&lt;/p&gt;&#xA;&lt;p&gt;&lt;code&gt;std::sort&lt;/code&gt; 算法便是非侵入性的典范。它可以对任何满足其要求的迭代器范围进行排序，而元素类型本身完全无需知晓排序算法的存在。&lt;/p&gt;&#xA;&lt;p&gt;&lt;strong&gt;示例：为一个无法修改的 &lt;code&gt;Product&lt;/code&gt; 类提供排序能力&lt;/strong&gt;&lt;/p&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-C++&#34; data-lang=&#34;C++&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;// third_party_library.h - 源码无法修改&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;#pragma once&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;#include&lt;/span&gt; &lt;span style=&#34;color:#75715e&#34;&gt;&amp;lt;string&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;Product&lt;/span&gt; {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    Product(std&lt;span style=&#34;color:#f92672&#34;&gt;::&lt;/span&gt;string id, &lt;span style=&#34;color:#66d9ef&#34;&gt;double&lt;/span&gt; price) &#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt; id_(std&lt;span style=&#34;color:#f92672&#34;&gt;::&lt;/span&gt;move(id)), price_(price) {}&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;const&lt;/span&gt; std&lt;span style=&#34;color:#f92672&#34;&gt;::&lt;/span&gt;string&lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt; getId() &lt;span style=&#34;color:#66d9ef&#34;&gt;const&lt;/span&gt; { &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; id_; }&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;double&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;getPrice&lt;/span&gt;() &lt;span style=&#34;color:#66d9ef&#34;&gt;const&lt;/span&gt; { &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; price_; } &lt;span style=&#34;color:#75715e&#34;&gt;// 提供一个稳定的公共接口&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;private&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    std&lt;span style=&#34;color:#f92672&#34;&gt;::&lt;/span&gt;string id_;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;double&lt;/span&gt; price_;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;};&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;我们无法修改 &lt;code&gt;Product&lt;/code&gt; 类，但我们可以在外部为其添加比较功能。&lt;/p&gt;</description>
    </item>
  </channel>
</rss>
