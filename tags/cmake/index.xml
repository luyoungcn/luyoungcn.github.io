<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Cmake on LuyangのBlog</title>
    <link>/tags/cmake/</link>
    <description>Recent content in Cmake on LuyangのBlog</description>
    <generator>Hugo</generator>
    <language>en-US</language>
    <lastBuildDate>Sun, 29 Jun 2025 02:30:00 +0800</lastBuildDate>
    <atom:link href="/tags/cmake/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>📌CMake 现代化配置完整指南</title>
      <link>/posts/cmake-%E7%8E%B0%E4%BB%A3%E5%8C%96%E9%85%8D%E7%BD%AE%E5%AE%8C%E6%95%B4%E6%8C%87%E5%8D%97/</link>
      <pubDate>Sun, 29 Jun 2025 02:30:00 +0800</pubDate>
      <guid>/posts/cmake-%E7%8E%B0%E4%BB%A3%E5%8C%96%E9%85%8D%E7%BD%AE%E5%AE%8C%E6%95%B4%E6%8C%87%E5%8D%97/</guid>
      <description>&lt;h1 id=&#34;cmake-现代化配置完整指南&#34;&gt;CMake 现代化配置完整指南&lt;/h1&gt;&#xA;&lt;h2 id=&#34;目录&#34;&gt;目录&lt;/h2&gt;&#xA;&lt;ol&gt;&#xA;&lt;li&gt;&lt;a href=&#34;#%E9%A1%B9%E7%9B%AE%E5%9F%BA%E7%A1%80%E9%85%8D%E7%BD%AE&#34;&gt;项目基础配置&lt;/a&gt;&lt;/li&gt;&#xA;&lt;li&gt;&lt;a href=&#34;#c-%E7%BC%96%E8%AF%91%E6%A0%87%E5%87%86%E8%AE%BE%E7%BD%AE&#34;&gt;C++ 编译标准设置&lt;/a&gt;&lt;/li&gt;&#xA;&lt;li&gt;&lt;a href=&#34;#%E7%BC%96%E8%AF%91%E5%99%A8%E9%80%89%E9%A1%B9%E4%B8%8E%E8%AD%A6%E5%91%8A%E9%85%8D%E7%BD%AE&#34;&gt;编译器选项与警告配置&lt;/a&gt;&lt;/li&gt;&#xA;&lt;li&gt;&lt;a href=&#34;#%E8%BE%93%E5%87%BA%E7%9B%AE%E5%BD%95%E7%BB%93%E6%9E%84%E7%AE%A1%E7%90%86&#34;&gt;输出目录结构管理&lt;/a&gt;&lt;/li&gt;&#xA;&lt;li&gt;&lt;a href=&#34;#%E7%8E%AF%E5%A2%83%E6%A3%80%E6%B5%8B%E4%B8%8E%E8%B7%AF%E5%BE%84%E9%85%8D%E7%BD%AE&#34;&gt;环境检测与路径配置&lt;/a&gt;&lt;/li&gt;&#xA;&lt;li&gt;&lt;a href=&#34;#%E7%AC%AC%E4%B8%89%E6%96%B9%E4%BE%9D%E8%B5%96%E7%AE%A1%E7%90%86&#34;&gt;第三方依赖管理&lt;/a&gt;&lt;/li&gt;&#xA;&lt;li&gt;&lt;a href=&#34;#%E7%9B%AE%E6%A0%87%E9%93%BE%E6%8E%A5%E4%B8%8E%E5%8F%AF%E8%A7%81%E6%80%A7&#34;&gt;目标链接与可见性&lt;/a&gt;&lt;/li&gt;&#xA;&lt;li&gt;&lt;a href=&#34;#%E5%AE%89%E8%A3%85%E9%85%8D%E7%BD%AE%E4%B8%8E%E9%83%A8%E7%BD%B2&#34;&gt;安装配置与部署&lt;/a&gt;&lt;/li&gt;&#xA;&lt;li&gt;&lt;a href=&#34;#%E8%87%AA%E5%AE%9A%E4%B9%89%E6%9E%84%E5%BB%BA%E7%9B%AE%E6%A0%87&#34;&gt;自定义构建目标&lt;/a&gt;&lt;/li&gt;&#xA;&lt;li&gt;&lt;a href=&#34;#%E5%AE%8C%E6%95%B4%E7%A4%BA%E4%BE%8B%E9%A1%B9%E7%9B%AE&#34;&gt;完整示例项目&lt;/a&gt;&lt;/li&gt;&#xA;&lt;/ol&gt;&#xA;&lt;hr&gt;&#xA;&lt;h2 id=&#34;项目基础配置&#34;&gt;项目基础配置&lt;/h2&gt;&#xA;&lt;h3 id=&#34;最小版本要求与项目声明&#34;&gt;最小版本要求与项目声明&lt;/h3&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-cmake&#34; data-lang=&#34;cmake&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;cmake_minimum_required(&lt;span style=&#34;color:#e6db74&#34;&gt;VERSION&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;3.14&lt;/span&gt;)&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;&lt;/span&gt;project(&lt;span style=&#34;color:#e6db74&#34;&gt;VisionDemo&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;VERSION&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;1.0.0&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;LANGUAGES&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;CXX&lt;/span&gt;)&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;&lt;strong&gt;说明：&lt;/strong&gt;&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&lt;code&gt;cmake_minimum_required&lt;/code&gt;：指定所需的最低CMake版本&lt;/li&gt;&#xA;&lt;li&gt;&lt;code&gt;project&lt;/code&gt;：定义项目名称、版本号和使用的语言&lt;/li&gt;&#xA;&lt;li&gt;&lt;code&gt;VERSION&lt;/code&gt;：设置项目版本，可通过 &lt;code&gt;${PROJECT_VERSION}&lt;/code&gt; 引用&lt;/li&gt;&#xA;&lt;li&gt;&lt;code&gt;LANGUAGES&lt;/code&gt;：明确指定使用的编程语言&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;hr&gt;&#xA;&lt;h2 id=&#34;c-编译标准设置&#34;&gt;C++ 编译标准设置&lt;/h2&gt;&#xA;&lt;h3 id=&#34;全局标准设置&#34;&gt;全局标准设置&lt;/h3&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-cmake&#34; data-lang=&#34;cmake&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;# 设置 C++17 标准&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;set(&lt;span style=&#34;color:#e6db74&#34;&gt;CMAKE_CXX_STANDARD&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;17&lt;/span&gt;)&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;&lt;/span&gt;set(&lt;span style=&#34;color:#e6db74&#34;&gt;CMAKE_CXX_STANDARD_REQUIRED&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;ON&lt;/span&gt;)&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;&lt;/span&gt;set(&lt;span style=&#34;color:#e6db74&#34;&gt;CMAKE_CXX_EXTENSIONS&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;OFF&lt;/span&gt;)&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;&lt;strong&gt;各参数含义：&lt;/strong&gt;&lt;/p&gt;&#xA;&lt;table&gt;&#xA;  &lt;thead&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;th&gt;参数&lt;/th&gt;&#xA;          &lt;th&gt;作用&lt;/th&gt;&#xA;          &lt;th&gt;说明&lt;/th&gt;&#xA;      &lt;/tr&gt;&#xA;  &lt;/thead&gt;&#xA;  &lt;tbody&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td&gt;&lt;code&gt;CMAKE_CXX_STANDARD&lt;/code&gt;&lt;/td&gt;&#xA;          &lt;td&gt;指定C++标准版本&lt;/td&gt;&#xA;          &lt;td&gt;告诉编译器使用哪个C++标准（如17、20、23）&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td&gt;&lt;code&gt;CMAKE_CXX_STANDARD_REQUIRED&lt;/code&gt;&lt;/td&gt;&#xA;          &lt;td&gt;强制要求指定标准&lt;/td&gt;&#xA;          &lt;td&gt;ON：编译器必须支持指定标准，否则报错&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td&gt;&lt;code&gt;CMAKE_CXX_EXTENSIONS&lt;/code&gt;&lt;/td&gt;&#xA;          &lt;td&gt;禁用编译器扩展&lt;/td&gt;&#xA;          &lt;td&gt;OFF：使用纯标准C++，提高跨平台兼容性&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;  &lt;/tbody&gt;&#xA;&lt;/table&gt;&#xA;&lt;p&gt;&lt;strong&gt;编译器参数映射：&lt;/strong&gt;&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;GCC/Clang: &lt;code&gt;-std=c++17&lt;/code&gt;&lt;/li&gt;&#xA;&lt;li&gt;MSVC: &lt;code&gt;/std:c++17&lt;/code&gt;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h3 id=&#34;针对特定目标的标准设置&#34;&gt;针对特定目标的标准设置&lt;/h3&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-cmake&#34; data-lang=&#34;cmake&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;set_target_properties(&lt;span style=&#34;color:#e6db74&#34;&gt;VisionDemo&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;PROPERTIES&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#e6db74&#34;&gt;CXX_STANDARD&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;17&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#e6db74&#34;&gt;CXX_STANDARD_REQUIRED&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;ON&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#e6db74&#34;&gt;CXX_EXTENSIONS&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;OFF&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;)&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;&lt;strong&gt;使用场景：&lt;/strong&gt;&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;项目中不同目标需要不同的C++标准&lt;/li&gt;&#xA;&lt;li&gt;明确指定某个目标的编译标准&lt;/li&gt;&#xA;&lt;li&gt;覆盖全局设置&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;hr&gt;&#xA;&lt;h2 id=&#34;编译器选项与警告配置&#34;&gt;编译器选项与警告配置&lt;/h2&gt;&#xA;&lt;h3 id=&#34;全局编译选项&#34;&gt;全局编译选项&lt;/h3&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-cmake&#34; data-lang=&#34;cmake&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;if(&lt;span style=&#34;color:#e6db74&#34;&gt;CMAKE_CXX_COMPILER_ID&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;MATCHES&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;GNU|Clang&amp;#34;&lt;/span&gt;)&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;&lt;/span&gt;    add_compile_options(&lt;span style=&#34;color:#e6db74&#34;&gt;-Wall&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;-Wextra&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;-Wpedantic&lt;/span&gt;)&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;&lt;/span&gt;endif()&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;目标特定编译选项推荐&#34;&gt;目标特定编译选项（推荐）&lt;/h3&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-cmake&#34; data-lang=&#34;cmake&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;if(&lt;span style=&#34;color:#e6db74&#34;&gt;CMAKE_CXX_COMPILER_ID&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;MATCHES&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;GNU|Clang&amp;#34;&lt;/span&gt;)&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;&lt;/span&gt;    target_compile_options(&lt;span style=&#34;color:#e6db74&#34;&gt;VisionDemo&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;PRIVATE&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#e6db74&#34;&gt;-Wall&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#e6db74&#34;&gt;-Wextra&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#e6db74&#34;&gt;-Wpedantic&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#e6db74&#34;&gt;-Wno-unused-parameter&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#e6db74&#34;&gt;-Wno-unused-variable&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    )&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;&lt;/span&gt;endif()&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;&lt;strong&gt;编译选项说明：&lt;/strong&gt;&lt;/p&gt;</description>
    </item>
    <item>
      <title>cmake</title>
      <link>/posts/cmake/</link>
      <pubDate>Wed, 04 Jun 2025 00:00:00 +0800</pubDate>
      <guid>/posts/cmake/</guid>
      <description>&lt;h2 id=&#34;常用编译指令&#34;&gt;常用编译指令&lt;/h2&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;cmake -S . -B build&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;cmake --build build&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;-DCMAKE_BUILD_TYPE&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;Debug&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;-DCMAKE_MAKE_PROGRAM&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;ninja&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;-DCMAKE_BUILD_TYPE&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;Debug&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;-G Ninja&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;-S .&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;-B build&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;--build&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;参考资料&#34;&gt;参考资料&lt;/h2&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&lt;a href=&#34;https://cmake.org/cmake/help/latest/index.html&#34;&gt;Lastest Release Cmake Reference Documentation&lt;/a&gt;&lt;/li&gt;&#xA;&lt;li&gt;&lt;a href=&#34;https://cmake.org/documentation/&#34;&gt;https://cmake.org/documentation/&lt;/a&gt;&lt;/li&gt;&#xA;&lt;li&gt;&lt;a href=&#34;https://modern-cmake-cn.github.io/Modern-CMake-zh_CN/&#34;&gt;Modern CMake 简体中文版&lt;/a&gt;&lt;/li&gt;&#xA;&lt;li&gt;&lt;a href=&#34;https://cmake.readthedocs.io/en/latest/&#34;&gt;cmake 实践&lt;/a&gt;&lt;/li&gt;&#xA;&lt;li&gt;[CMake-Summary-of-documentation-chinese-@&lt;a href=&#34;https://github.com/fenneishi&#34;&gt;fenneishi&lt;/a&gt;](&lt;a href=&#34;https://github.com/fenneishi/CMake-Summary-of-documentation-chinese-&#34;&gt;https://github.com/fenneishi/CMake-Summary-of-documentation-chinese-&lt;/a&gt;)&lt;/li&gt;&#xA;&lt;/ul&gt;</description>
    </item>
    <item>
      <title>CMake：include_directories 与 target_include_directories 使用指南</title>
      <link>/posts/cmakeinclude_directories-%E4%B8%8E-target_include_directories-%E4%BD%BF%E7%94%A8%E6%8C%87%E5%8D%97/</link>
      <pubDate>Tue, 03 Jun 2025 00:00:00 +0800</pubDate>
      <guid>/posts/cmakeinclude_directories-%E4%B8%8E-target_include_directories-%E4%BD%BF%E7%94%A8%E6%8C%87%E5%8D%97/</guid>
      <description>&lt;h1 id=&#34;cmakeinclude_directories-与-target_include_directories-使用指南&#34;&gt;CMake：&lt;code&gt;include_directories&lt;/code&gt; 与 &lt;code&gt;target_include_directories&lt;/code&gt; 使用指南&lt;/h1&gt;&#xA;&lt;h2 id=&#34;概述&#34;&gt;概述&lt;/h2&gt;&#xA;&lt;p&gt;在CMake中，&lt;code&gt;include_directories()&lt;/code&gt;和&lt;code&gt;target_include_directories()&lt;/code&gt;都用于指定头文件搜索路径，但它们在作用范围和使用方法上有显著区别。现代CMake项目建议优先使用&lt;code&gt;target_include_directories()&lt;/code&gt;。&lt;/p&gt;&#xA;&lt;hr&gt;&#xA;&lt;h2 id=&#34;命令详解&#34;&gt;命令详解&lt;/h2&gt;&#xA;&lt;h3 id=&#34;1-include_directories-全局作用域&#34;&gt;1. &lt;code&gt;include_directories()&lt;/code&gt; (全局作用域)&lt;/h3&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;​&lt;strong&gt;作用范围&lt;/strong&gt;​：影响当前目录及之后定义的所有目标&lt;/p&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;​&lt;strong&gt;工作方式&lt;/strong&gt;​：为所有目标添加公共包含路径&lt;/p&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;​&lt;strong&gt;使用场景&lt;/strong&gt;​：简单项目或旧版CMake兼容&lt;/p&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;​&lt;strong&gt;语法&lt;/strong&gt;​：&lt;/p&gt;&#xA;&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;include_directories([AFTER|BEFORE] [SYSTEM] dir1 [dir2 ...])&#xA;&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h4 id=&#34;使用示例&#34;&gt;使用示例：&lt;/h4&gt;&#xA;&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;include_directories(include third_party/lib)&#xA;&#xA;add_executable(app1 src/app1.cpp)&#xA;add_executable(app2 src/app2.cpp)&#xA;# app1和app2都会自动包含include/和third_party/lib/路径&#xA;&lt;/code&gt;&lt;/pre&gt;&lt;hr&gt;&#xA;&lt;h3 id=&#34;2-target_include_directories-目标特定作用域&#34;&gt;2. &lt;code&gt;target_include_directories()&lt;/code&gt; (目标特定作用域)&lt;/h3&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;​&lt;strong&gt;作用范围&lt;/strong&gt;​：仅影响指定目标&lt;/p&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;​&lt;strong&gt;工作方式&lt;/strong&gt;​：为目标添加私有或公开包含路径&lt;/p&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;​&lt;strong&gt;使用场景&lt;/strong&gt;​：现代CMake项目推荐方式（CMake 3.0+）&lt;/p&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;​&lt;strong&gt;语法&lt;/strong&gt;​：&lt;/p&gt;&#xA;&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;target_include_directories(&amp;lt;target&amp;gt; [SYSTEM] [BEFORE]&#xA;  &amp;lt;INTERFACE|PUBLIC|PRIVATE&amp;gt; [item1...]&#xA;  [&amp;lt;INTERFACE|PUBLIC|PRIVATE&amp;gt; [item2...] ...])&#xA;&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h4 id=&#34;关键字说明&#34;&gt;关键字说明：&lt;/h4&gt;&#xA;&lt;table&gt;&#xA;  &lt;thead&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;th&gt;关键字&lt;/th&gt;&#xA;          &lt;th&gt;描述&lt;/th&gt;&#xA;      &lt;/tr&gt;&#xA;  &lt;/thead&gt;&#xA;  &lt;tbody&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td&gt;&lt;code&gt;PRIVATE&lt;/code&gt;&lt;/td&gt;&#xA;          &lt;td&gt;仅当前目标使用（不向依赖者传递）&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td&gt;&lt;code&gt;INTERFACE&lt;/code&gt;&lt;/td&gt;&#xA;          &lt;td&gt;仅依赖此目标的其他目标使用（当前目标不使用）&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td&gt;&lt;code&gt;PUBLIC&lt;/code&gt;&lt;/td&gt;&#xA;          &lt;td&gt;当前目标和依赖者都使用（= PRIVATE + INTERFACE）&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;  &lt;/tbody&gt;&#xA;&lt;/table&gt;&#xA;&lt;h4 id=&#34;使用示例-1&#34;&gt;使用示例：&lt;/h4&gt;&#xA;&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;# 共享库定义&#xA;add_library(math_lib STATIC src/math.cpp)&#xA;target_include_directories(math_lib&#xA;    PRIVATE src          # 仅编译库时使用&#xA;    INTERFACE include    # 库使用者的包含路径&#xA;)&#xA;&#xA;# 可执行文件定义&#xA;add_executable(calculator src/main.cpp)&#xA;target_include_directories(calculator &#xA;    PRIVATE app_include  # 仅本目标使用的路径&#xA;)&#xA;target_link_libraries(calculator PRIVATE math_lib)&#xA;&#xA;# calculator将自动获得math_lib的include/路径&#xA;&lt;/code&gt;&lt;/pre&gt;&lt;hr&gt;&#xA;&lt;h2 id=&#34;核心区别对比&#34;&gt;核心区别对比&lt;/h2&gt;&#xA;&lt;table&gt;&#xA;  &lt;thead&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;th&gt;​&lt;strong&gt;特性&lt;/strong&gt;​&lt;/th&gt;&#xA;          &lt;th&gt;&lt;code&gt;include_directories()&lt;/code&gt;&lt;/th&gt;&#xA;          &lt;th&gt;&lt;code&gt;target_include_directories()&lt;/code&gt;&lt;/th&gt;&#xA;      &lt;/tr&gt;&#xA;  &lt;/thead&gt;&#xA;  &lt;tbody&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td&gt;​&lt;strong&gt;作用范围&lt;/strong&gt;​&lt;/td&gt;&#xA;          &lt;td&gt;全局（所有目标）&lt;/td&gt;&#xA;          &lt;td&gt;目标特定&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td&gt;​&lt;strong&gt;依赖传播&lt;/strong&gt;​&lt;/td&gt;&#xA;          &lt;td&gt;❌ 不支持&lt;/td&gt;&#xA;          &lt;td&gt;✅ 通过&lt;code&gt;PUBLIC&lt;/code&gt;/&lt;code&gt;INTERFACE&lt;/code&gt;支持&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td&gt;​&lt;strong&gt;现代CMake推荐度&lt;/strong&gt;​&lt;/td&gt;&#xA;          &lt;td&gt;❌ 不推荐&lt;/td&gt;&#xA;          &lt;td&gt;✅ 强烈推荐&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td&gt;​&lt;strong&gt;代码隔离性&lt;/strong&gt;​&lt;/td&gt;&#xA;          &lt;td&gt;❌ 差（路径污染风险）&lt;/td&gt;&#xA;          &lt;td&gt;✅ 优秀（路径隔离）&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td&gt;​&lt;strong&gt;典型用法时机&lt;/strong&gt;​&lt;/td&gt;&#xA;          &lt;td&gt;在目标定义前调用&lt;/td&gt;&#xA;          &lt;td&gt;在目标定义后调用&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td&gt;​&lt;strong&gt;使用依赖关系&lt;/strong&gt;​&lt;/td&gt;&#xA;          &lt;td&gt;无关联&lt;/td&gt;&#xA;          &lt;td&gt;与&lt;code&gt;target_link_libraries()&lt;/code&gt;协同使用&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;  &lt;/tbody&gt;&#xA;&lt;/table&gt;&#xA;&lt;hr&gt;&#xA;&lt;h2 id=&#34;最佳实践指南&#34;&gt;最佳实践指南&lt;/h2&gt;&#xA;&lt;ol&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;​&lt;strong&gt;优先使用目标特定作用域&lt;/strong&gt;​&lt;/p&gt;</description>
    </item>
    <item>
      <title>CMake条件编译：原理、工程实践与变量作用域管理</title>
      <link>/posts/cmake%E6%9D%A1%E4%BB%B6%E7%BC%96%E8%AF%91%E5%8E%9F%E7%90%86%E5%B7%A5%E7%A8%8B%E5%AE%9E%E8%B7%B5%E4%B8%8E%E5%8F%98%E9%87%8F%E4%BD%9C%E7%94%A8%E5%9F%9F%E7%AE%A1%E7%90%86/</link>
      <pubDate>Tue, 03 Jun 2025 00:00:00 +0800</pubDate>
      <guid>/posts/cmake%E6%9D%A1%E4%BB%B6%E7%BC%96%E8%AF%91%E5%8E%9F%E7%90%86%E5%B7%A5%E7%A8%8B%E5%AE%9E%E8%B7%B5%E4%B8%8E%E5%8F%98%E9%87%8F%E4%BD%9C%E7%94%A8%E5%9F%9F%E7%AE%A1%E7%90%86/</guid>
      <description>&lt;p&gt;&lt;strong&gt;摘要&lt;/strong&gt;&lt;br&gt;&#xA;条件编译（Conditional Compilation）是 CMake 构建系统实现跨平台、多配置、多功能模块化构建的重要机制。本文以学术论文的严谨风格，系统剖析 CMake 条件编译的原理，结合实际工程案例探讨其在大型项目中的应用，并深入分析变量作用域对条件逻辑的影响。文中还专门介绍 &lt;code&gt;option(USE_FOO &amp;quot;Enable FOO support&amp;quot; OFF)&lt;/code&gt; 语句的行为及其在条件判断中的应用与区别。通过对官方文档与经典社区资料的引用，力求为 CMake 工程师提供全面、可复用的指导与最佳实践。&lt;/p&gt;&#xA;&lt;hr&gt;&#xA;&lt;h2 id=&#34;关键词&#34;&gt;关键词&lt;/h2&gt;&#xA;&lt;p&gt;CMake；条件编译；if；生成器表达式；变量作用域；缓存变量；目录作用域；函数作用域；&lt;code&gt;option()&lt;/code&gt;&lt;/p&gt;&#xA;&lt;hr&gt;&#xA;&lt;h2 id=&#34;1-引言&#34;&gt;1. 引言&lt;/h2&gt;&#xA;&lt;p&gt;近年来，随着跨平台 C/C++ 项目规模的不断扩张，开发者需要针对操作系统、编译器版本、构建类型（如 Debug/Release）等多种维度，灵活地控制构建过程。CMake 作为一种流行的元构建（meta-build）工具，内置了强大的条件编译能力，使得同一套 CMake 脚本能够自动适配多种环境与需求。本文旨在系统阐述 CMake 条件编译的核心原理，包括 &lt;code&gt;if()&lt;/code&gt; 语句与生成器表达式（Generator Expressions）的区别与协同；并结合工程实践介绍常见模式。此外，针对 CMake 的动态作用域模型，深入讨论目录作用域（Directory Scope）、函数作用域（Function Scope）与缓存作用域（Cache Scope）对条件逻辑的影响，帮助读者避免常见错误、提升脚本可维护性。最后，以 &lt;code&gt;option(USE_FOO &amp;quot;Enable FOO support&amp;quot; OFF)&lt;/code&gt; 为例，演示变量在条件判断中的常见误区与正确用法。&lt;/p&gt;&#xA;&lt;hr&gt;&#xA;&lt;h2 id=&#34;2-cmake-条件编译原理&#34;&gt;2. CMake 条件编译原理&lt;/h2&gt;&#xA;&lt;h3 id=&#34;21-if-条件判断语法与行为&#34;&gt;2.1 &lt;code&gt;if()&lt;/code&gt; 条件判断语法与行为&lt;/h3&gt;&#xA;&lt;p&gt;CMake 提供了 &lt;code&gt;if()&lt;/code&gt;、&lt;code&gt;elseif()&lt;/code&gt;、&lt;code&gt;else()&lt;/code&gt;、&lt;code&gt;endif()&lt;/code&gt; 等控制结构，用来根据条件选择性地执行脚本代码。其基本语法为：&lt;/p&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-cmake&#34; data-lang=&#34;cmake&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;if(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;lt;condition&amp;gt;&lt;/span&gt;)&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;&lt;/span&gt;  &lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;&amp;lt;commands&amp;gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;&lt;/span&gt;elseif(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;lt;condition&amp;gt;&lt;/span&gt;)&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;&lt;/span&gt;  &lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;&amp;lt;commands&amp;gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;&lt;/span&gt;else()&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;&lt;/span&gt;  &lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;&amp;lt;commands&amp;gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;&lt;/span&gt;endif()&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;其中 &lt;code&gt;&amp;lt;condition&amp;gt;&lt;/code&gt; 可为布尔常量、数值或字符串比较、变量存在性判断、逻辑组合等多种形式。根据官方文档，以下情形会被视为“假”（False）：&lt;code&gt;0&lt;/code&gt;/&lt;code&gt;&amp;quot;0&amp;quot;&lt;/code&gt;、&lt;code&gt;OFF&lt;/code&gt;/&lt;code&gt;&amp;quot;OFF&amp;quot;&lt;/code&gt;、&lt;code&gt;NO&lt;/code&gt;/&lt;code&gt;&amp;quot;NO&amp;quot;&lt;/code&gt;、&lt;code&gt;FALSE&lt;/code&gt;/&lt;code&gt;&amp;quot;FALSE&amp;quot;&lt;/code&gt;、&lt;code&gt;NOTFOUND&lt;/code&gt;、空字符串，或未定义变量；而 &lt;code&gt;1&lt;/code&gt;/&lt;code&gt;&amp;quot;1&amp;quot;&lt;/code&gt;、&lt;code&gt;ON&lt;/code&gt;/&lt;code&gt;&amp;quot;ON&amp;quot;&lt;/code&gt;、&lt;code&gt;YES&lt;/code&gt;/&lt;code&gt;&amp;quot;YES&amp;quot;&lt;/code&gt;、&lt;code&gt;TRUE&lt;/code&gt;/&lt;code&gt;&amp;quot;TRUE&amp;quot;&lt;/code&gt;、&lt;code&gt;Y&lt;/code&gt;、非零数字等被视为“真”（True）(&lt;a href=&#34;https://cmake.org/cmake/help/v3.1/command/if.html?utm_source=chatgpt.com&#34; title=&#34;if — CMake 3.1.3 Documentation&#34;&gt;cmake.org&lt;/a&gt;, &lt;a href=&#34;https://cmake.org/cmake/help/latest/command/if.html?utm_source=chatgpt.com&#34; title=&#34;if — CMake 4.0.2 Documentation&#34;&gt;cmake.org&lt;/a&gt;)。&lt;/p&gt;</description>
    </item>
    <item>
      <title>📘 Linux 系统源码编译和安装 CMake</title>
      <link>/posts/linux-%E7%B3%BB%E7%BB%9F%E6%BA%90%E7%A0%81%E7%BC%96%E8%AF%91%E5%92%8C%E5%AE%89%E8%A3%85-cmake/</link>
      <pubDate>Thu, 01 Jan 1970 00:00:00 +0800</pubDate>
      <guid>/posts/linux-%E7%B3%BB%E7%BB%9F%E6%BA%90%E7%A0%81%E7%BC%96%E8%AF%91%E5%92%8C%E5%AE%89%E8%A3%85-cmake/</guid>
      <description>&lt;h1 id=&#34;在-linux-上编译和安装-cmake&#34;&gt;在 Linux 上编译和安装 CMake&lt;/h1&gt;&#xA;&lt;p&gt;CMake 是一个跨平台的开源构建系统生成器，广泛用于软件开发项目。本文将介绍如何在 Linux 系统上从源代码编译并安装 CMake，确保你能够使用最新版本的功能。&lt;/p&gt;&#xA;&lt;h2 id=&#34;准备工作&#34;&gt;准备工作&lt;/h2&gt;&#xA;&lt;p&gt;在开始之前，确保你的系统已经安装了必要的开发工具和库。对于基于 Debian 的系统（如 Ubuntu），可以运行以下命令来安装所需的依赖项：&lt;/p&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;sudo apt-get update&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;sudo apt-get install build-essential libssl-dev&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;ul&gt;&#xA;&lt;li&gt;build-essential：包含编译 C/C++ 程序所需的工具，如 gcc、g++ 和 make。&lt;/li&gt;&#xA;&lt;li&gt;libssl-dev：提供 OpenSSL 的开发库，用于加密功能。&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h2 id=&#34;克隆-cmake-源代码&#34;&gt;克隆 CMake 源代码&lt;/h2&gt;&#xA;&lt;p&gt;从 CMake 的官方 GitHub 仓库克隆指定版本的源代码。这里以 v4.0.3 版本为例：&lt;/p&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;git clone --branch v4.0.3 --single-branch https://github.com/Kitware/CMake.git&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;cd CMake&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;ul&gt;&#xA;&lt;li&gt;&lt;code&gt;--branch v4.0.3&lt;/code&gt;：指定克隆的分支为 v4.0.3，这是你想要安装的版本。&lt;/li&gt;&#xA;&lt;li&gt;&lt;code&gt;--single-branch&lt;/code&gt;：只克隆指定的分支，减少克隆的数据量，节省时间和磁盘空间。&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h2 id=&#34;配置和编译-cmake&#34;&gt;配置和编译 CMake&lt;/h2&gt;&#xA;&lt;p&gt;在 CMake 的源代码目录中，运行以下命令进行配置和编译：&lt;/p&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;./bootstrap &lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&amp;amp;&lt;/span&gt; make -j8&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;ul&gt;&#xA;&lt;li&gt;&lt;code&gt;./bootstrap&lt;/code&gt;：运行 CMake 的配置脚本，它会检查系统环境并生成适合当前系统的构建文件。&lt;/li&gt;&#xA;&lt;li&gt;&lt;code&gt;make -j8&lt;/code&gt;：使用 make 命令进行编译，-j8 参数表示同时使用 8 个线程进行编译，可以加快编译速度（根据你的 CPU 核心数调整）。&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;p&gt;如果系统中没有安装 OpenSSL，或者你不想使用 OpenSSL，可以在配置时添加 &lt;code&gt;-DCMAKE_USE_OPENSSL=OFF&lt;/code&gt; 参数：&lt;/p&gt;</description>
    </item>
    <item>
      <title>windows vcpkg boost 开发环境</title>
      <link>/posts/windows_vcpkg_boost/</link>
      <pubDate>Thu, 01 Jan 1970 00:00:00 +0800</pubDate>
      <guid>/posts/windows_vcpkg_boost/</guid>
      <description>&lt;h2 id=&#34;前置条件&#34;&gt;前置条件&lt;/h2&gt;&#xA;&lt;ol&gt;&#xA;&lt;li&gt;install vcpkg&lt;/li&gt;&#xA;&lt;li&gt;vcpkg install boost-system:x64-windows boost-filesystem:x64-windows&lt;/li&gt;&#xA;&lt;/ol&gt;&#xA;&lt;h2 id=&#34;cmake-boost-配置&#34;&gt;cmake boost 配置&lt;/h2&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-makefile&#34; data-lang=&#34;makefile&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;if&lt;/span&gt; &lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;(WIN32)&lt;/span&gt;  &#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;# 查找 Boost 库  &#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;find_package(Boost&lt;/span&gt; &lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;COMPONENTS&lt;/span&gt; &lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;filesystem&lt;/span&gt; &lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;system&lt;/span&gt; &lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;REQUIRED)&lt;/span&gt;  &#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;if&lt;/span&gt; &lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;(Boost_FOUND)&lt;/span&gt;  &#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;include_directories(${Boost_INCLUDE_DIRS})&lt;/span&gt;  &#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;link_directories(${Boost_LIBRARY_DIRS})&lt;/span&gt;  &#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;endif&lt;/span&gt; &lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;()&lt;/span&gt;  &#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;endif&lt;/span&gt; &lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;(WIN32)&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;编译报错&lt;/p&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;====================[&lt;/span&gt; Build | radar_data_local_storage | Release-Visual Studio &lt;span style=&#34;color:#f92672&#34;&gt;]====&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;......&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;CMake Error at C:/Program Files/JetBrains/CLion 2023.1.4/bin/cmake/win/x64/share/cmake-3.25/Modules/FindPackageHandleStandardArgs.cmake:230 &lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;message&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt;:&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  Could NOT find Boost &lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;missing: Boost_INCLUDE_DIR filesystem system&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;Call Stack &lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;most recent call first&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt;:&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  C:/Program Files/JetBrains/CLion 2023.1.4/bin/cmake/win/x64/share/cmake-3.25/Modules/FindPackageHandleStandardArgs.cmake:600 &lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;_FPHSA_FAILURE_MESSAGE&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  C:/Program Files/JetBrains/CLion 2023.1.4/bin/cmake/win/x64/share/cmake-3.25/Modules/FindBoost.cmake:2377 &lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;find_package_handle_standard_args&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  C:/Users/luyang/.clion-vcpkg/vcpkg/scripts/buildsystems/vcpkg.cmake:855 &lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;_find_package&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  TestDemo/CMakeLists.txt:8 &lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;find_package&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;CMake Configure step failed.  Build files cannot be regenerated correctly.&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;-- Configuring incomplete, errors occurred!&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;See also &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;C:/Users/luyang/Documents/TestDemo/cmake-build-release-visual-studio/CMakeFiles/CMakeOutput.log&amp;#34;&lt;/span&gt;.&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;增加 ：&lt;code&gt;set(Boost_INCLUDE_DIR ${_VCPKG_INSTALLED_DIR}/x64-windows/include)&lt;/code&gt;&lt;/p&gt;</description>
    </item>
  </channel>
</rss>
