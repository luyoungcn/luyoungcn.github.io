<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Cmake on LuyangのBlog</title>
    <link>/tags/cmake/</link>
    <description>Recent content in Cmake on LuyangのBlog</description>
    <generator>Hugo</generator>
    <language>en-US</language>
    <lastBuildDate>Tue, 03 Jun 2025 00:00:00 +0800</lastBuildDate>
    <atom:link href="/tags/cmake/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>CMake条件编译：原理、工程实践与变量作用域管理</title>
      <link>/posts/cmake%E6%9D%A1%E4%BB%B6%E7%BC%96%E8%AF%91%E5%8E%9F%E7%90%86%E5%B7%A5%E7%A8%8B%E5%AE%9E%E8%B7%B5%E4%B8%8E%E5%8F%98%E9%87%8F%E4%BD%9C%E7%94%A8%E5%9F%9F%E7%AE%A1%E7%90%86/</link>
      <pubDate>Tue, 03 Jun 2025 00:00:00 +0800</pubDate>
      <guid>/posts/cmake%E6%9D%A1%E4%BB%B6%E7%BC%96%E8%AF%91%E5%8E%9F%E7%90%86%E5%B7%A5%E7%A8%8B%E5%AE%9E%E8%B7%B5%E4%B8%8E%E5%8F%98%E9%87%8F%E4%BD%9C%E7%94%A8%E5%9F%9F%E7%AE%A1%E7%90%86/</guid>
      <description>&lt;p&gt;&lt;strong&gt;摘要&lt;/strong&gt;&lt;br&gt;&#xA;条件编译（Conditional Compilation）是 CMake 构建系统实现跨平台、多配置、多功能模块化构建的重要机制。本文以学术论文的严谨风格，系统剖析 CMake 条件编译的原理，结合实际工程案例探讨其在大型项目中的应用，并深入分析变量作用域对条件逻辑的影响。文中还专门介绍 &lt;code&gt;option(USE_FOO &amp;quot;Enable FOO support&amp;quot; OFF)&lt;/code&gt; 语句的行为及其在条件判断中的应用与区别。通过对官方文档与经典社区资料的引用，力求为 CMake 工程师提供全面、可复用的指导与最佳实践。&lt;/p&gt;&#xA;&lt;hr&gt;&#xA;&lt;h2 id=&#34;关键词&#34;&gt;关键词&lt;/h2&gt;&#xA;&lt;p&gt;CMake；条件编译；if；生成器表达式；变量作用域；缓存变量；目录作用域；函数作用域；&lt;code&gt;option()&lt;/code&gt;&lt;/p&gt;&#xA;&lt;hr&gt;&#xA;&lt;h2 id=&#34;1-引言&#34;&gt;1. 引言&lt;/h2&gt;&#xA;&lt;p&gt;近年来，随着跨平台 C/C++ 项目规模的不断扩张，开发者需要针对操作系统、编译器版本、构建类型（如 Debug/Release）等多种维度，灵活地控制构建过程。CMake 作为一种流行的元构建（meta-build）工具，内置了强大的条件编译能力，使得同一套 CMake 脚本能够自动适配多种环境与需求。本文旨在系统阐述 CMake 条件编译的核心原理，包括 &lt;code&gt;if()&lt;/code&gt; 语句与生成器表达式（Generator Expressions）的区别与协同；并结合工程实践介绍常见模式。此外，针对 CMake 的动态作用域模型，深入讨论目录作用域（Directory Scope）、函数作用域（Function Scope）与缓存作用域（Cache Scope）对条件逻辑的影响，帮助读者避免常见错误、提升脚本可维护性。最后，以 &lt;code&gt;option(USE_FOO &amp;quot;Enable FOO support&amp;quot; OFF)&lt;/code&gt; 为例，演示变量在条件判断中的常见误区与正确用法。&lt;/p&gt;&#xA;&lt;hr&gt;&#xA;&lt;h2 id=&#34;2-cmake-条件编译原理&#34;&gt;2. CMake 条件编译原理&lt;/h2&gt;&#xA;&lt;h3 id=&#34;21-if-条件判断语法与行为&#34;&gt;2.1 &lt;code&gt;if()&lt;/code&gt; 条件判断语法与行为&lt;/h3&gt;&#xA;&lt;p&gt;CMake 提供了 &lt;code&gt;if()&lt;/code&gt;、&lt;code&gt;elseif()&lt;/code&gt;、&lt;code&gt;else()&lt;/code&gt;、&lt;code&gt;endif()&lt;/code&gt; 等控制结构，用来根据条件选择性地执行脚本代码。其基本语法为：&lt;/p&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-cmake&#34; data-lang=&#34;cmake&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;if(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;lt;condition&amp;gt;&lt;/span&gt;)&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;&lt;/span&gt;  &lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;&amp;lt;commands&amp;gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;&lt;/span&gt;elseif(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;lt;condition&amp;gt;&lt;/span&gt;)&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;&lt;/span&gt;  &lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;&amp;lt;commands&amp;gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;&lt;/span&gt;else()&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;&lt;/span&gt;  &lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;&amp;lt;commands&amp;gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;&lt;/span&gt;endif()&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;其中 &lt;code&gt;&amp;lt;condition&amp;gt;&lt;/code&gt; 可为布尔常量、数值或字符串比较、变量存在性判断、逻辑组合等多种形式。根据官方文档，以下情形会被视为“假”（False）：&lt;code&gt;0&lt;/code&gt;/&lt;code&gt;&amp;quot;0&amp;quot;&lt;/code&gt;、&lt;code&gt;OFF&lt;/code&gt;/&lt;code&gt;&amp;quot;OFF&amp;quot;&lt;/code&gt;、&lt;code&gt;NO&lt;/code&gt;/&lt;code&gt;&amp;quot;NO&amp;quot;&lt;/code&gt;、&lt;code&gt;FALSE&lt;/code&gt;/&lt;code&gt;&amp;quot;FALSE&amp;quot;&lt;/code&gt;、&lt;code&gt;NOTFOUND&lt;/code&gt;、空字符串，或未定义变量；而 &lt;code&gt;1&lt;/code&gt;/&lt;code&gt;&amp;quot;1&amp;quot;&lt;/code&gt;、&lt;code&gt;ON&lt;/code&gt;/&lt;code&gt;&amp;quot;ON&amp;quot;&lt;/code&gt;、&lt;code&gt;YES&lt;/code&gt;/&lt;code&gt;&amp;quot;YES&amp;quot;&lt;/code&gt;、&lt;code&gt;TRUE&lt;/code&gt;/&lt;code&gt;&amp;quot;TRUE&amp;quot;&lt;/code&gt;、&lt;code&gt;Y&lt;/code&gt;、非零数字等被视为“真”（True）(&lt;a href=&#34;https://cmake.org/cmake/help/v3.1/command/if.html?utm_source=chatgpt.com&#34; title=&#34;if — CMake 3.1.3 Documentation&#34;&gt;cmake.org&lt;/a&gt;, &lt;a href=&#34;https://cmake.org/cmake/help/latest/command/if.html?utm_source=chatgpt.com&#34; title=&#34;if — CMake 4.0.2 Documentation&#34;&gt;cmake.org&lt;/a&gt;)。&lt;/p&gt;</description>
    </item>
    <item>
      <title>cmake</title>
      <link>/posts/cmake/</link>
      <pubDate>Thu, 01 Jan 1970 00:00:00 +0800</pubDate>
      <guid>/posts/cmake/</guid>
      <description>&lt;h2 id=&#34;子目录代码中如何关联-cmake-宏定义&#34;&gt;子目录代码中如何关联 cmake 宏定义&lt;/h2&gt;&#xA;&lt;p&gt;CMakeLists.txt 增加如下内容：&lt;/p&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-cmake&#34; data-lang=&#34;cmake&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;OPTION(&lt;span style=&#34;color:#e6db74&#34;&gt;MOCK_DATA&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Hello World&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;OFF&lt;/span&gt;)&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;&lt;/span&gt;if (&lt;span style=&#34;color:#e6db74&#34;&gt;MOCK_DATA&lt;/span&gt;)&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;&lt;/span&gt;    add_definitions(&lt;span style=&#34;color:#e6db74&#34;&gt;-DMOCK_DATA_MICRO&lt;/span&gt;)&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;&lt;/span&gt;endif()&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;同理子目录道理一样，通过判断 cmake 变量，来决定是否定义源码中的宏定义。&lt;/p&gt;&#xA;&lt;p&gt;此时在 cpp 源代码中可以通过如下形式使用宏定义：&lt;code&gt;MOCK_DATA_MICRO&lt;/code&gt;&lt;/p&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-c++&#34; data-lang=&#34;c++&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;#ifdef MOCK_DATA_MICRO&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;&#x9;hello_world();&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;#endif&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;如果想使能 &lt;code&gt;MOCK_DATA_MICRO&lt;/code&gt; 宏定义则需要在 cmake 编译是指定参数:&lt;/p&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;cmake -DMOCK_DATA&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;ON ../; make -j8&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;cmake-中-ifnot-xxx-和-ifnot-defined-xxx-的区别&#34;&gt;cmake 中 if(NOT XXX) 和 if(NOT DEFINED XXX) 的区别&lt;/h2&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-cmake&#34; data-lang=&#34;cmake&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;OPTION(&lt;span style=&#34;color:#e6db74&#34;&gt;MOCK_DATA&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Hello World&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;OFF&lt;/span&gt;)&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;&lt;/span&gt;if (&lt;span style=&#34;color:#e6db74&#34;&gt;MOCK_DATA&lt;/span&gt;)&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;&lt;/span&gt;    add_definitions(&lt;span style=&#34;color:#e6db74&#34;&gt;-DMOCK_DATA_MICRO&lt;/span&gt;)&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;&lt;/span&gt;endif()&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;&lt;/span&gt;if(&lt;span style=&#34;color:#e6db74&#34;&gt;NOT&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;DEFINED&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;MOCK_DATA&lt;/span&gt;)&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;&lt;/span&gt;&#x9;message(&lt;span style=&#34;color:#e6db74&#34;&gt;STATUS&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;MOCK_DATA ---&amp;#34;&lt;/span&gt;)&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;else&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;&lt;/span&gt;&#x9;message(&lt;span style=&#34;color:#e6db74&#34;&gt;STATUS&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;MOCK_DATA +++&amp;#34;&lt;/span&gt;)&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;endif&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;尽管我编译时 cmake 命令行没有指定 -DMOCK_DATA=ON 选项，仍然打印的是 &lt;code&gt;MOCK_DATA +++&lt;/code&gt;&lt;/p&gt;&#xA;&lt;p&gt;总结：虽然命令行没有指定对应选项，但是 CMakeLists.txt 文件中声明了 &lt;code&gt;OPTION(MOCK_DATA &amp;quot;Hello World&amp;quot; OFF)&lt;/code&gt; 则 MOCK_DATA 就是 DEFINED 只不过值为 OFF。&lt;/p&gt;</description>
    </item>
    <item>
      <title>windows vcpkg boost 开发环境</title>
      <link>/posts/windows_vcpkg_boost/</link>
      <pubDate>Thu, 01 Jan 1970 00:00:00 +0800</pubDate>
      <guid>/posts/windows_vcpkg_boost/</guid>
      <description>&lt;h2 id=&#34;前置条件&#34;&gt;前置条件&lt;/h2&gt;&#xA;&lt;ol&gt;&#xA;&lt;li&gt;install vcpkg&lt;/li&gt;&#xA;&lt;li&gt;vcpkg install boost-system:x64-windows boost-filesystem:x64-windows&lt;/li&gt;&#xA;&lt;/ol&gt;&#xA;&lt;h2 id=&#34;cmake-boost-配置&#34;&gt;cmake boost 配置&lt;/h2&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-makefile&#34; data-lang=&#34;makefile&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;if&lt;/span&gt; &lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;(WIN32)&lt;/span&gt;  &#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;# 查找 Boost 库  &#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;find_package(Boost&lt;/span&gt; &lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;COMPONENTS&lt;/span&gt; &lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;filesystem&lt;/span&gt; &lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;system&lt;/span&gt; &lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;REQUIRED)&lt;/span&gt;  &#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;if&lt;/span&gt; &lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;(Boost_FOUND)&lt;/span&gt;  &#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;include_directories(${Boost_INCLUDE_DIRS})&lt;/span&gt;  &#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;link_directories(${Boost_LIBRARY_DIRS})&lt;/span&gt;  &#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;endif&lt;/span&gt; &lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;()&lt;/span&gt;  &#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;endif&lt;/span&gt; &lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;(WIN32)&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;编译报错&lt;/p&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;====================[&lt;/span&gt; Build | radar_data_local_storage | Release-Visual Studio &lt;span style=&#34;color:#f92672&#34;&gt;]====&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;......&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;CMake Error at C:/Program Files/JetBrains/CLion 2023.1.4/bin/cmake/win/x64/share/cmake-3.25/Modules/FindPackageHandleStandardArgs.cmake:230 &lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;message&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt;:&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  Could NOT find Boost &lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;missing: Boost_INCLUDE_DIR filesystem system&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;Call Stack &lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;most recent call first&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt;:&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  C:/Program Files/JetBrains/CLion 2023.1.4/bin/cmake/win/x64/share/cmake-3.25/Modules/FindPackageHandleStandardArgs.cmake:600 &lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;_FPHSA_FAILURE_MESSAGE&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  C:/Program Files/JetBrains/CLion 2023.1.4/bin/cmake/win/x64/share/cmake-3.25/Modules/FindBoost.cmake:2377 &lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;find_package_handle_standard_args&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  C:/Users/luyang/.clion-vcpkg/vcpkg/scripts/buildsystems/vcpkg.cmake:855 &lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;_find_package&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  TestDemo/CMakeLists.txt:8 &lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;find_package&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;CMake Configure step failed.  Build files cannot be regenerated correctly.&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;-- Configuring incomplete, errors occurred!&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;See also &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;C:/Users/luyang/Documents/TestDemo/cmake-build-release-visual-studio/CMakeFiles/CMakeOutput.log&amp;#34;&lt;/span&gt;.&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;增加 ：&lt;code&gt;set(Boost_INCLUDE_DIR ${_VCPKG_INSTALLED_DIR}/x64-windows/include)&lt;/code&gt;&lt;/p&gt;</description>
    </item>
  </channel>
</rss>
