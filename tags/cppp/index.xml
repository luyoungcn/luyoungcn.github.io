<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Cppp on LuyangのBlog</title>
    <link>/tags/cppp/</link>
    <description>Recent content in Cppp on LuyangのBlog</description>
    <generator>Hugo</generator>
    <language>en-US</language>
    <lastBuildDate>Wed, 04 Jun 2025 02:30:00 +0800</lastBuildDate>
    <atom:link href="/tags/cppp/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>📌 C&#43;&#43;类成员函数 static 与 const 的声明与定义规则解析</title>
      <link>/posts/-c&#43;&#43;-%E7%B1%BB%E6%88%90%E5%91%98%E5%87%BD%E6%95%B0-static-%E4%B8%8E-const-%E7%9A%84%E5%A3%B0%E6%98%8E%E4%B8%8E%E5%AE%9A%E4%B9%89%E8%A7%84%E5%88%99%E8%A7%A3%E6%9E%90/</link>
      <pubDate>Wed, 04 Jun 2025 02:30:00 +0800</pubDate>
      <guid>/posts/-c&#43;&#43;-%E7%B1%BB%E6%88%90%E5%91%98%E5%87%BD%E6%95%B0-static-%E4%B8%8E-const-%E7%9A%84%E5%A3%B0%E6%98%8E%E4%B8%8E%E5%AE%9A%E4%B9%89%E8%A7%84%E5%88%99%E8%A7%A3%E6%9E%90/</guid>
      <description>&lt;h1 id=&#34;-c类成员函数static-与-const-的声明与定义规则解析&#34;&gt;📌 C++类成员函数：&lt;code&gt;static&lt;/code&gt; 与 &lt;code&gt;const&lt;/code&gt; 的声明与定义规则解析&lt;/h1&gt;&#xA;&lt;blockquote&gt;&#xA;&lt;p&gt;为什么头文件声明要写 &lt;code&gt;static/const&lt;/code&gt;，而实现时 &lt;code&gt;static&lt;/code&gt; 要省略、&lt;code&gt;const&lt;/code&gt; 必须保留？&lt;/p&gt;&lt;/blockquote&gt;&#xA;&lt;h2 id=&#34;-核心规则对比表&#34;&gt;🔍 核心规则对比表&lt;/h2&gt;&#xA;&lt;table&gt;&#xA;  &lt;thead&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;th&gt;&lt;strong&gt;关键字&lt;/strong&gt;&lt;/th&gt;&#xA;          &lt;th&gt;&lt;strong&gt;头文件（.h）声明&lt;/strong&gt;&lt;/th&gt;&#xA;          &lt;th&gt;&lt;strong&gt;源文件（.cpp）定义&lt;/strong&gt;&lt;/th&gt;&#xA;          &lt;th&gt;&lt;strong&gt;底层原因&lt;/strong&gt;&lt;/th&gt;&#xA;      &lt;/tr&gt;&#xA;  &lt;/thead&gt;&#xA;  &lt;tbody&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td&gt;&lt;strong&gt;&lt;code&gt;static&lt;/code&gt;&lt;/strong&gt;&lt;/td&gt;&#xA;          &lt;td&gt;必须显式声明：&lt;code&gt;static void func();&lt;/code&gt;&lt;/td&gt;&#xA;          &lt;td&gt;&lt;strong&gt;禁止重复&lt;/strong&gt;：直接写 &lt;code&gt;void Class::func()&lt;/code&gt;&lt;/td&gt;&#xA;          &lt;td&gt;&lt;code&gt;static&lt;/code&gt; 标识函数归属类而非对象；定义时 &lt;code&gt;ClassName::&lt;/code&gt; 已隐含作用域，再写 &lt;code&gt;static&lt;/code&gt; 会被解释为文件作用域函数，破坏封装性。&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td&gt;&lt;strong&gt;&lt;code&gt;const&lt;/code&gt;&lt;/strong&gt;&lt;/td&gt;&#xA;          &lt;td&gt;必须显式声明：&lt;code&gt;int get() const;&lt;/code&gt;&lt;/td&gt;&#xA;          &lt;td&gt;&lt;strong&gt;必须保留&lt;/strong&gt;：&lt;code&gt;int Class::get() const&lt;/code&gt;&lt;/td&gt;&#xA;          &lt;td&gt;&lt;code&gt;const&lt;/code&gt; 是函数签名的一部分，声明与定义必须严格一致，否则编译器视为不同函数，导致链接错误。&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;  &lt;/tbody&gt;&#xA;&lt;/table&gt;&#xA;&lt;hr&gt;&#xA;&lt;h2 id=&#34;-一static-关键字的声明与定义分离&#34;&gt;⚙️ 一、&lt;code&gt;static&lt;/code&gt; 关键字的声明与定义分离&lt;/h2&gt;&#xA;&lt;h3 id=&#34;1-声明时需&#34;&gt;1. &lt;strong&gt;声明时需 &lt;code&gt;static&lt;/code&gt;&lt;/strong&gt;&lt;/h3&gt;&#xA;&lt;p&gt;在头文件中，&lt;code&gt;static&lt;/code&gt; 明确标识该函数是&lt;strong&gt;类级别共享&lt;/strong&gt;的，不依赖对象实例（无 &lt;code&gt;this&lt;/code&gt; 指针）：&lt;/p&gt;&#xA;&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;// MyClass.h&#xA;class MyClass {&#xA;public:&#xA;    static void sharedFunc(); // ✅ 声明为静态&#xA;};&#xA;&lt;/code&gt;&lt;/pre&gt;&lt;h3 id=&#34;2-定义时禁止&#34;&gt;2. &lt;strong&gt;定义时禁止 &lt;code&gt;static&lt;/code&gt;&lt;/strong&gt;&lt;/h3&gt;&#xA;&lt;p&gt;在源文件中，&lt;code&gt;ClassName::&lt;/code&gt; 已指明函数归属类作用域。若添加 &lt;code&gt;static&lt;/code&gt;：&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;会被编译器解释为&lt;strong&gt;文件作用域的静态函数&lt;/strong&gt;（仅当前 &lt;code&gt;.cpp&lt;/code&gt; 可见）；&lt;/li&gt;&#xA;&lt;li&gt;导致无法通过 &lt;code&gt;MyClass::sharedFunc()&lt;/code&gt; 全局访问，破坏封装性。&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;p&gt;✅ 正确写法：&lt;/p&gt;</description>
    </item>
  </channel>
</rss>
