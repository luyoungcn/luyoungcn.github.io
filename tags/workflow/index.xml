<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Workflow on LuyangのBlog</title>
    <link>/tags/workflow/</link>
    <description>Recent content in Workflow on LuyangのBlog</description>
    <generator>Hugo</generator>
    <language>en-US</language>
    <lastBuildDate>Wed, 04 Jun 2025 02:30:00 +0800</lastBuildDate>
    <atom:link href="/tags/workflow/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>🔊告别混乱，玩转高效协作：GitHub 与 Git CLI 的“三角工作流”深度解析</title>
      <link>/posts/%E5%91%8A%E5%88%AB%E6%B7%B7%E4%B9%B1%E7%8E%A9%E8%BD%AC%E9%AB%98%E6%95%88%E5%8D%8F%E4%BD%9Cgithub-%E4%B8%8E-git-cli-%E7%9A%84%E4%B8%89%E8%A7%92%E5%B7%A5%E4%BD%9C%E6%B5%81%E6%B7%B1%E5%BA%A6%E8%A7%A3%E6%9E%90/</link>
      <pubDate>Wed, 04 Jun 2025 02:30:00 +0800</pubDate>
      <guid>/posts/%E5%91%8A%E5%88%AB%E6%B7%B7%E4%B9%B1%E7%8E%A9%E8%BD%AC%E9%AB%98%E6%95%88%E5%8D%8F%E4%BD%9Cgithub-%E4%B8%8E-git-cli-%E7%9A%84%E4%B8%89%E8%A7%92%E5%B7%A5%E4%BD%9C%E6%B5%81%E6%B7%B1%E5%BA%A6%E8%A7%A3%E6%9E%90/</guid>
      <description>&lt;h2 id=&#34;告别混乱玩转高效协作github-与-git-cli-的三角工作流深度解析&#34;&gt;告别混乱，玩转高效协作：GitHub 与 Git CLI 的“三角工作流”深度解析&lt;/h2&gt;&#xA;&lt;p&gt;在现代软件开发中，团队协作是常态。无论是参与热门的开源项目，还是在公司内部与同事并肩作战，高效的代码管理策略都是成功的基石。如果你曾对 Git 的分支操作感到困惑，或者觉得 GitHub 上的 Fork (派生) 和 Pull Request (PR) 让人望而却步，那么是时候深入了解并掌握一套强大的协作模式了——那就是 &lt;strong&gt;“三角工作流”（Triangular Workflow）&lt;/strong&gt;。&lt;/p&gt;&#xA;&lt;p&gt;它不仅能让你的代码管理井然有序，还能大幅提升团队的协作效率。更棒的是，有了强大的 &lt;strong&gt;GitHub CLI (&lt;code&gt;gh&lt;/code&gt; 命令)&lt;/strong&gt; 作为你的得力助手，整个流程将变得前所未有的流畅和智能。&lt;/p&gt;&#xA;&lt;hr&gt;&#xA;&lt;h3 id=&#34;理解三角工作流的核心概念一场厨房里的协作革命&#34;&gt;理解“三角工作流”的核心概念：一场厨房里的协作革命&lt;/h3&gt;&#xA;&lt;p&gt;为了更好地理解“三角工作流”，我们不妨把它想象成一家星级餐馆的厨房运作模式。&lt;/p&gt;&#xA;&lt;h4 id=&#34;1-主厨的食谱书项目的上游仓库upstream-repository&#34;&gt;1. 主厨的食谱书：项目的“上游仓库”（Upstream Repository）&lt;/h4&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&lt;strong&gt;类比：&lt;/strong&gt; 这本食谱书是餐馆的灵魂，记载了所有招牌菜的&lt;strong&gt;稳定、经过严格验证&lt;/strong&gt;的配方。它是所有菜品的最终版本，不会被随意修改。&lt;/li&gt;&#xA;&lt;li&gt;&lt;strong&gt;实际意义：&lt;/strong&gt; &lt;strong&gt;上游仓库&lt;/strong&gt;就是项目的原始仓库，通常由项目维护者掌控。它的 &lt;code&gt;main&lt;/code&gt; (或 &lt;code&gt;master&lt;/code&gt;) 和 &lt;code&gt;develop&lt;/code&gt; 分支包含了项目的核心代码，稳定且随时准备发布。你通常&lt;strong&gt;没有直接向其推送代码的权限&lt;/strong&gt;，这是为了保证代码库的质量和稳定性。&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h4 id=&#34;2-你自己的食谱本你的派生仓库forked-repository&#34;&gt;2. 你自己的食谱本：你的“派生仓库”（Forked Repository）&lt;/h4&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&lt;strong&gt;类比：&lt;/strong&gt; 作为一名新加入的厨师，你不能直接在主厨的食谱书上涂改。因此，你会&lt;strong&gt;抄写一本属于你自己的食谱本&lt;/strong&gt;。这本食谱本是你个人的试验田，你可以随意在上面添加笔记、修改配方，甚至尝试全新的菜肴。&lt;/li&gt;&#xA;&lt;li&gt;&lt;strong&gt;实际意义：&lt;/strong&gt; &lt;strong&gt;派生仓库&lt;/strong&gt;是你在 GitHub 上从上游仓库复制的一个&lt;strong&gt;个人副本&lt;/strong&gt;。这个副本完全属于你，你可以自由地向其推送（&lt;code&gt;push&lt;/code&gt;）代码、创建分支，而不会影响到原始的上游仓库。这是你进行个人开发和试验的“安全沙箱”。&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h4 id=&#34;3-你的新菜试验单你的特性分支feature-branch--topic-branch&#34;&gt;3. 你的新菜试验单：你的“特性分支”（Feature Branch / Topic Branch）&lt;/h4&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&lt;strong&gt;类比：&lt;/strong&gt; 主厨让你开发一道新甜点。你不会直接在你自己的食谱本上修改，因为你可能需要尝试好几种配方和做法。你会拿出一张&lt;strong&gt;空白的试验单&lt;/strong&gt;，专门用来记录和修改这个新甜点的配方。你可以在这张试验单上放心地试验，即使失败了，也不会弄乱你自己的食谱本。&lt;/li&gt;&#xA;&lt;li&gt;&lt;strong&gt;实际意义：&lt;/strong&gt; &lt;strong&gt;特性分支&lt;/strong&gt;是你在本地从 &lt;code&gt;main&lt;/code&gt; 或 &lt;code&gt;develop&lt;/code&gt; 分支创建的&lt;strong&gt;临时性、短生命周期分支&lt;/strong&gt;。每当你需要开发一个新功能、修复一个 Bug 或进行任何独立的工作时，都应该创建一个新的特性分支。这能确保你的不同工作任务之间&lt;strong&gt;互相隔离&lt;/strong&gt;，避免代码冲突和混乱。&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h4 id=&#34;4-递交新菜建议提交拉取请求pull-request---pr&#34;&gt;4. 递交新菜建议：提交“拉取请求”（Pull Request - PR）&lt;/h4&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&lt;strong&gt;类比：&lt;/strong&gt; 当你确信新甜点的配方完美无缺，并想让它成为餐馆的正式菜品时，你不会直接把它写到主厨的食谱书里。你会把你的&lt;strong&gt;试验单&lt;/strong&gt;连同你的自信，一起递交给“主厨”，并说：“主厨，这是我研发的新甜点配方，请您审查！” 主厨和资深厨师会仔细审查你的配方。如果没问题，它就会被正式收录到&lt;strong&gt;主厨的食谱书&lt;/strong&gt;中。&lt;/li&gt;&#xA;&lt;li&gt;&lt;strong&gt;实际意义：&lt;/strong&gt; &lt;strong&gt;Pull Request&lt;/strong&gt; 是你在 GitHub 上发起的一个&lt;strong&gt;请求&lt;/strong&gt;，请求项目维护者（主厨）将你派生仓库中特性分支的代码，合并到上游仓库的指定分支（通常是 &lt;code&gt;develop&lt;/code&gt; 或 &lt;code&gt;main&lt;/code&gt;）。这是一个代码审查和讨论的平台，确保只有高质量、符合规范的代码才能进入主项目。&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;hr&gt;&#xA;&lt;h3 id=&#34;三角工作流的实战演练git-cli-与-github-联手&#34;&gt;“三角工作流”的实战演练：Git CLI 与 GitHub 联手&lt;/h3&gt;&#xA;&lt;p&gt;理解了核心概念，接下来我们通过 Git CLI 命令，一步步地实现这个强大的工作流：&lt;/p&gt;</description>
    </item>
  </channel>
</rss>
