<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>SMBus on LuyangのBlog</title>
    <link>/tags/smbus/</link>
    <description>Recent content in SMBus on LuyangのBlog</description>
    <generator>Hugo</generator>
    <language>en-US</language>
    <lastBuildDate>Tue, 08 Jul 2025 02:30:00 +0800</lastBuildDate>
    <atom:link href="/tags/smbus/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>📘 GMSL2 I2C别名与PEC校验的冲突：深层技术解析、根本性解决方案与安全考量</title>
      <link>/posts/gmsl2-i2c%E5%88%AB%E5%90%8D%E4%B8%8Epec%E6%A0%A1%E9%AA%8C%E7%9A%84%E5%86%B2%E7%AA%81%E6%B7%B1%E5%B1%82%E6%8A%80%E6%9C%AF%E8%A7%A3%E6%9E%90%E6%A0%B9%E6%9C%AC%E6%80%A7%E8%A7%A3%E5%86%B3%E6%96%B9%E6%A1%88%E4%B8%8E%E5%AE%89%E5%85%A8%E8%80%83%E9%87%8F/</link>
      <pubDate>Tue, 08 Jul 2025 02:30:00 +0800</pubDate>
      <guid>/posts/gmsl2-i2c%E5%88%AB%E5%90%8D%E4%B8%8Epec%E6%A0%A1%E9%AA%8C%E7%9A%84%E5%86%B2%E7%AA%81%E6%B7%B1%E5%B1%82%E6%8A%80%E6%9C%AF%E8%A7%A3%E6%9E%90%E6%A0%B9%E6%9C%AC%E6%80%A7%E8%A7%A3%E5%86%B3%E6%96%B9%E6%A1%88%E4%B8%8E%E5%AE%89%E5%85%A8%E8%80%83%E9%87%8F/</guid>
      <description>&lt;h1 id=&#34;gmsl2-i2c别名与pec校验的冲突深层技术解析根本性解决方案与安全考量&#34;&gt;📘GMSL2 I2C别名与PEC校验的冲突：深层技术解析、根本性解决方案与安全考量&lt;/h1&gt;&#xA;&lt;h2 id=&#34;摘要&#34;&gt;摘要&lt;/h2&gt;&#xA;&lt;p&gt;在汽车电子领域，GMSL2（Gigabit Multimedia Serial Link 2）因其高带宽、低延迟的传感器数据传输能力而被广泛应用。其I2C别名功能解决了相同设备（如图像传感器）之间的地址冲突问题，而SMBus/I2C的PEC（Packet Error Checking，数据包错误校验）则增强了通信的可靠性。然而，同时使用这两种功能时，PEC校验会失效，原因在于两者存在固有的不兼容性。本文深入剖析了这一问题，将其归类为“泄露的抽象”，并提供了一个实用的应用层解决方案。&lt;/p&gt;&#xA;&lt;hr&gt;&#xA;&lt;h2 id=&#34;1-引言汽车系统中的通信挑战&#34;&gt;1. 引言：汽车系统中的通信挑战&lt;/h2&gt;&#xA;&lt;p&gt;随着ADAS（高级驾驶辅助系统）和自动驾驶技术的发展，现代汽车依赖于大量传感器，这些传感器产生海量数据流。GMSL2由Analog Devices开发，凭借其6 Gbps的带宽和15米的传输距离，广泛用于连接传感器和中央处理器。然而，两个挑战随之而来：&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&lt;strong&gt;I2C地址冲突&lt;/strong&gt;：多个相同的传感器（如摄像头）共享相同的I2C地址，导致通信冲突。&lt;/li&gt;&#xA;&lt;li&gt;&lt;strong&gt;数据可靠性&lt;/strong&gt;：汽车内部的电磁干扰（EMI）可能损坏I2C控制消息，对安全性构成威胁。&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;p&gt;GMSL2的I2C别名功能解决了地址冲突问题，而PEC则确保了数据的完整性。然而，同时使用这两种功能会导致PEC校验失败，危及系统稳定性。&lt;/p&gt;&#xA;&lt;hr&gt;&#xA;&lt;h2 id=&#34;2-gmsl2与i2c别名工作原理&#34;&gt;2. GMSL2与I2C别名：工作原理&lt;/h2&gt;&#xA;&lt;h3 id=&#34;21-gmsl2-serdes架构&#34;&gt;2.1 GMSL2 SerDes架构&lt;/h3&gt;&#xA;&lt;p&gt;GMSL2采用串行器/解串器（SerDes）架构。传感器端的串行器将数据转换为串行流，处理器端的解串器将其还原。双向控制通道（包括I2C）实现了主机与远程设备之间的透明通信。&lt;/p&gt;&#xA;&lt;h3 id=&#34;22-i2c别名机制&#34;&gt;2.2 I2C别名机制&lt;/h3&gt;&#xA;&lt;p&gt;I2C别名通过将唯一别名地址（主机使用）映射到真实地址（远程设备使用）来解决地址冲突。解串器硬件无缝执行这一转换：&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&lt;strong&gt;示例&lt;/strong&gt;：两个真实地址为&lt;code&gt;0x1A&lt;/code&gt;的摄像头被分配别名&lt;code&gt;0x70&lt;/code&gt;和&lt;code&gt;0x72&lt;/code&gt;。主机使用别名通信，解串器将其重映射为&lt;code&gt;0x1A&lt;/code&gt;发送给相应设备。&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;p&gt;这一抽象简化了系统设计，但与PEC结合使用时会引发问题。&lt;/p&gt;&#xA;&lt;hr&gt;&#xA;&lt;h2 id=&#34;3-smbusi2c-pec确保可靠性&#34;&gt;3. SMBus/I2C PEC：确保可靠性&lt;/h2&gt;&#xA;&lt;p&gt;PEC使用CRC-8校验和（多项式&lt;code&gt;x^8 + x^2 + x^1 + 1&lt;/code&gt;）附加到I2C消息中，覆盖整个消息（包括地址字节和数据），确保端到端的数据完整性。如果接收方计算的PEC与发送的PEC不匹配，则通过NACK信号报告错误。&lt;/p&gt;&#xA;&lt;hr&gt;&#xA;&lt;h2 id=&#34;4-冲突根源泄露的抽象&#34;&gt;4. 冲突根源：泄露的抽象&lt;/h2&gt;&#xA;&lt;p&gt;问题的根源在于PEC计算中的地址不匹配：&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&lt;strong&gt;主机&lt;/strong&gt;：使用别名地址（如&lt;code&gt;0x70&lt;/code&gt; → &lt;code&gt;0xE0&lt;/code&gt;含写位）计算PEC。&lt;/li&gt;&#xA;&lt;li&gt;&lt;strong&gt;解串器&lt;/strong&gt;：将别名转换为真实地址（如&lt;code&gt;0x1A&lt;/code&gt; → &lt;code&gt;0x34&lt;/code&gt;）后转发。&lt;/li&gt;&#xA;&lt;li&gt;&lt;strong&gt;远程设备&lt;/strong&gt;：使用其真实地址（&lt;code&gt;0x34&lt;/code&gt;）验证PEC。&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;p&gt;由于CRC-8对每个输入字节敏感，不同的地址会导致PEC不一致，校验失败。这是一个“泄露的抽象”——GMSL2的别名功能隐藏了地址转换，但PEC依赖于原始地址，暴露了这一细节。&lt;/p&gt;&#xA;&lt;hr&gt;&#xA;&lt;h2 id=&#34;5-根本性解决方案应用层i2c重构&#34;&gt;5. 根本性解决方案：应用层I2C重构&lt;/h2&gt;&#xA;&lt;p&gt;为解决此问题，需将通信地址（别名）与PEC计算地址（真实）解耦。标准I2C API会自动使用事务地址计算PEC，因此我们使用Linux的&lt;code&gt;I2C_RDWR&lt;/code&gt; ioctl绕过这一限制。&lt;/p&gt;&#xA;&lt;h3 id=&#34;51-实施步骤&#34;&gt;5.1 实施步骤&lt;/h3&gt;&#xA;&lt;ol&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;&lt;strong&gt;禁用内核PEC&lt;/strong&gt;&lt;br&gt;&#xA;阻止自动PEC计算：&lt;/p&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-c&#34; data-lang=&#34;c&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;ioctl&lt;/span&gt;(fd, I2C_PEC, &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/li&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;&lt;strong&gt;手动计算PEC&lt;/strong&gt;&lt;br&gt;&#xA;使用真实地址进行CRC-8计算：&lt;/p&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-c&#34; data-lang=&#34;c&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;uint8_t&lt;/span&gt; real_addr &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0x1A&lt;/span&gt;;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;uint8_t&lt;/span&gt; data[] &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; {&lt;span style=&#34;color:#ae81ff&#34;&gt;0xAB&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0xCD&lt;/span&gt;};&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;uint8_t&lt;/span&gt; pec_input[] &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; {(real_addr &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;) &lt;span style=&#34;color:#f92672&#34;&gt;|&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0xAB&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0xCD&lt;/span&gt;};&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;uint8_t&lt;/span&gt; pec &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;crc8&lt;/span&gt;(pec_input, &lt;span style=&#34;color:#ae81ff&#34;&gt;3&lt;/span&gt;); &lt;span style=&#34;color:#75715e&#34;&gt;// 自定义CRC-8函数&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/li&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;&lt;strong&gt;构建I2C负载&lt;/strong&gt;&lt;br&gt;&#xA;将计算的PEC附加到数据中：&lt;/p&gt;</description>
    </item>
  </channel>
</rss>
