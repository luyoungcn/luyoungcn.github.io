<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Systemd on LuyangのBlog</title>
    <link>/tags/systemd/</link>
    <description>Recent content in Systemd on LuyangのBlog</description>
    <generator>Hugo</generator>
    <language>en-US</language>
    <lastBuildDate>Tue, 16 Sep 2025 02:30:00 +0800</lastBuildDate>
    <atom:link href="/tags/systemd/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>📘systemd 单元文件</title>
      <link>/posts/systemd-%E5%8D%95%E5%85%83%E6%96%87%E4%BB%B6/</link>
      <pubDate>Tue, 16 Sep 2025 02:30:00 +0800</pubDate>
      <guid>/posts/systemd-%E5%8D%95%E5%85%83%E6%96%87%E4%BB%B6/</guid>
      <description>&lt;p&gt;[[systemd]]&lt;/p&gt;&#xA;&lt;h1 id=&#34;systemd-单元文件&#34;&gt;systemd 单元文件&lt;/h1&gt;&#xA;&lt;p&gt;&lt;code&gt;systemd&lt;/code&gt; 的核心设计思想是将系统里的一切资源都抽象成“单元”（Unit）。单元是 &lt;code&gt;systemd&lt;/code&gt; 管理的基本对象，涵盖了服务、套接字、设备、挂载点乃至系统状态等。&lt;/p&gt;&#xA;&lt;p&gt;&lt;strong&gt;单元文件&lt;/strong&gt;就是用来定义一个单元的纯文本配置文件。它清晰地描述了这个单元的属性、行为以及它与其他单元之间的关系。这些文件采用类似 INI 的语法，易于阅读和编写。&lt;/p&gt;&#xA;&lt;h2 id=&#34;文件位置与优先级&#34;&gt;文件位置与优先级&lt;/h2&gt;&#xA;&lt;p&gt;&lt;code&gt;systemd&lt;/code&gt; 会从多个目录中加载单元文件，并遵循一套明确的优先级规则&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;系统级（只读包）：&lt;code&gt;/usr/lib/systemd/system/&lt;/code&gt;&lt;/li&gt;&#xA;&lt;li&gt;系统级（本地管理员覆写）：&lt;code&gt;/etc/systemd/system/&lt;/code&gt;&lt;/li&gt;&#xA;&lt;li&gt;运行时（临时，重启丢失）：&lt;code&gt;/run/systemd/system/&lt;/code&gt;&lt;/li&gt;&#xA;&lt;li&gt;优先级：&lt;code&gt;/etc&lt;/code&gt; 覆盖 &lt;code&gt;/run&lt;/code&gt; 覆盖 &lt;code&gt;/usr/lib&lt;/code&gt;。同名时，高优先级目录生效。&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;p&gt;推荐使用 &lt;code&gt;systemctl edit &amp;lt;unit&amp;gt;&lt;/code&gt; 生成 drop-in 覆盖，避免直接改发行文件。&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&lt;code&gt;/etc/systemd/system/&lt;/code&gt;：最高优先级。系统管理员存放自定义或修改后的单元文件的地方。这里的配置会覆盖其他位置的同名文件。&lt;/li&gt;&#xA;&lt;li&gt;&lt;code&gt;/run/systemd/system/&lt;/code&gt;：第二优先级。通常由程序在运行时动态创建单元文件。系统重启后该目录内容会丢失。&lt;/li&gt;&#xA;&lt;li&gt;/usr/lib/systemd/system/&lt;code&gt;：最低优先级。通常由软件包管理器（如 &lt;/code&gt;apt&lt;code&gt;、&lt;/code&gt;yum`）安装的默认单元文件存放于此。&lt;strong&gt;不建议直接修改这里的文件&lt;/strong&gt;。&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;p&gt;核心原则：当需要修改一个默认单元文件时（例如 &lt;code&gt;sshd.service&lt;/code&gt;），推荐使用 &lt;code&gt;systemctl edit --full sshd.service&lt;/code&gt; 命令。它会自动将文件从 &lt;code&gt;/usr/lib/systemd/system/&lt;/code&gt; 复制到 &lt;code&gt;/etc/systemd/system/&lt;/code&gt; 并打开编辑器，确保你的修改具有最高优先级且不会在软件包升级时被覆盖。&lt;/p&gt;&#xA;&lt;h2 id=&#34;systemd-unit&#34;&gt;systemd unit&lt;/h2&gt;&#xA;&lt;p&gt;定义行为、依赖与生命周期&lt;/p&gt;&#xA;&lt;p&gt;管理的对象：服务、套接字、计时器、挂载点等。&lt;/p&gt;&#xA;&lt;p&gt;常见类型：&lt;code&gt;service&lt;/code&gt;、&lt;code&gt;socket&lt;/code&gt;、&lt;code&gt;target&lt;/code&gt;、&lt;code&gt;timer&lt;/code&gt;、&lt;code&gt;path&lt;/code&gt;、&lt;code&gt;mount&lt;/code&gt;、&lt;code&gt;automount&lt;/code&gt;、&lt;code&gt;device&lt;/code&gt;、&lt;code&gt;slice&lt;/code&gt;、&lt;code&gt;scope&lt;/code&gt;。&lt;/p&gt;&#xA;&lt;h3 id=&#34;单元命名与实例化&#34;&gt;单元命名与实例化&lt;/h3&gt;&#xA;&lt;p&gt;文件名格式：&lt;code&gt;name.type&lt;/code&gt;，例如：&lt;code&gt;nginx.service&lt;/code&gt;、&lt;code&gt;sshd.socket&lt;/code&gt;。&lt;/p&gt;&#xA;&lt;p&gt;模板单元：&lt;code&gt;name@.type&lt;/code&gt;，实例化时用 &lt;code&gt;name@instance.type&lt;/code&gt;，适合 per-connection 或 per-device。&lt;/p&gt;&#xA;&lt;p&gt;你当前使用的是模板服务 &lt;code&gt;dropbear@.service&lt;/code&gt; 配合 &lt;code&gt;dropbear.socket&lt;/code&gt; 实现每连接派生。&lt;/p&gt;&#xA;&lt;h2 id=&#34;单元文件结构&#34;&gt;单元文件结构&lt;/h2&gt;&#xA;&lt;p&gt;一个单元文件通常由几个配置段（Section）组成，每个段由 &lt;code&gt;[方括号]&lt;/code&gt; 标识。其中，&lt;code&gt;[Unit]&lt;/code&gt; 和 &lt;code&gt;[Install]&lt;/code&gt; 是几乎所有单元类型都通用的。&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&lt;code&gt;[Unit]&lt;/code&gt;: 通用元信息、依赖、顺序。&lt;/li&gt;&#xA;&lt;li&gt;&lt;code&gt;[Service]&lt;/code&gt;/&lt;code&gt;[Socket]&lt;/code&gt;/&lt;code&gt;[Timer]&lt;/code&gt;/…：类型专属的配置段。&lt;/li&gt;&#xA;&lt;li&gt;&lt;code&gt;[Install]&lt;/code&gt;: 启用时的附着点（WantedBy/RequiredBy/Also）。&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h3 id=&#34;unit-段通用元数据与依赖关系&#34;&gt;&lt;code&gt;[Unit]&lt;/code&gt; 段：通用元数据与依赖关系&lt;/h3&gt;&#xA;&lt;p&gt;此段定义了单元的通用属性，它不关心单元的类型。&lt;/p&gt;</description>
    </item>
  </channel>
</rss>
